<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://ziya-jiang.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://ziya-jiang.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-07-18T15:50:02+00:00</updated><id>https://ziya-jiang.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">YanBot Analysis</title><link href="https://ziya-jiang.github.io/blog/2025/YanBot-analysis/" rel="alternate" type="text/html" title="YanBot Analysis"/><published>2025-07-19T03:50:00+00:00</published><updated>2025-07-19T03:50:00+00:00</updated><id>https://ziya-jiang.github.io/blog/2025/YanBot-analysis</id><content type="html" xml:base="https://ziya-jiang.github.io/blog/2025/YanBot-analysis/"><![CDATA[<h1 id="如何使用这个工程">如何使用这个工程</h1> <p><em>Exported on 2025/7/18 at GMT+8 23:42:43 from Cursor (1.1.7)</em></p> <hr/> <p><strong>User</strong></p> <p>讲解一下我该如何使用这个工程</p> <hr/> <p><strong>Cursor</strong></p> <p>我来帮您分析这个工程的结构和使用方法。首先让我查看一下项目的README文件和主要配置文件。</p> <p>README文件是空的，让我查看一下scripts目录下的配置文件，这些通常包含项目的使用说明。</p> <p>现在让我查看一些主要的launch文件来了解系统的启动方式：</p> <p>现在让我查看一些主要的Python节点文件来了解系统的功能：</p> <p>基于我对项目结构的分析，我来为您详细讲解这个YanBot工程的使用方法：</p> <h2 id="yanbot工程使用指南">YanBot工程使用指南</h2> <h3 id="项目概述">项目概述</h3> <p>YanBot是一个基于ROS Noetic的智能机器人系统，集成了语音交互、视觉感知、导航定位、机械臂控制等功能。项目采用模块化设计，分为以下几个主要部分：</p> <h3 id="1-系统架构">1. 系统架构</h3> <ul> <li><strong>Brain（大脑）</strong>: 包含LLM和VLM模块，负责语言理解和视觉理解</li> <li><strong>Cerebellum（小脑）</strong>: 包含导航、交互、语义地图等核心功能模块</li> <li><strong>Arm（机械臂）</strong>: ARX-R5机械臂控制系统</li> </ul> <h3 id="2-环境配置">2. 环境配置</h3> <h4 id="21-基础环境设置">2.1 基础环境设置</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 1. 运行基础配置脚本</span>
<span class="nb">cd</span> /home/kara/YanBot-zyt
<span class="nb">chmod</span> +x scripts/basic.sh
./scripts/basic.sh

<span class="c"># 2. 安装依赖</span>
<span class="nb">chmod</span> +x scripts/deps.sh
./scripts/deps.sh
</code></pre></div></div> <h4 id="22-conda环境配置">2.2 Conda环境配置</h4> <p>项目需要两个conda环境：</p> <p><strong>interact环境（语音交互）</strong>:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda <span class="nb">env </span>create <span class="nt">-f</span> scripts/interact.yaml <span class="nt">-v</span>
conda <span class="nb">env </span>update <span class="nt">-n</span> interact <span class="nt">-f</span> scripts/py310.yaml <span class="nt">-v</span>
</code></pre></div></div> <p><strong>py310环境（视觉处理）</strong>:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda <span class="nb">env </span>create <span class="nt">-f</span> scripts/py310.yaml <span class="nt">-v</span>
conda <span class="nb">env </span>update <span class="nt">-n</span> py310 <span class="nt">-f</span> scripts/py310.yaml <span class="nt">-v</span>
</code></pre></div></div> <h3 id="3-主要功能模块">3. 主要功能模块</h3> <h4 id="31-语音交互系统">3.1 语音交互系统</h4> <ul> <li><strong>唤醒词检测</strong>: 使用Picovoice进行语音唤醒</li> <li><strong>语音识别(STT)</strong>: 基于FunASR的中文语音识别</li> <li><strong>语音合成(TTS)</strong>: 基于ChatTTS的语音合成</li> </ul> <p>启动语音交互测试：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>roslaunch cerebellum_pkg test_interact.launch
</code></pre></div></div> <h4 id="32-导航系统">3.2 导航系统</h4> <ul> <li><strong>2D导航</strong>: 基于Wheeltec机器人的2D导航</li> <li><strong>3D导航</strong>: 支持3D环境导航</li> <li><strong>SLAM建图</strong>: 支持激光雷达和视觉SLAM</li> </ul> <p>启动主系统：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>roslaunch cerebellum_pkg main.launch
</code></pre></div></div> <h4 id="33-语义地图系统">3.3 语义地图系统</h4> <ul> <li><strong>目标检测</strong>: 基于YOLO的目标检测</li> <li><strong>实例分割</strong>: 基于SAM的实例分割</li> <li><strong>语义理解</strong>: 基于CLIP的语义理解</li> </ul> <p>启动语义地图：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>roslaunch semantic_map_pkg semantic_map.launch
</code></pre></div></div> <h4 id="34-机械臂控制">3.4 机械臂控制</h4> <ul> <li><strong>ARX-R5控制</strong>: 支持机械臂的精确控制</li> <li><strong>CAN通信</strong>: 基于CAN总线的硬件通信</li> </ul> <h3 id="4-使用流程">4. 使用流程</h3> <h4 id="41-首次使用">4.1 首次使用</h4> <ol> <li> <p><strong>环境配置</strong>:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">source</span> ~/.bashrc
<span class="nb">cd</span> <span class="nv">$YANBOT_WS</span>
</code></pre></div> </div> </li> <li> <p><strong>编译工作空间</strong>:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>catkin_make
<span class="nb">source </span>devel/setup.bash
</code></pre></div> </div> </li> <li> <p><strong>下载模型权重</strong>:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>src/Cerebellum/semantic_map/yolo_evsam_ros/weights/
./download_weights.sh
</code></pre></div> </div> </li> </ol> <h4 id="42-日常使用">4.2 日常使用</h4> <p><strong>语音交互模式</strong>:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 启动语音交互</span>
roslaunch cerebellum_pkg test_interact.launch
<span class="c"># 说"你好"或其他唤醒词开始交互</span>
</code></pre></div></div> <p><strong>完整系统模式</strong>:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 启动完整系统（包含导航、视觉等）</span>
roslaunch cerebellum_pkg main.launch
</code></pre></div></div> <p><strong>建图模式</strong>:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 首次建图</span>
roslaunch cerebellum_pkg first_mapping.launch
</code></pre></div></div> <h3 id="5-配置参数">5. 配置参数</h3> <h4 id="51-导航配置">5.1 导航配置</h4> <ul> <li>地图文件位置: <code class="language-plaintext highlighter-rouge">src/Cerebellum/wheel_dir/wheeltec_noetic_src/turn_on_wheeltec_robot/map/</code></li> <li>导航参数: 可在launch文件中调整</li> </ul> <h4 id="52-语音配置">5.2 语音配置</h4> <ul> <li>唤醒词: 可在<code class="language-plaintext highlighter-rouge">wakeup_pkg</code>中配置</li> <li>语音模型: 使用SenseVoiceSmall模型</li> <li>音频设备: 自动检测或手动配置</li> </ul> <h4 id="53-视觉配置">5.3 视觉配置</h4> <ul> <li>相机: 支持RealSense相机</li> <li>检测模型: YOLO + SAM</li> <li>语义模型: CLIP</li> </ul> <h3 id="6-故障排除">6. 故障排除</h3> <h4 id="61-常见问题">6.1 常见问题</h4> <ol> <li><strong>环境变量未设置</strong>: 确保运行了<code class="language-plaintext highlighter-rouge">basic.sh</code>脚本</li> <li><strong>依赖缺失</strong>: 运行<code class="language-plaintext highlighter-rouge">deps.sh</code>安装所有依赖</li> <li><strong>模型文件缺失</strong>: 下载相应的模型权重文件</li> <li><strong>权限问题</strong>: 确保音频设备权限正确</li> </ol> <h4 id="62-调试方法">6.2 调试方法</h4> <ul> <li>使用RViz进行可视化调试</li> <li>查看ROS话题和服务状态</li> <li>检查日志输出</li> </ul> <h3 id="7-扩展开发">7. 扩展开发</h3> <p>项目采用模块化设计，可以方便地添加新功能：</p> <ul> <li>在<code class="language-plaintext highlighter-rouge">src/Brain</code>中添加新的AI模型</li> <li>在<code class="language-plaintext highlighter-rouge">src/Cerebellum</code>中添加新的功能模块</li> <li>在<code class="language-plaintext highlighter-rouge">src/Cerebellum/arm</code>中添加新的硬件支持</li> </ul> <p>这个系统集成了现代机器人技术的多个方面，是一个功能完整的智能机器人平台。建议先从语音交互功能开始熟悉系统，然后逐步探索其他功能模块。</p> <pre><code class="language-shellscript"># 1. 运行基础配置脚本
cd /home/kara/YanBot-zyt
chmod +x scripts/basic.sh
./scripts/basic.sh

# 2. 安装依赖
chmod +x scripts/deps.sh
./scripts/deps.sh
</code></pre> <pre><code class="language-shellscript">conda env create -f scripts/interact.yaml -v
conda env update -n interact -f scripts/py310.yaml -v
</code></pre> <pre><code class="language-shellscript">conda env create -f scripts/py310.yaml -v
conda env update -n py310 -f scripts/py310.yaml -v
</code></pre> <pre><code class="language-shellscript">roslaunch cerebellum_pkg test_interact.launch
</code></pre> <pre><code class="language-shellscript">roslaunch cerebellum_pkg main.launch
</code></pre> <pre><code class="language-shellscript">roslaunch semantic_map_pkg semantic_map.launch
</code></pre> <pre><code class="language-shellscript">   source ~/.bashrc
   cd $YANBOT_WS
</code></pre> <pre><code class="language-shellscript">   catkin_make
   source devel/setup.bash
</code></pre> <pre><code class="language-shellscript">   cd src/Cerebellum/semantic_map/yolo_evsam_ros/weights/
   ./download_weights.sh
</code></pre> <pre><code class="language-shellscript"># 启动语音交互
roslaunch cerebellum_pkg test_interact.launch
# 说"你好"或其他唤醒词开始交互
</code></pre> <pre><code class="language-shellscript"># 启动完整系统（包含导航、视觉等）
roslaunch cerebellum_pkg main.launch
</code></pre> <pre><code class="language-shellscript"># 首次建图
roslaunch cerebellum_pkg first_mapping.launch
</code></pre> <hr/> <p><strong>User</strong></p> <p>oslaunch cerebellum_pkg main.launch 告诉我这个系统的完整逻辑</p> <hr/> <p><strong>Cursor</strong></p> <p>我来详细分析<code class="language-plaintext highlighter-rouge">roslaunch cerebellum_pkg main.launch</code>这个系统的完整逻辑。让我先查看相关的launch文件和代码来理解整个系统的架构。</p> <p>现在让我查看被包含的各个子系统的launch文件：</p> <p>现在让我查看一些关键的节点实现来理解系统逻辑：</p> <p>现在让我查看Brain模块的launch文件：</p> <p>现在让我查看一些关键的节点实现：</p> <p>现在让我查看导航系统的核心组件：</p> <p>基于我对代码的深入分析，现在我可以为您详细解释<code class="language-plaintext highlighter-rouge">roslaunch cerebellum_pkg main.launch</code>这个系统的完整逻辑：</p> <h2 id="yanbot主系统完整逻辑架构">YanBot主系统完整逻辑架构</h2> <h3 id="1-系统启动流程">1. 系统启动流程</h3> <p>当执行<code class="language-plaintext highlighter-rouge">roslaunch cerebellum_pkg main.launch</code>时，系统会按以下顺序启动各个模块：</p> <h4 id="11-参数初始化">1.1 参数初始化</h4> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- 可视化参数 --&gt;</span>
<span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"main/use_rviz"</span> <span class="na">default=</span><span class="s">"true"</span><span class="nt">/&gt;</span>
<span class="c">&lt;!-- 导航功能选择 --&gt;</span>
<span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"main/navi_func"</span> <span class="na">default=</span><span class="s">"2D"</span><span class="nt">/&gt;</span>
<span class="c">&lt;!-- 语义地图参数 --&gt;</span>
<span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"main/semantic_map/semantic_map_mode"</span> <span class="na">default=</span><span class="s">"simple"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"main/semantic_map/det_seg_mode"</span> <span class="na">default=</span><span class="s">"yoesam"</span><span class="nt">/&gt;</span>
</code></pre></div></div> <h4 id="12-模块启动顺序">1.2 模块启动顺序</h4> <ol> <li><strong>RViz可视化</strong> (可选)</li> <li><strong>导航系统</strong> (2D/3D)</li> <li><strong>RealSense相机</strong></li> <li><strong>语义地图系统</strong></li> </ol> <h3 id="2-核心模块详细逻辑">2. 核心模块详细逻辑</h3> <h4 id="21-导航系统-navigation-system">2.1 导航系统 (Navigation System)</h4> <p><strong>启动链</strong>:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>main.launch → navigation.launch → turn_on_wheeltec_robot.launch
</code></pre></div></div> <p><strong>核心组件</strong>:</p> <ul> <li><strong>底层控制</strong>: <code class="language-plaintext highlighter-rouge">base_serial.launch</code> - 控制机器人底盘</li> <li><strong>激光雷达</strong>: <code class="language-plaintext highlighter-rouge">mid360_laserscan.launch</code> - MID360激光雷达驱动</li> <li><strong>地图服务</strong>: <code class="language-plaintext highlighter-rouge">map_server</code> - 加载预建地图</li> <li><strong>定位算法</strong>: <code class="language-plaintext highlighter-rouge">amcl.launch</code> - 自适应蒙特卡洛定位</li> <li><strong>路径规划</strong>: <code class="language-plaintext highlighter-rouge">teb_local_planner.launch</code> - TEB局部路径规划</li> </ul> <p><strong>工作流程</strong>:</p> <ol> <li>加载预建地图文件 (<code class="language-plaintext highlighter-rouge">WHEELTEC.yaml</code>)</li> <li>启动AMCL进行机器人定位</li> <li>启动move_base进行路径规划</li> <li>发布机器人TF变换关系</li> </ol> <h4 id="22-语义地图系统-semantic-map-system">2.2 语义地图系统 (Semantic Map System)</h4> <p><strong>启动链</strong>:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>main.launch → semantic_map.launch → [yoesam.launch, llm.launch, vlm.launch, clip.launch]
</code></pre></div></div> <p><strong>核心节点</strong>:</p> <p><strong>A. 语义地图生成器</strong> (<code class="language-plaintext highlighter-rouge">semantic_map_generator_node</code>):</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 主要功能
</span><span class="mf">1.</span> <span class="n">订阅RGB</span><span class="o">+</span><span class="n">Depth图像和相机信息</span>
<span class="mf">2.</span> <span class="n">调用YOLO</span><span class="o">+</span><span class="n">SAM进行目标检测和分割</span>
<span class="mf">3.</span> <span class="n">将2D检测结果转换为3D语义点云</span>
<span class="mf">4.</span> <span class="n">发布语义对象消息</span>
</code></pre></div></div> <p><strong>B. 语义地图管理器</strong> (<code class="language-plaintext highlighter-rouge">semantic_map_manager_node</code>):</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 主要功能
</span><span class="mf">1.</span> <span class="n">接收语义对象消息</span>
<span class="mf">2.</span> <span class="n">管理语义地图数据库</span>
<span class="mf">3.</span> <span class="n">处理对象跟踪和更新</span>
<span class="mf">4.</span> <span class="n">发布可视化标记</span>
</code></pre></div></div> <p><strong>C. 语义地图引导器</strong> (<code class="language-plaintext highlighter-rouge">semantic_map_guide_node</code>):</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 主要功能
</span><span class="mf">1.</span> <span class="n">提供语义查询服务</span>
<span class="mf">2.</span> <span class="n">结合LLM</span><span class="o">/</span><span class="n">VLM进行智能问答</span>
<span class="mf">3.</span> <span class="n">生成导航指导</span>
</code></pre></div></div> <h4 id="23-ai大脑系统-brain-system">2.3 AI大脑系统 (Brain System)</h4> <p><strong>A. LLM节点</strong> (<code class="language-plaintext highlighter-rouge">llm_node</code>):</p> <ul> <li>使用DeepSeek-V2.5进行对话</li> <li>使用DeepSeek-R1进行推理</li> <li>提供<code class="language-plaintext highlighter-rouge">llm_chat</code>和<code class="language-plaintext highlighter-rouge">llm_reason</code>服务</li> </ul> <p><strong>B. VLM节点</strong> (<code class="language-plaintext highlighter-rouge">vlm_node</code>):</p> <ul> <li>视觉语言模型</li> <li>提供<code class="language-plaintext highlighter-rouge">vlm_chat</code>服务</li> </ul> <p><strong>C. CLIP节点</strong>:</p> <ul> <li>图像-文本匹配</li> <li>语义相似度计算</li> </ul> <h4 id="24-视觉感知系统">2.4 视觉感知系统</h4> <p><strong>A. YOESAM检测分割</strong>:</p> <ul> <li>YOLO目标检测</li> <li>SAM实例分割</li> <li>提供<code class="language-plaintext highlighter-rouge">/vit_detection</code>服务</li> </ul> <p><strong>B. RealSense相机</strong>:</p> <ul> <li>RGB图像: <code class="language-plaintext highlighter-rouge">/camera/color/image_raw</code></li> <li>深度图像: <code class="language-plaintext highlighter-rouge">/camera/aligned_depth_to_color/image_raw</code></li> <li>相机信息: <code class="language-plaintext highlighter-rouge">/camera/color/camera_info</code></li> </ul> <h3 id="3-数据流和通信">3. 数据流和通信</h3> <h4 id="31-传感器数据流">3.1 传感器数据流</h4> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>RealSense相机 → RGB/Depth图像 → 语义地图生成器 → 语义对象 → 语义地图管理器
</code></pre></div></div> <h4 id="32-ai服务调用链">3.2 AI服务调用链</h4> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>语义地图引导器 → LLM/VLM服务 → 智能问答响应
</code></pre></div></div> <h4 id="33-导航数据流">3.3 导航数据流</h4> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>激光雷达 → AMCL定位 → move_base规划 → 底盘控制
</code></pre></div></div> <h3 id="4-系统集成逻辑">4. 系统集成逻辑</h3> <h4 id="41-多模态融合">4.1 多模态融合</h4> <ol> <li><strong>视觉感知</strong>: 实时检测环境中的物体</li> <li><strong>语义理解</strong>: 为检测到的物体赋予语义标签</li> <li><strong>空间定位</strong>: 将语义信息映射到3D空间</li> <li><strong>智能交互</strong>: 通过LLM/VLM理解用户意图</li> </ol> <h4 id="42-实时处理">4.2 实时处理</h4> <ul> <li><strong>图像处理</strong>: 1Hz频率的语义地图更新</li> <li><strong>导航控制</strong>: 实时路径规划和避障</li> <li><strong>AI推理</strong>: 按需调用LLM/VLM服务</li> </ul> <h4 id="43-数据持久化">4.3 数据持久化</h4> <ul> <li><strong>语义地图数据库</strong>: SQLite存储语义对象</li> <li><strong>图像缓存</strong>: 保存标注图像用于特征匹配</li> <li><strong>配置参数</strong>: 通过launch文件管理</li> </ul> <h3 id="5-系统特点">5. 系统特点</h3> <h4 id="51-模块化设计">5.1 模块化设计</h4> <ul> <li>每个功能模块独立运行</li> <li>通过ROS话题和服务通信</li> <li>支持动态配置和扩展</li> </ul> <h4 id="52-智能化程度">5.2 智能化程度</h4> <ul> <li>多模态AI融合 (视觉+语言)</li> <li>实时语义理解</li> <li>智能导航指导</li> </ul> <h4 id="53-可扩展性">5.3 可扩展性</h4> <ul> <li>支持不同的检测分割算法</li> <li>可配置的语义类别</li> <li>灵活的导航策略</li> </ul> <p>这个系统实现了一个完整的智能机器人平台，集成了感知、认知、决策和执行的全栈能力，能够进行环境理解、智能交互和自主导航。</p> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- 可视化参数 --&gt;</span>
<span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"main/use_rviz"</span> <span class="na">default=</span><span class="s">"true"</span><span class="nt">/&gt;</span>
<span class="c">&lt;!-- 导航功能选择 --&gt;</span>
<span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"main/navi_func"</span> <span class="na">default=</span><span class="s">"2D"</span><span class="nt">/&gt;</span>
<span class="c">&lt;!-- 语义地图参数 --&gt;</span>
<span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"main/semantic_map/semantic_map_mode"</span> <span class="na">default=</span><span class="s">"simple"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"main/semantic_map/det_seg_mode"</span> <span class="na">default=</span><span class="s">"yoesam"</span><span class="nt">/&gt;</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>main.launch → navigation.launch → turn_on_wheeltec_robot.launch
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>main.launch → semantic_map.launch → [yoesam.launch, llm.launch, vlm.launch, clip.launch]
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 主要功能
</span><span class="mf">1.</span> <span class="n">订阅RGB</span><span class="o">+</span><span class="n">Depth图像和相机信息</span>
<span class="mf">2.</span> <span class="n">调用YOLO</span><span class="o">+</span><span class="n">SAM进行目标检测和分割</span>
<span class="mf">3.</span> <span class="n">将2D检测结果转换为3D语义点云</span>
<span class="mf">4.</span> <span class="n">发布语义对象消息</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 主要功能
</span><span class="mf">1.</span> <span class="n">接收语义对象消息</span>
<span class="mf">2.</span> <span class="n">管理语义地图数据库</span>
<span class="mf">3.</span> <span class="n">处理对象跟踪和更新</span>
<span class="mf">4.</span> <span class="n">发布可视化标记</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 主要功能
</span><span class="mf">1.</span> <span class="n">提供语义查询服务</span>
<span class="mf">2.</span> <span class="n">结合LLM</span><span class="o">/</span><span class="n">VLM进行智能问答</span>
<span class="mf">3.</span> <span class="n">生成导航指导</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>RealSense相机 → RGB/Depth图像 → 语义地图生成器 → 语义对象 → 语义地图管理器
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>语义地图引导器 → LLM/VLM服务 → 智能问答响应
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>激光雷达 → AMCL定位 → move_base规划 → 底盘控制
</code></pre></div></div> <hr/> <p><strong>User</strong></p> <p>能帮我分析一下，如果我想复现这个系统，我一步步应该如何组织我的代码吗</p> <hr/> <p><strong>Cursor</strong></p> <p>我来帮您分析如何一步步组织代码来复现这个YanBot系统。让我先查看一些关键的配置文件和依赖关系。</p> <p>现在让我查看一些关键的Python模块实现：</p> <p>基于我对整个系统的深入分析，我来为您提供一个详细的复现指南：</p> <h2 id="yanbot系统复现指南">YanBot系统复现指南</h2> <h3 id="1-项目结构规划">1. 项目结构规划</h3> <h4 id="11-目录结构设计">1.1 目录结构设计</h4> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>YanBot-Reproduction/
├── scripts/                          # 配置和安装脚本
│   ├── basic.sh                      # 基础环境配置
│   ├── deps.sh                       # 依赖安装
│   ├── interact.yaml                 # 语音交互环境
│   └── py310.yaml                    # 视觉处理环境
├── src/                              # ROS工作空间源码
│   ├── Brain/                        # AI大脑模块
│   │   ├── llm_pkg/                  # 大语言模型
│   │   └── vlm_pkg/                  # 视觉语言模型
│   ├── Cerebellum/                   # 小脑控制模块
│   │   ├── cerebellum_pkg/           # 主控制包
│   │   ├── semantic_map/             # 语义地图
│   │   ├── interact/                 # 语音交互
│   │   └── wheel_dir/                # 导航系统
│   └── Utils/                        # 工具模块
├── thirdparties/                     # 第三方依赖
├── docs/                             # 文档
└── README.md                         # 项目说明
</code></pre></div></div> <h3 id="2-环境配置阶段">2. 环境配置阶段</h3> <h4 id="21-基础环境设置-1">2.1 基础环境设置</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 创建项目目录</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> YanBot-Reproduction
<span class="nb">cd </span>YanBot-Reproduction

<span class="c"># 创建基础配置脚本</span>
<span class="nb">cat</span> <span class="o">&gt;</span> scripts/basic.sh <span class="o">&lt;&lt;</span> <span class="sh">'</span><span class="no">EOF</span><span class="sh">'
#!/bin/bash
WS_DIR=</span><span class="si">$(</span><span class="nb">pwd</span><span class="si">)</span><span class="sh">
echo "export YANBOT_WS=</span><span class="nv">$WS_DIR</span><span class="sh">" &gt;&gt; ~/.bashrc
echo "export HF_ENDPOINT=</span><span class="se">\"</span><span class="sh">https://hf-mirror.com</span><span class="se">\"</span><span class="sh">" &gt;&gt; ~/.bashrc
echo "export PATH=/home/</span><span class="nv">$USER</span><span class="sh">/.local/bin:</span><span class="se">\$</span><span class="sh">PATH" &gt;&gt; ~/.bashrc
source ~/.bashrc
</span><span class="no">EOF

</span><span class="nb">chmod</span> +x scripts/basic.sh
./scripts/basic.sh
</code></pre></div></div> <h4 id="22-conda环境配置-1">2.2 Conda环境配置</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 创建语音交互环境</span>
<span class="nb">cat</span> <span class="o">&gt;</span> scripts/interact.yaml <span class="o">&lt;&lt;</span> <span class="sh">'</span><span class="no">EOF</span><span class="sh">'
name: interact
channels:
  - pytorch
  - nvidia
  - defaults
dependencies:
  - python=3.10
  - pip
  - pip:
    - torch==2.5.0
    - torchvision==0.20.0
    - torchaudio==2.5.0
    - transformers==4.51.3
    - openai
    - sounddevice
    - soundfile
    - librosa
    - pvporcupine
    - funasr
    - chattts
</span><span class="no">EOF

</span><span class="c"># 创建视觉处理环境</span>
<span class="nb">cat</span> <span class="o">&gt;</span> scripts/py310.yaml <span class="o">&lt;&lt;</span> <span class="sh">'</span><span class="no">EOF</span><span class="sh">'
name: py310
channels:
  - defaults
dependencies:
  - python=3.10
  - pip
  - pip:
    - torch==2.6.0
    - torchvision==0.21.0
    - opencv-python==4.11.0.86
    - ultralytics==8.3.94
    - segment-anything==1.0
    - openai-clip==1.0.1
    - supervision==0.25.1
    - scikit-learn==1.6.1
    - numpy==1.24.4
</span><span class="no">EOF

</span><span class="c"># 创建环境</span>
conda <span class="nb">env </span>create <span class="nt">-f</span> scripts/interact.yaml
conda <span class="nb">env </span>create <span class="nt">-f</span> scripts/py310.yaml
</code></pre></div></div> <h3 id="3-ros包开发阶段">3. ROS包开发阶段</h3> <h4 id="31-创建ros工作空间">3.1 创建ROS工作空间</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> <span class="nt">-p</span> src
<span class="nb">cd </span>src

<span class="c"># 创建Brain模块</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> Brain/llm_pkg/<span class="o">{</span>scripts,launch,srv<span class="o">}</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> Brain/vlm_pkg/<span class="o">{</span>scripts,launch,srv<span class="o">}</span>

<span class="c"># 创建Cerebellum模块</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> Cerebellum/cerebellum_pkg/<span class="o">{</span>scripts,launch,rviz<span class="o">}</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> Cerebellum/semantic_map/semantic_map_pkg/<span class="o">{</span>scripts,launch,msg,srv,rviz<span class="o">}</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> Cerebellum/interact/<span class="o">{</span>wakeup_pkg,stt_pkg,tts_pkg<span class="o">}</span>
</code></pre></div></div> <h4 id="32-核心模块实现">3.2 核心模块实现</h4> <p><strong>A. LLM模块</strong> (<code class="language-plaintext highlighter-rouge">src/Brain/llm_pkg/</code>)</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># scripts/llm.py
</span><span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">OpenAI</span>
<span class="kn">import</span> <span class="n">os</span>

<span class="k">class</span> <span class="nc">LLM</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">deepseek-ai/DeepSeek-V2.5</span><span class="sh">"</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">api_key</span> <span class="o">=</span> <span class="n">api_key</span> <span class="ow">or</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">SILICONFLOW_API_KEY</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span>
            <span class="n">base_url</span><span class="o">=</span><span class="sh">"</span><span class="s">https://api.siliconflow.cn/v1/</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">api_key</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">api_key</span>
        <span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">model</span> <span class="o">=</span> <span class="n">model</span>

    <span class="k">def</span> <span class="nf">chat</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">messages</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="n">response</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">,</span>
            <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
            <span class="o">**</span><span class="n">kwargs</span>
        <span class="p">)</span>
        <span class="k">return</span> <span class="n">response</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span><span class="p">.</span><span class="n">content</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># scripts/llm_node.py
</span><span class="kn">import</span> <span class="n">rospy</span>
<span class="kn">from</span> <span class="n">llm_pkg.srv</span> <span class="kn">import</span> <span class="n">LLMChat</span><span class="p">,</span> <span class="n">LLMChatResponse</span>
<span class="kn">from</span> <span class="n">llm</span> <span class="kn">import</span> <span class="n">LLM</span>
<span class="kn">import</span> <span class="n">json</span>

<span class="k">class</span> <span class="nc">LLMNode</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">rospy</span><span class="p">.</span><span class="nf">init_node</span><span class="p">(</span><span class="sh">"</span><span class="s">llm_node</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">llm</span> <span class="o">=</span> <span class="nc">LLM</span><span class="p">()</span>

        <span class="c1"># 加载配置
</span>        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="sh">"</span><span class="s">scripts/llm_types.json</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">llm_types</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>

        <span class="c1"># 创建服务
</span>        <span class="n">self</span><span class="p">.</span><span class="n">service</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">Service</span><span class="p">(</span><span class="sh">"</span><span class="s">llm_chat</span><span class="sh">"</span><span class="p">,</span> <span class="n">LLMChat</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">handle_chat</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">handle_chat</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">req</span><span class="p">):</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>
                <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">llm_types</span><span class="p">[</span><span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="p">][</span><span class="n">req</span><span class="p">.</span><span class="nb">type</span><span class="p">][</span><span class="sh">"</span><span class="s">system_prompt</span><span class="sh">"</span><span class="p">]},</span>
                <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">req</span><span class="p">.</span><span class="n">content</span><span class="p">}</span>
            <span class="p">]</span>
            <span class="n">response</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">llm</span><span class="p">.</span><span class="nf">chat</span><span class="p">(</span><span class="n">messages</span><span class="p">)</span>
            <span class="k">return</span> <span class="nc">LLMChatResponse</span><span class="p">(</span><span class="n">success</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">response</span><span class="o">=</span><span class="n">response</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="k">return</span> <span class="nc">LLMChatResponse</span><span class="p">(</span><span class="n">success</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">response</span><span class="o">=</span><span class="nf">str</span><span class="p">(</span><span class="n">e</span><span class="p">))</span>
</code></pre></div></div> <p><strong>B. 语义地图模块</strong> (<code class="language-plaintext highlighter-rouge">src/Cerebellum/semantic_map/semantic_map_pkg/</code>)</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># scripts/semantic_map_generator_node.py
</span><span class="kn">import</span> <span class="n">rospy</span>
<span class="kn">import</span> <span class="n">cv2</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">from</span> <span class="n">sensor_msgs.msg</span> <span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">CameraInfo</span>
<span class="kn">from</span> <span class="n">message_filters</span> <span class="kn">import</span> <span class="n">ApproximateTimeSynchronizer</span><span class="p">,</span> <span class="n">Subscriber</span>
<span class="kn">from</span> <span class="n">cv_bridge</span> <span class="kn">import</span> <span class="n">CvBridge</span>

<span class="k">class</span> <span class="nc">SemanticMapGenerator</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">rospy</span><span class="p">.</span><span class="nf">init_node</span><span class="p">(</span><span class="sh">"</span><span class="s">semantic_map_generator</span><span class="sh">"</span><span class="p">)</span>

        <span class="c1"># 订阅器
</span>        <span class="n">image_sub</span> <span class="o">=</span> <span class="nc">Subscriber</span><span class="p">(</span><span class="sh">"</span><span class="s">/camera/color/image_raw</span><span class="sh">"</span><span class="p">,</span> <span class="n">Image</span><span class="p">)</span>
        <span class="n">depth_sub</span> <span class="o">=</span> <span class="nc">Subscriber</span><span class="p">(</span><span class="sh">"</span><span class="s">/camera/aligned_depth_to_color/image_raw</span><span class="sh">"</span><span class="p">,</span> <span class="n">Image</span><span class="p">)</span>
        <span class="n">camera_info_sub</span> <span class="o">=</span> <span class="nc">Subscriber</span><span class="p">(</span><span class="sh">"</span><span class="s">/camera/color/camera_info</span><span class="sh">"</span><span class="p">,</span> <span class="n">CameraInfo</span><span class="p">)</span>

        <span class="c1"># 时间同步
</span>        <span class="n">self</span><span class="p">.</span><span class="n">ts</span> <span class="o">=</span> <span class="nc">ApproximateTimeSynchronizer</span><span class="p">(</span>
            <span class="p">[</span><span class="n">image_sub</span><span class="p">,</span> <span class="n">depth_sub</span><span class="p">,</span> <span class="n">camera_info_sub</span><span class="p">],</span>
            <span class="n">queue_size</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span>
            <span class="n">slop</span><span class="o">=</span><span class="mf">0.05</span>
        <span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">ts</span><span class="p">.</span><span class="nf">registerCallback</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">sync_callback</span><span class="p">)</span>

        <span class="c1"># 发布器
</span>        <span class="n">self</span><span class="p">.</span><span class="n">semantic_pub</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">Publisher</span><span class="p">(</span><span class="sh">"</span><span class="s">/semantic_object</span><span class="sh">"</span><span class="p">,</span> <span class="n">SemanticObject</span><span class="p">,</span> <span class="n">queue_size</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>

        <span class="c1"># 检测服务客户端
</span>        <span class="n">rospy</span><span class="p">.</span><span class="nf">wait_for_service</span><span class="p">(</span><span class="sh">"</span><span class="s">/vit_detection</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">detector</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">ServiceProxy</span><span class="p">(</span><span class="sh">"</span><span class="s">/vit_detection</span><span class="sh">"</span><span class="p">,</span> <span class="n">VitDetection</span><span class="p">)</span>

        <span class="n">self</span><span class="p">.</span><span class="n">bridge</span> <span class="o">=</span> <span class="nc">CvBridge</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">sync_callback</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">img_msg</span><span class="p">,</span> <span class="n">depth_msg</span><span class="p">,</span> <span class="n">camera_info_msg</span><span class="p">):</span>
        <span class="c1"># 处理同步的图像数据
</span>        <span class="n">rgb</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">bridge</span><span class="p">.</span><span class="nf">imgmsg_to_cv2</span><span class="p">(</span><span class="n">img_msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">bgr8</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">depth</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">bridge</span><span class="p">.</span><span class="nf">imgmsg_to_cv2</span><span class="p">(</span><span class="n">depth_msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">passthrough</span><span class="sh">"</span><span class="p">)</span>

        <span class="c1"># 调用检测服务
</span>        <span class="n">results</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">detector</span><span class="p">(</span><span class="n">rgb</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">current_prompt</span><span class="p">)</span>

        <span class="c1"># 处理检测结果并发布语义对象
</span>        <span class="n">self</span><span class="p">.</span><span class="nf">process_detection_results</span><span class="p">(</span><span class="n">results</span><span class="p">,</span> <span class="n">rgb</span><span class="p">,</span> <span class="n">depth</span><span class="p">,</span> <span class="n">camera_info_msg</span><span class="p">)</span>
</code></pre></div></div> <p><strong>C. 数据库模块</strong></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># scripts/lib/semantic_map_database.py
</span><span class="kn">import</span> <span class="n">sqlite3</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">cv2</span>
<span class="kn">import</span> <span class="n">os</span>

<span class="k">class</span> <span class="nc">SemanticMapDatabase</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">db_path</span><span class="p">,</span> <span class="n">img_dir</span><span class="p">,</span> <span class="n">renew_db</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">db_path</span> <span class="o">=</span> <span class="n">db_path</span>
        <span class="n">self</span><span class="p">.</span><span class="n">img_dir</span> <span class="o">=</span> <span class="n">img_dir</span>

        <span class="k">if</span> <span class="n">renew_db</span> <span class="ow">and</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">db_path</span><span class="p">):</span>
            <span class="n">os</span><span class="p">.</span><span class="nf">remove</span><span class="p">(</span><span class="n">db_path</span><span class="p">)</span>

        <span class="n">self</span><span class="p">.</span><span class="nf">_init_db</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">_init_db</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">conn</span> <span class="o">=</span> <span class="n">sqlite3</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">db_path</span><span class="p">)</span>
        <span class="n">conn</span><span class="p">.</span><span class="nf">execute</span><span class="p">(</span><span class="sh">"""</span><span class="s">
            CREATE TABLE IF NOT EXISTS semantic_objects (
                label TEXT PRIMARY KEY,
                bbox BLOB,
                time_stamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                x_data BLOB,
                y_data BLOB,
                z_data BLOB,
                rgb_data BLOB,
                feature_data BLOB
            )
        </span><span class="sh">"""</span><span class="p">)</span>
        <span class="n">conn</span><span class="p">.</span><span class="nf">commit</span><span class="p">()</span>
        <span class="n">conn</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">update_entry</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">label</span><span class="p">,</span> <span class="n">bbox</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">,</span> <span class="n">rgb</span><span class="p">,</span> <span class="n">feature</span><span class="p">):</span>
        <span class="n">conn</span> <span class="o">=</span> <span class="n">sqlite3</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">db_path</span><span class="p">)</span>
        <span class="n">conn</span><span class="p">.</span><span class="nf">execute</span><span class="p">(</span><span class="sh">"""</span><span class="s">
            INSERT OR REPLACE INTO semantic_objects
            (label, bbox, x_data, y_data, z_data, rgb_data, feature_data)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        </span><span class="sh">"""</span><span class="p">,</span> <span class="p">(</span><span class="n">label</span><span class="p">,</span> <span class="n">bbox</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">,</span> <span class="n">rgb</span><span class="p">,</span> <span class="n">feature</span><span class="p">))</span>
        <span class="n">conn</span><span class="p">.</span><span class="nf">commit</span><span class="p">()</span>
        <span class="n">conn</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
</code></pre></div></div> <h3 id="4-配置文件创建">4. 配置文件创建</h3> <h4 id="41-语义类别配置">4.1 语义类别配置</h4> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">//</span><span class="w"> </span><span class="err">scripts/semantic_categories.json</span><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"categories"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"chair"</span><span class="p">,</span><span class="w"> </span><span class="s2">"table"</span><span class="p">,</span><span class="w"> </span><span class="s2">"sofa"</span><span class="p">,</span><span class="w"> </span><span class="s2">"bed"</span><span class="p">,</span><span class="w"> </span><span class="s2">"refrigerator"</span><span class="p">,</span><span class="w"> </span><span class="s2">"microwave-oven"</span><span class="p">,</span><span class="w"> </span><span class="s2">"television"</span><span class="p">,</span><span class="w"> </span><span class="s2">"human"</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <h4 id="42-llm类型配置">4.2 LLM类型配置</h4> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">//</span><span class="w"> </span><span class="err">scripts/llm_types.json</span><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"chat"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"test_chat"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"system_prompt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"你是一个AI助手，只能回答是或否。"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"max_tokens"</span><span class="p">:</span><span class="w"> </span><span class="mi">4096</span><span class="p">,</span><span class="w">
      </span><span class="nl">"temperature"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.5</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"category_or_language_chat"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"system_prompt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"你是一个机器人语义理解模块..."</span><span class="p">,</span><span class="w">
      </span><span class="nl">"max_tokens"</span><span class="p">:</span><span class="w"> </span><span class="mi">4096</span><span class="p">,</span><span class="w">
      </span><span class="nl">"temperature"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.2</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"reason"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"task_plan_reason"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"system_prompt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"你是机器人任务规划模块..."</span><span class="p">,</span><span class="w">
      </span><span class="nl">"max_tokens"</span><span class="p">:</span><span class="w"> </span><span class="mi">4096</span><span class="p">,</span><span class="w">
      </span><span class="nl">"temperature"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.2</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <h3 id="5-launch文件创建">5. Launch文件创建</h3> <h4 id="51-主launch文件">5.1 主Launch文件</h4> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- launch/main.launch --&gt;</span>
<span class="nt">&lt;launch&gt;</span>
    <span class="c">&lt;!-- 参数配置 --&gt;</span>
    <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"use_rviz"</span> <span class="na">default=</span><span class="s">"true"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"navi_func"</span> <span class="na">default=</span><span class="s">"2D"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"semantic_map_mode"</span> <span class="na">default=</span><span class="s">"simple"</span><span class="nt">/&gt;</span>

    <span class="c">&lt;!-- RViz可视化 --&gt;</span>
    <span class="nt">&lt;group</span> <span class="na">if=</span><span class="s">"$(arg use_rviz)"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;node</span> <span class="na">pkg=</span><span class="s">"rviz"</span> <span class="na">type=</span><span class="s">"rviz"</span> <span class="na">name=</span><span class="s">"rviz"</span>
              <span class="na">args=</span><span class="s">"-d $(find cerebellum_pkg)/rviz/main.rviz"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/group&gt;</span>

    <span class="c">&lt;!-- 导航系统 --&gt;</span>
    <span class="nt">&lt;group</span> <span class="na">if=</span><span class="s">"$(eval arg('navi_func') == '2D')"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;include</span> <span class="na">file=</span><span class="s">"$(find turn_on_wheeltec_robot)/launch/navigation.launch"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/group&gt;</span>

    <span class="c">&lt;!-- 相机 --&gt;</span>
    <span class="nt">&lt;include</span> <span class="na">file=</span><span class="s">"$(find realsense2_camera)/launch/rs_camera.launch"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"align_depth"</span> <span class="na">value=</span><span class="s">"true"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/include&gt;</span>

    <span class="c">&lt;!-- 语义地图 --&gt;</span>
    <span class="nt">&lt;group</span> <span class="na">if=</span><span class="s">"$(eval arg('semantic_map_mode') == 'simple')"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;include</span> <span class="na">file=</span><span class="s">"$(find semantic_map_pkg)/launch/semantic_map.launch"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/group&gt;</span>
<span class="nt">&lt;/launch&gt;</span>
</code></pre></div></div> <h4 id="52-语义地图launch文件">5.2 语义地图Launch文件</h4> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- launch/semantic_map.launch --&gt;</span>
<span class="nt">&lt;launch&gt;</span>
    <span class="c">&lt;!-- 检测分割服务 --&gt;</span>
    <span class="nt">&lt;include</span> <span class="na">file=</span><span class="s">"$(find yolo_evsam_ros)/launch/yoesam.launch"</span><span class="nt">/&gt;</span>

    <span class="c">&lt;!-- 语义地图生成器 --&gt;</span>
    <span class="nt">&lt;node</span> <span class="na">name=</span><span class="s">"semantic_map_generator_node"</span>
          <span class="na">pkg=</span><span class="s">"semantic_map_pkg"</span>
          <span class="na">type=</span><span class="s">"semantic_map_generator_node.py"</span>
          <span class="na">output=</span><span class="s">"screen"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"semantic_categories_json_path"</span>
               <span class="na">value=</span><span class="s">"$(find semantic_map_pkg)/scripts/semantic_categories.json"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/node&gt;</span>

    <span class="c">&lt;!-- 语义地图管理器 --&gt;</span>
    <span class="nt">&lt;node</span> <span class="na">name=</span><span class="s">"semantic_map_manager_node"</span>
          <span class="na">pkg=</span><span class="s">"semantic_map_pkg"</span>
          <span class="na">type=</span><span class="s">"semantic_map_manager_node.py"</span>
          <span class="na">output=</span><span class="s">"screen"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"db_path"</span> <span class="na">value=</span><span class="s">"$(env YANBOT_WS)/semantic_map.db"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/node&gt;</span>

    <span class="c">&lt;!-- AI服务 --&gt;</span>
    <span class="nt">&lt;include</span> <span class="na">file=</span><span class="s">"$(find llm_pkg)/launch/llm.launch"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;include</span> <span class="na">file=</span><span class="s">"$(find vlm_pkg)/launch/vlm.launch"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/launch&gt;</span>
</code></pre></div></div> <h3 id="6-依赖安装脚本">6. 依赖安装脚本</h3> <h4 id="61-系统依赖">6.1 系统依赖</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># scripts/deps.sh</span>
<span class="c">#!/bin/bash</span>

<span class="c"># ROS依赖</span>
<span class="nb">sudo </span>apt <span class="nb">install</span> <span class="nt">-y</span> ros-noetic-gmapping ros-noetic-rtabmap-ros <span class="se">\</span>
    ros-noetic-joy ros-noetic-robot-pose-ekf ros-noetic-image-transport <span class="se">\</span>
    ros-noetic-rgbd-launch ros-noetic-ddynamic-reconfigure

<span class="c"># 相机依赖</span>
<span class="nb">sudo </span>apt <span class="nb">install</span> <span class="nt">-y</span> libssl-dev libusb-1.0-0-dev pkg-config <span class="se">\</span>
    libgtk-3-dev libglfw3-dev libgl1-mesa-dev libglu1-mesa-dev

<span class="c"># 音频依赖</span>
<span class="nb">sudo </span>apt <span class="nb">install</span> <span class="nt">-y</span> swig libatlas-base-dev libasound2-dev <span class="se">\</span>
    portaudio19-dev libportaudio2 libportaudiocpp0 python3-pyaudio

<span class="c"># Python依赖</span>
pip <span class="nb">install </span>sxtwl requests geopy httpx[socks] qrcode[pil]
pip <span class="nb">install</span> <span class="nt">-U</span> openai
pip <span class="nb">install </span>git+https://github.com/openai/CLIP.git
</code></pre></div></div> <h3 id="7-开发步骤建议">7. 开发步骤建议</h3> <h4 id="71-第一阶段基础框架">7.1 第一阶段：基础框架</h4> <ol> <li><strong>环境搭建</strong>: 配置ROS、Conda环境</li> <li><strong>基础模块</strong>: 实现LLM、VLM基础服务</li> <li><strong>数据流</strong>: 建立相机数据订阅和发布</li> </ol> <h4 id="72-第二阶段核心功能">7.2 第二阶段：核心功能</h4> <ol> <li><strong>检测分割</strong>: 集成YOLO+SAM</li> <li><strong>语义地图</strong>: 实现数据库和可视化</li> <li><strong>导航系统</strong>: 集成move_base</li> </ol> <h4 id="73-第三阶段集成测试">7.3 第三阶段：集成测试</h4> <ol> <li><strong>端到端测试</strong>: 完整流程验证</li> <li><strong>性能优化</strong>: 调整参数和频率</li> <li><strong>文档完善</strong>: 使用说明和API文档</li> </ol> <h3 id="8-关键注意点">8. 关键注意点</h3> <h4 id="81-环境管理">8.1 环境管理</h4> <ul> <li>使用conda管理不同的Python环境</li> <li>确保ROS和Python环境的兼容性</li> <li>正确设置环境变量</li> </ul> <h4 id="82-数据同步">8.2 数据同步</h4> <ul> <li>使用message_filters进行多传感器数据同步</li> <li>处理TF变换的时间戳对齐</li> <li>确保检测结果的实时性</li> </ul> <h4 id="83-错误处理">8.3 错误处理</h4> <ul> <li>添加完善的异常处理机制</li> <li>实现服务调用的超时处理</li> <li>提供详细的日志输出</li> </ul> <h4 id="84-性能优化">8.4 性能优化</h4> <ul> <li>合理设置消息队列大小</li> <li>优化图像处理频率</li> <li>使用多线程处理耗时操作</li> </ul> <p>这个复现指南提供了一个系统性的方法，您可以根据自己的需求和硬件条件逐步实现各个模块。建议先从基础的环境配置开始，然后逐步添加功能模块。</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>YanBot-Reproduction/
├── scripts/                          # 配置和安装脚本
│   ├── basic.sh                      # 基础环境配置
│   ├── deps.sh                       # 依赖安装
│   ├── interact.yaml                 # 语音交互环境
│   └── py310.yaml                    # 视觉处理环境
├── src/                              # ROS工作空间源码
│   ├── Brain/                        # AI大脑模块
│   │   ├── llm_pkg/                  # 大语言模型
│   │   └── vlm_pkg/                  # 视觉语言模型
│   ├── Cerebellum/                   # 小脑控制模块
│   │   ├── cerebellum_pkg/           # 主控制包
│   │   ├── semantic_map/             # 语义地图
│   │   ├── interact/                 # 语音交互
│   │   └── wheel_dir/                # 导航系统
│   └── Utils/                        # 工具模块
├── thirdparties/                     # 第三方依赖
├── docs/                             # 文档
└── README.md                         # 项目说明
</code></pre></div></div> <pre><code class="language-shellscript"># 创建项目目录
mkdir -p YanBot-Reproduction
cd YanBot-Reproduction

# 创建基础配置脚本
cat &gt; scripts/basic.sh &lt;&lt; 'EOF'
#!/bin/bash
WS_DIR=$(pwd)
echo "export YANBOT_WS=$WS_DIR" &gt;&gt; ~/.bashrc
echo "export HF_ENDPOINT=\"https://hf-mirror.com\"" &gt;&gt; ~/.bashrc
echo "export PATH=/home/$USER/.local/bin:\$PATH" &gt;&gt; ~/.bashrc
source ~/.bashrc
EOF

chmod +x scripts/basic.sh
./scripts/basic.sh
</code></pre> <pre><code class="language-shellscript"># 创建语音交互环境
cat &gt; scripts/interact.yaml &lt;&lt; 'EOF'
name: interact
channels:
  - pytorch
  - nvidia
  - defaults
dependencies:
  - python=3.10
  - pip
  - pip:
    - torch==2.5.0
    - torchvision==0.20.0
    - torchaudio==2.5.0
    - transformers==4.51.3
    - openai
    - sounddevice
    - soundfile
    - librosa
    - pvporcupine
    - funasr
    - chattts
EOF

# 创建视觉处理环境
cat &gt; scripts/py310.yaml &lt;&lt; 'EOF'
name: py310
channels:
  - defaults
dependencies:
  - python=3.10
  - pip
  - pip:
    - torch==2.6.0
    - torchvision==0.21.0
    - opencv-python==4.11.0.86
    - ultralytics==8.3.94
    - segment-anything==1.0
    - openai-clip==1.0.1
    - supervision==0.25.1
    - scikit-learn==1.6.1
    - numpy==1.24.4
EOF

# 创建环境
conda env create -f scripts/interact.yaml
conda env create -f scripts/py310.yaml
</code></pre> <pre><code class="language-shellscript">mkdir -p src
cd src

# 创建Brain模块
mkdir -p Brain/llm_pkg/{scripts,launch,srv}
mkdir -p Brain/vlm_pkg/{scripts,launch,srv}

# 创建Cerebellum模块
mkdir -p Cerebellum/cerebellum_pkg/{scripts,launch,rviz}
mkdir -p Cerebellum/semantic_map/semantic_map_pkg/{scripts,launch,msg,srv,rviz}
mkdir -p Cerebellum/interact/{wakeup_pkg,stt_pkg,tts_pkg}
</code></pre> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># scripts/llm.py
</span><span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">OpenAI</span>
<span class="kn">import</span> <span class="n">os</span>

<span class="k">class</span> <span class="nc">LLM</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">deepseek-ai/DeepSeek-V2.5</span><span class="sh">"</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">api_key</span> <span class="o">=</span> <span class="n">api_key</span> <span class="ow">or</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">SILICONFLOW_API_KEY</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span>
            <span class="n">base_url</span><span class="o">=</span><span class="sh">"</span><span class="s">https://api.siliconflow.cn/v1/</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">api_key</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">api_key</span>
        <span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">model</span> <span class="o">=</span> <span class="n">model</span>

    <span class="k">def</span> <span class="nf">chat</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">messages</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="n">response</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">,</span>
            <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
            <span class="o">**</span><span class="n">kwargs</span>
        <span class="p">)</span>
        <span class="k">return</span> <span class="n">response</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span><span class="p">.</span><span class="n">content</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># scripts/llm_node.py
</span><span class="kn">import</span> <span class="n">rospy</span>
<span class="kn">from</span> <span class="n">llm_pkg.srv</span> <span class="kn">import</span> <span class="n">LLMChat</span><span class="p">,</span> <span class="n">LLMChatResponse</span>
<span class="kn">from</span> <span class="n">llm</span> <span class="kn">import</span> <span class="n">LLM</span>
<span class="kn">import</span> <span class="n">json</span>

<span class="k">class</span> <span class="nc">LLMNode</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">rospy</span><span class="p">.</span><span class="nf">init_node</span><span class="p">(</span><span class="sh">"</span><span class="s">llm_node</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">llm</span> <span class="o">=</span> <span class="nc">LLM</span><span class="p">()</span>

        <span class="c1"># 加载配置
</span>        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="sh">"</span><span class="s">scripts/llm_types.json</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">llm_types</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>

        <span class="c1"># 创建服务
</span>        <span class="n">self</span><span class="p">.</span><span class="n">service</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">Service</span><span class="p">(</span><span class="sh">"</span><span class="s">llm_chat</span><span class="sh">"</span><span class="p">,</span> <span class="n">LLMChat</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">handle_chat</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">handle_chat</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">req</span><span class="p">):</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>
                <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">llm_types</span><span class="p">[</span><span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="p">][</span><span class="n">req</span><span class="p">.</span><span class="nb">type</span><span class="p">][</span><span class="sh">"</span><span class="s">system_prompt</span><span class="sh">"</span><span class="p">]},</span>
                <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">req</span><span class="p">.</span><span class="n">content</span><span class="p">}</span>
            <span class="p">]</span>
            <span class="n">response</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">llm</span><span class="p">.</span><span class="nf">chat</span><span class="p">(</span><span class="n">messages</span><span class="p">)</span>
            <span class="k">return</span> <span class="nc">LLMChatResponse</span><span class="p">(</span><span class="n">success</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">response</span><span class="o">=</span><span class="n">response</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="k">return</span> <span class="nc">LLMChatResponse</span><span class="p">(</span><span class="n">success</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">response</span><span class="o">=</span><span class="nf">str</span><span class="p">(</span><span class="n">e</span><span class="p">))</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># scripts/semantic_map_generator_node.py
</span><span class="kn">import</span> <span class="n">rospy</span>
<span class="kn">import</span> <span class="n">cv2</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">from</span> <span class="n">sensor_msgs.msg</span> <span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">CameraInfo</span>
<span class="kn">from</span> <span class="n">message_filters</span> <span class="kn">import</span> <span class="n">ApproximateTimeSynchronizer</span><span class="p">,</span> <span class="n">Subscriber</span>
<span class="kn">from</span> <span class="n">cv_bridge</span> <span class="kn">import</span> <span class="n">CvBridge</span>

<span class="k">class</span> <span class="nc">SemanticMapGenerator</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">rospy</span><span class="p">.</span><span class="nf">init_node</span><span class="p">(</span><span class="sh">"</span><span class="s">semantic_map_generator</span><span class="sh">"</span><span class="p">)</span>

        <span class="c1"># 订阅器
</span>        <span class="n">image_sub</span> <span class="o">=</span> <span class="nc">Subscriber</span><span class="p">(</span><span class="sh">"</span><span class="s">/camera/color/image_raw</span><span class="sh">"</span><span class="p">,</span> <span class="n">Image</span><span class="p">)</span>
        <span class="n">depth_sub</span> <span class="o">=</span> <span class="nc">Subscriber</span><span class="p">(</span><span class="sh">"</span><span class="s">/camera/aligned_depth_to_color/image_raw</span><span class="sh">"</span><span class="p">,</span> <span class="n">Image</span><span class="p">)</span>
        <span class="n">camera_info_sub</span> <span class="o">=</span> <span class="nc">Subscriber</span><span class="p">(</span><span class="sh">"</span><span class="s">/camera/color/camera_info</span><span class="sh">"</span><span class="p">,</span> <span class="n">CameraInfo</span><span class="p">)</span>

        <span class="c1"># 时间同步
</span>        <span class="n">self</span><span class="p">.</span><span class="n">ts</span> <span class="o">=</span> <span class="nc">ApproximateTimeSynchronizer</span><span class="p">(</span>
            <span class="p">[</span><span class="n">image_sub</span><span class="p">,</span> <span class="n">depth_sub</span><span class="p">,</span> <span class="n">camera_info_sub</span><span class="p">],</span>
            <span class="n">queue_size</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span>
            <span class="n">slop</span><span class="o">=</span><span class="mf">0.05</span>
        <span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">ts</span><span class="p">.</span><span class="nf">registerCallback</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">sync_callback</span><span class="p">)</span>

        <span class="c1"># 发布器
</span>        <span class="n">self</span><span class="p">.</span><span class="n">semantic_pub</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">Publisher</span><span class="p">(</span><span class="sh">"</span><span class="s">/semantic_object</span><span class="sh">"</span><span class="p">,</span> <span class="n">SemanticObject</span><span class="p">,</span> <span class="n">queue_size</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>

        <span class="c1"># 检测服务客户端
</span>        <span class="n">rospy</span><span class="p">.</span><span class="nf">wait_for_service</span><span class="p">(</span><span class="sh">"</span><span class="s">/vit_detection</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">detector</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">ServiceProxy</span><span class="p">(</span><span class="sh">"</span><span class="s">/vit_detection</span><span class="sh">"</span><span class="p">,</span> <span class="n">VitDetection</span><span class="p">)</span>

        <span class="n">self</span><span class="p">.</span><span class="n">bridge</span> <span class="o">=</span> <span class="nc">CvBridge</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">sync_callback</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">img_msg</span><span class="p">,</span> <span class="n">depth_msg</span><span class="p">,</span> <span class="n">camera_info_msg</span><span class="p">):</span>
        <span class="c1"># 处理同步的图像数据
</span>        <span class="n">rgb</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">bridge</span><span class="p">.</span><span class="nf">imgmsg_to_cv2</span><span class="p">(</span><span class="n">img_msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">bgr8</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">depth</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">bridge</span><span class="p">.</span><span class="nf">imgmsg_to_cv2</span><span class="p">(</span><span class="n">depth_msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">passthrough</span><span class="sh">"</span><span class="p">)</span>

        <span class="c1"># 调用检测服务
</span>        <span class="n">results</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">detector</span><span class="p">(</span><span class="n">rgb</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">current_prompt</span><span class="p">)</span>

        <span class="c1"># 处理检测结果并发布语义对象
</span>        <span class="n">self</span><span class="p">.</span><span class="nf">process_detection_results</span><span class="p">(</span><span class="n">results</span><span class="p">,</span> <span class="n">rgb</span><span class="p">,</span> <span class="n">depth</span><span class="p">,</span> <span class="n">camera_info_msg</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># scripts/lib/semantic_map_database.py
</span><span class="kn">import</span> <span class="n">sqlite3</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">cv2</span>
<span class="kn">import</span> <span class="n">os</span>

<span class="k">class</span> <span class="nc">SemanticMapDatabase</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">db_path</span><span class="p">,</span> <span class="n">img_dir</span><span class="p">,</span> <span class="n">renew_db</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">db_path</span> <span class="o">=</span> <span class="n">db_path</span>
        <span class="n">self</span><span class="p">.</span><span class="n">img_dir</span> <span class="o">=</span> <span class="n">img_dir</span>

        <span class="k">if</span> <span class="n">renew_db</span> <span class="ow">and</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">db_path</span><span class="p">):</span>
            <span class="n">os</span><span class="p">.</span><span class="nf">remove</span><span class="p">(</span><span class="n">db_path</span><span class="p">)</span>

        <span class="n">self</span><span class="p">.</span><span class="nf">_init_db</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">_init_db</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">conn</span> <span class="o">=</span> <span class="n">sqlite3</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">db_path</span><span class="p">)</span>
        <span class="n">conn</span><span class="p">.</span><span class="nf">execute</span><span class="p">(</span><span class="sh">"""</span><span class="s">
            CREATE TABLE IF NOT EXISTS semantic_objects (
                label TEXT PRIMARY KEY,
                bbox BLOB,
                time_stamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                x_data BLOB,
                y_data BLOB,
                z_data BLOB,
                rgb_data BLOB,
                feature_data BLOB
            )
        </span><span class="sh">"""</span><span class="p">)</span>
        <span class="n">conn</span><span class="p">.</span><span class="nf">commit</span><span class="p">()</span>
        <span class="n">conn</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">update_entry</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">label</span><span class="p">,</span> <span class="n">bbox</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">,</span> <span class="n">rgb</span><span class="p">,</span> <span class="n">feature</span><span class="p">):</span>
        <span class="n">conn</span> <span class="o">=</span> <span class="n">sqlite3</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">db_path</span><span class="p">)</span>
        <span class="n">conn</span><span class="p">.</span><span class="nf">execute</span><span class="p">(</span><span class="sh">"""</span><span class="s">
            INSERT OR REPLACE INTO semantic_objects
            (label, bbox, x_data, y_data, z_data, rgb_data, feature_data)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        </span><span class="sh">"""</span><span class="p">,</span> <span class="p">(</span><span class="n">label</span><span class="p">,</span> <span class="n">bbox</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">,</span> <span class="n">rgb</span><span class="p">,</span> <span class="n">feature</span><span class="p">))</span>
        <span class="n">conn</span><span class="p">.</span><span class="nf">commit</span><span class="p">()</span>
        <span class="n">conn</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
</code></pre></div></div> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">//</span><span class="w"> </span><span class="err">scripts/semantic_categories.json</span><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"categories"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"chair"</span><span class="p">,</span><span class="w"> </span><span class="s2">"table"</span><span class="p">,</span><span class="w"> </span><span class="s2">"sofa"</span><span class="p">,</span><span class="w"> </span><span class="s2">"bed"</span><span class="p">,</span><span class="w"> </span><span class="s2">"refrigerator"</span><span class="p">,</span><span class="w"> </span><span class="s2">"microwave-oven"</span><span class="p">,</span><span class="w"> </span><span class="s2">"television"</span><span class="p">,</span><span class="w"> </span><span class="s2">"human"</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">//</span><span class="w"> </span><span class="err">scripts/llm_types.json</span><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"chat"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"test_chat"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"system_prompt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"你是一个AI助手，只能回答是或否。"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"max_tokens"</span><span class="p">:</span><span class="w"> </span><span class="mi">4096</span><span class="p">,</span><span class="w">
      </span><span class="nl">"temperature"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.5</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"category_or_language_chat"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"system_prompt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"你是一个机器人语义理解模块..."</span><span class="p">,</span><span class="w">
      </span><span class="nl">"max_tokens"</span><span class="p">:</span><span class="w"> </span><span class="mi">4096</span><span class="p">,</span><span class="w">
      </span><span class="nl">"temperature"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.2</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"reason"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"task_plan_reason"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"system_prompt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"你是机器人任务规划模块..."</span><span class="p">,</span><span class="w">
      </span><span class="nl">"max_tokens"</span><span class="p">:</span><span class="w"> </span><span class="mi">4096</span><span class="p">,</span><span class="w">
      </span><span class="nl">"temperature"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.2</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- launch/main.launch --&gt;</span>
<span class="nt">&lt;launch&gt;</span>
    <span class="c">&lt;!-- 参数配置 --&gt;</span>
    <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"use_rviz"</span> <span class="na">default=</span><span class="s">"true"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"navi_func"</span> <span class="na">default=</span><span class="s">"2D"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"semantic_map_mode"</span> <span class="na">default=</span><span class="s">"simple"</span><span class="nt">/&gt;</span>

    <span class="c">&lt;!-- RViz可视化 --&gt;</span>
    <span class="nt">&lt;group</span> <span class="na">if=</span><span class="s">"$(arg use_rviz)"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;node</span> <span class="na">pkg=</span><span class="s">"rviz"</span> <span class="na">type=</span><span class="s">"rviz"</span> <span class="na">name=</span><span class="s">"rviz"</span>
              <span class="na">args=</span><span class="s">"-d $(find cerebellum_pkg)/rviz/main.rviz"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/group&gt;</span>

    <span class="c">&lt;!-- 导航系统 --&gt;</span>
    <span class="nt">&lt;group</span> <span class="na">if=</span><span class="s">"$(eval arg('navi_func') == '2D')"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;include</span> <span class="na">file=</span><span class="s">"$(find turn_on_wheeltec_robot)/launch/navigation.launch"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/group&gt;</span>

    <span class="c">&lt;!-- 相机 --&gt;</span>
    <span class="nt">&lt;include</span> <span class="na">file=</span><span class="s">"$(find realsense2_camera)/launch/rs_camera.launch"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"align_depth"</span> <span class="na">value=</span><span class="s">"true"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/include&gt;</span>

    <span class="c">&lt;!-- 语义地图 --&gt;</span>
    <span class="nt">&lt;group</span> <span class="na">if=</span><span class="s">"$(eval arg('semantic_map_mode') == 'simple')"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;include</span> <span class="na">file=</span><span class="s">"$(find semantic_map_pkg)/launch/semantic_map.launch"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/group&gt;</span>
<span class="nt">&lt;/launch&gt;</span>
</code></pre></div></div> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- launch/semantic_map.launch --&gt;</span>
<span class="nt">&lt;launch&gt;</span>
    <span class="c">&lt;!-- 检测分割服务 --&gt;</span>
    <span class="nt">&lt;include</span> <span class="na">file=</span><span class="s">"$(find yolo_evsam_ros)/launch/yoesam.launch"</span><span class="nt">/&gt;</span>

    <span class="c">&lt;!-- 语义地图生成器 --&gt;</span>
    <span class="nt">&lt;node</span> <span class="na">name=</span><span class="s">"semantic_map_generator_node"</span>
          <span class="na">pkg=</span><span class="s">"semantic_map_pkg"</span>
          <span class="na">type=</span><span class="s">"semantic_map_generator_node.py"</span>
          <span class="na">output=</span><span class="s">"screen"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"semantic_categories_json_path"</span>
               <span class="na">value=</span><span class="s">"$(find semantic_map_pkg)/scripts/semantic_categories.json"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/node&gt;</span>

    <span class="c">&lt;!-- 语义地图管理器 --&gt;</span>
    <span class="nt">&lt;node</span> <span class="na">name=</span><span class="s">"semantic_map_manager_node"</span>
          <span class="na">pkg=</span><span class="s">"semantic_map_pkg"</span>
          <span class="na">type=</span><span class="s">"semantic_map_manager_node.py"</span>
          <span class="na">output=</span><span class="s">"screen"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"db_path"</span> <span class="na">value=</span><span class="s">"$(env YANBOT_WS)/semantic_map.db"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/node&gt;</span>

    <span class="c">&lt;!-- AI服务 --&gt;</span>
    <span class="nt">&lt;include</span> <span class="na">file=</span><span class="s">"$(find llm_pkg)/launch/llm.launch"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;include</span> <span class="na">file=</span><span class="s">"$(find vlm_pkg)/launch/vlm.launch"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/launch&gt;</span>
</code></pre></div></div> <pre><code class="language-shellscript"># scripts/deps.sh
#!/bin/bash

# ROS依赖
sudo apt install -y ros-noetic-gmapping ros-noetic-rtabmap-ros \
    ros-noetic-joy ros-noetic-robot-pose-ekf ros-noetic-image-transport \
    ros-noetic-rgbd-launch ros-noetic-ddynamic-reconfigure

# 相机依赖
sudo apt install -y libssl-dev libusb-1.0-0-dev pkg-config \
    libgtk-3-dev libglfw3-dev libgl1-mesa-dev libglu1-mesa-dev

# 音频依赖
sudo apt install -y swig libatlas-base-dev libasound2-dev \
    portaudio19-dev libportaudio2 libportaudiocpp0 python3-pyaudio

# Python依赖
pip install sxtwl requests geopy httpx[socks] qrcode[pil]
pip install -U openai
pip install git+https://github.com/openai/CLIP.git
</code></pre> <hr/> <p><strong>User</strong></p> <p>使用conda管理不同的Python环境 在代码中是如何做到在不同环境下切换的，以及何时切换</p> <hr/> <p><strong>Cursor</strong></p> <p>让我详细分析YanBot系统中是如何使用conda管理不同Python环境并在代码中实现环境切换的。</p> <p>现在让我查看一些具体的Python节点文件，了解它们是如何处理不同环境的：</p> <p>基于我对代码的深入分析，我来详细解释YanBot系统中conda环境管理的机制：</p> <h2 id="yanbot系统中的conda环境管理机制">YanBot系统中的Conda环境管理机制</h2> <h3 id="1-环境分类和用途">1. 环境分类和用途</h3> <p>YanBot系统使用两个主要的conda环境：</p> <h4 id="11-interact环境---语音交互模块">1.1 <code class="language-plaintext highlighter-rouge">interact</code>环境 - 语音交互模块</h4> <p><strong>用途</strong>: 语音唤醒、语音识别(STT)、语音合成(TTS) <strong>路径</strong>: <code class="language-plaintext highlighter-rouge">/home/$(env USER)/miniconda3/envs/interact/bin/python</code> <strong>主要依赖</strong>:</p> <ul> <li>PyTorch (语音处理)</li> <li>FunASR (语音识别)</li> <li>ChatTTS (语音合成)</li> <li>PvPorcupine (唤醒词检测)</li> </ul> <h4 id="12-py310环境---视觉处理模块">1.2 <code class="language-plaintext highlighter-rouge">py310</code>环境 - 视觉处理模块</h4> <p><strong>用途</strong>: 目标检测、实例分割、语义理解 <strong>路径</strong>: <code class="language-plaintext highlighter-rouge">/home/$(env USER)/miniconda3/envs/py310/bin/python</code> <strong>主要依赖</strong>:</p> <ul> <li>PyTorch (深度学习)</li> <li>Ultralytics (YOLO检测)</li> <li>Segment-Anything (SAM分割)</li> <li>CLIP (语义理解)</li> </ul> <h3 id="2-环境切换机制">2. 环境切换机制</h3> <h4 id="21-launch文件中的环境指定">2.1 Launch文件中的环境指定</h4> <p><strong>A. 语音交互模块</strong> (<code class="language-plaintext highlighter-rouge">interact.launch</code>):</p> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;launch&gt;</span>
    <span class="c">&lt;!-- 获取环境变量 --&gt;</span>
    <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"wakeup_venv"</span> <span class="na">default=</span><span class="s">"/home/$(env USER)/miniconda3/envs/interact/bin/python"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"stt_venv"</span> <span class="na">default=</span><span class="s">"/home/$(env USER)/miniconda3/envs/interact/bin/python"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"tts_venv"</span> <span class="na">default=</span><span class="s">"/home/$(env USER)/miniconda3/envs/interact/bin/python"</span><span class="nt">/&gt;</span>

    <span class="c">&lt;!-- 唤醒词检测节点 --&gt;</span>
    <span class="nt">&lt;node</span> <span class="na">name=</span><span class="s">"wakeup_node"</span>
          <span class="na">pkg=</span><span class="s">"wakeup_pkg"</span>
          <span class="na">type=</span><span class="s">"wakeup_node.py"</span>
          <span class="na">launch-prefix=</span><span class="s">"$(arg wakeup_venv)"</span>
          <span class="na">output=</span><span class="s">"screen"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/node&gt;</span>

    <span class="c">&lt;!-- 语音识别服务 --&gt;</span>
    <span class="nt">&lt;node</span> <span class="na">name=</span><span class="s">"stt_node"</span>
          <span class="na">pkg=</span><span class="s">"stt_pkg"</span>
          <span class="na">type=</span><span class="s">"stt_node.py"</span>
          <span class="na">launch-prefix=</span><span class="s">"$(arg stt_venv)"</span>
          <span class="na">output=</span><span class="s">"screen"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/node&gt;</span>

    <span class="c">&lt;!-- 语音合成服务 --&gt;</span>
    <span class="nt">&lt;node</span> <span class="na">name=</span><span class="s">"tts_node"</span>
          <span class="na">pkg=</span><span class="s">"tts_pkg"</span>
          <span class="na">type=</span><span class="s">"tts_node.py"</span>
          <span class="na">launch-prefix=</span><span class="s">"$(arg tts_venv)"</span>
          <span class="na">output=</span><span class="s">"screen"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/node&gt;</span>
<span class="nt">&lt;/launch&gt;</span>
</code></pre></div></div> <p><strong>B. 视觉处理模块</strong> (<code class="language-plaintext highlighter-rouge">yoesam.launch</code>):</p> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;launch&gt;</span>
    <span class="c">&lt;!-- 获取环境变量 --&gt;</span>
    <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"venv"</span> <span class="na">default=</span><span class="s">"/home/$(env USER)/miniconda3/envs/py310/bin/python"</span><span class="nt">/&gt;</span>

    <span class="c">&lt;!-- 环境变量设置 --&gt;</span>
    <span class="nt">&lt;env</span> <span class="na">name=</span><span class="s">"LD_PRELOAD"</span> <span class="na">value=</span><span class="s">"/usr/lib/x86_64-linux-gnu/libffi.so.7"</span> <span class="nt">/&gt;</span>

    <span class="c">&lt;!-- YOLO+SAM检测节点 --&gt;</span>
    <span class="nt">&lt;node</span> <span class="na">name=</span><span class="s">"yolo_evsam_ros"</span>
          <span class="na">pkg=</span><span class="s">"yolo_evsam_ros"</span>
          <span class="na">type=</span><span class="s">"yoesam.py"</span>
          <span class="na">launch-prefix=</span><span class="s">"$(arg venv)"</span>
          <span class="na">output=</span><span class="s">"screen"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/node&gt;</span>
<span class="nt">&lt;/launch&gt;</span>
</code></pre></div></div> <p><strong>C. 语义地图模块</strong> (<code class="language-plaintext highlighter-rouge">semantic_map.launch</code>):</p> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;launch&gt;</span>
    <span class="c">&lt;!-- 环境参数 --&gt;</span>
    <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"semantic_map/venv"</span> <span class="na">default=</span><span class="s">"/usr/bin/python"</span><span class="nt">/&gt;</span>

    <span class="c">&lt;!-- 语义地图生成器 --&gt;</span>
    <span class="nt">&lt;node</span> <span class="na">name=</span><span class="s">"semantic_map_generator_node"</span>
          <span class="na">pkg=</span><span class="s">"semantic_map_pkg"</span>
          <span class="na">type=</span><span class="s">"semantic_map_generator_node.py"</span>
          <span class="na">launch-prefix=</span><span class="s">"$(arg semantic_map/venv)"</span>
          <span class="na">output=</span><span class="s">"screen"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/node&gt;</span>

    <span class="c">&lt;!-- 语义地图管理器 --&gt;</span>
    <span class="nt">&lt;node</span> <span class="na">name=</span><span class="s">"semantic_map_manager_node"</span>
          <span class="na">pkg=</span><span class="s">"semantic_map_pkg"</span>
          <span class="na">type=</span><span class="s">"semantic_map_manager_node.py"</span>
          <span class="na">launch-prefix=</span><span class="s">"$(arg semantic_map/venv)"</span>
          <span class="na">output=</span><span class="s">"screen"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/node&gt;</span>
<span class="nt">&lt;/launch&gt;</span>
</code></pre></div></div> <h4 id="22-launch-prefix机制详解">2.2 <code class="language-plaintext highlighter-rouge">launch-prefix</code>机制详解</h4> <p><strong>工作原理</strong>:</p> <ol> <li><code class="language-plaintext highlighter-rouge">launch-prefix</code>参数指定Python解释器的完整路径</li> <li>ROS launch系统使用指定的Python解释器启动节点</li> <li>每个节点在独立的conda环境中运行</li> </ol> <p><strong>示例</strong>:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 当launch-prefix="/home/user/miniconda3/envs/interact/bin/python"时</span>
<span class="c"># 实际执行的命令相当于:</span>
/home/user/miniconda3/envs/interact/bin/python /path/to/node.py
</code></pre></div></div> <h3 id="3-环境切换时机">3. 环境切换时机</h3> <h4 id="31-系统启动时的环境分配">3.1 系统启动时的环境分配</h4> <p><strong>启动流程</strong>:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 1. 启动主系统</span>
roslaunch cerebellum_pkg main.launch

<span class="c"># 2. 系统自动分配环境:</span>
<span class="c"># - 语音交互节点 → interact环境</span>
<span class="c"># - 视觉处理节点 → py310环境</span>
<span class="c"># - 语义地图节点 → 系统Python环境</span>
<span class="c"># - LLM/VLM节点 → 系统Python环境</span>
</code></pre></div></div> <h4 id="32-不同功能模块的环境使用">3.2 不同功能模块的环境使用</h4> <p><strong>语音交互测试</strong>:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 启动语音交互测试</span>
roslaunch cerebellum_pkg test_interact.launch
<span class="c"># 所有语音相关节点都在interact环境中运行</span>
</code></pre></div></div> <p><strong>语义地图系统</strong>:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 启动语义地图</span>
roslaunch semantic_map_pkg semantic_map.launch
<span class="c"># YOLO+SAM节点在py310环境中运行</span>
<span class="c"># 其他节点在系统Python环境中运行</span>
</code></pre></div></div> <h3 id="4-环境隔离的优势">4. 环境隔离的优势</h3> <h4 id="41-依赖冲突避免">4.1 依赖冲突避免</h4> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># interact环境中的依赖
</span><span class="n">torch</span><span class="o">==</span><span class="mf">2.5</span><span class="p">.</span><span class="mi">0</span>
<span class="n">torchvision</span><span class="o">==</span><span class="mf">0.20</span><span class="p">.</span><span class="mi">0</span>
<span class="n">funasr</span><span class="o">==</span><span class="mf">1.2</span><span class="p">.</span><span class="mi">6</span>
<span class="n">chattts</span><span class="o">==</span><span class="mf">0.0</span><span class="p">.</span><span class="mi">0</span>

<span class="c1"># py310环境中的依赖
</span><span class="n">torch</span><span class="o">==</span><span class="mf">2.6</span><span class="p">.</span><span class="mi">0</span>
<span class="n">torchvision</span><span class="o">==</span><span class="mf">0.21</span><span class="p">.</span><span class="mi">0</span>
<span class="n">ultralytics</span><span class="o">==</span><span class="mf">8.3</span><span class="p">.</span><span class="mi">94</span>
<span class="n">segment</span><span class="o">-</span><span class="n">anything</span><span class="o">==</span><span class="mf">1.0</span>
</code></pre></div></div> <h4 id="42-版本兼容性">4.2 版本兼容性</h4> <ul> <li><strong>语音模块</strong>: 需要特定版本的PyTorch和音频库</li> <li><strong>视觉模块</strong>: 需要最新版本的PyTorch和计算机视觉库</li> <li><strong>系统模块</strong>: 使用系统默认Python环境</li> </ul> <h3 id="5-实际实现示例">5. 实际实现示例</h3> <h4 id="51-环境配置脚本">5.1 环境配置脚本</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="c"># scripts/setup_environments.sh</span>

<span class="c"># 创建interact环境</span>
conda <span class="nb">env </span>create <span class="nt">-f</span> scripts/interact.yaml

<span class="c"># 创建py310环境</span>
conda <span class="nb">env </span>create <span class="nt">-f</span> scripts/py310.yaml

<span class="c"># 验证环境路径</span>
<span class="nb">echo</span> <span class="s2">"interact环境路径:"</span>
conda run <span class="nt">-n</span> interact which python

<span class="nb">echo</span> <span class="s2">"py310环境路径:"</span>
conda run <span class="nt">-n</span> py310 which python
</code></pre></div></div> <h4 id="52-launch文件中的环境验证">5.2 Launch文件中的环境验证</h4> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- 可以在launch文件中添加环境验证 --&gt;</span>
<span class="nt">&lt;launch&gt;</span>
    <span class="c">&lt;!-- 验证interact环境是否存在 --&gt;</span>
    <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"interact_venv"</span> <span class="na">default=</span><span class="s">"/home/$(env USER)/miniconda3/envs/interact/bin/python"</span><span class="nt">/&gt;</span>

    <span class="c">&lt;!-- 如果环境不存在，使用系统Python --&gt;</span>
    <span class="nt">&lt;group</span> <span class="na">unless=</span><span class="s">"$(eval arg('interact_venv') != '')"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"interact_venv"</span> <span class="na">value=</span><span class="s">"/usr/bin/python"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/group&gt;</span>

    <span class="nt">&lt;node</span> <span class="na">name=</span><span class="s">"wakeup_node"</span>
          <span class="na">pkg=</span><span class="s">"wakeup_pkg"</span>
          <span class="na">type=</span><span class="s">"wakeup_node.py"</span>
          <span class="na">launch-prefix=</span><span class="s">"$(arg interact_venv)"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/node&gt;</span>
<span class="nt">&lt;/launch&gt;</span>
</code></pre></div></div> <h3 id="6-调试和故障排除">6. 调试和故障排除</h3> <h4 id="61-环境路径检查">6.1 环境路径检查</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 检查conda环境是否存在</span>
conda <span class="nb">env </span>list

<span class="c"># 检查Python解释器路径</span>
<span class="nb">ls</span> <span class="nt">-la</span> /home/<span class="nv">$USER</span>/miniconda3/envs/interact/bin/python
<span class="nb">ls</span> <span class="nt">-la</span> /home/<span class="nv">$USER</span>/miniconda3/envs/py310/bin/python

<span class="c"># 测试环境中的包</span>
conda run <span class="nt">-n</span> interact python <span class="nt">-c</span> <span class="s2">"import torch; print(torch.__version__)"</span>
conda run <span class="nt">-n</span> py310 python <span class="nt">-c</span> <span class="s2">"import ultralytics; print(ultralytics.__version__)"</span>
</code></pre></div></div> <h4 id="62-运行时环境切换">6.2 运行时环境切换</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 手动测试不同环境中的节点</span>
conda run <span class="nt">-n</span> interact python src/Cerebellum/interact/wakeup_pkg/scripts/wakeup_node.py
conda run <span class="nt">-n</span> py310 python src/Cerebellum/semantic_map/yolo_evsam_ros/src/yoesam.py
</code></pre></div></div> <h3 id="7-最佳实践">7. 最佳实践</h3> <h4 id="71-环境管理">7.1 环境管理</h4> <ul> <li>为每个功能模块创建独立的conda环境</li> <li>使用<code class="language-plaintext highlighter-rouge">launch-prefix</code>指定Python解释器路径</li> <li>在launch文件中提供环境路径参数</li> </ul> <h4 id="72-依赖管理">7.2 依赖管理</h4> <ul> <li>使用conda环境文件管理依赖</li> <li>定期更新环境文件</li> <li>测试不同环境间的兼容性</li> </ul> <h4 id="73-部署考虑">7.3 部署考虑</h4> <ul> <li>确保目标机器上安装了conda</li> <li>提供环境安装脚本</li> <li>处理环境路径的动态配置</li> </ul> <p>这种设计使得YanBot系统能够在不同的Python环境中运行不同的功能模块，有效避免了依赖冲突，提高了系统的稳定性和可维护性。</p> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;launch&gt;</span>
    <span class="c">&lt;!-- 获取环境变量 --&gt;</span>
    <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"wakeup_venv"</span> <span class="na">default=</span><span class="s">"/home/$(env USER)/miniconda3/envs/interact/bin/python"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"stt_venv"</span> <span class="na">default=</span><span class="s">"/home/$(env USER)/miniconda3/envs/interact/bin/python"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"tts_venv"</span> <span class="na">default=</span><span class="s">"/home/$(env USER)/miniconda3/envs/interact/bin/python"</span><span class="nt">/&gt;</span>

    <span class="c">&lt;!-- 唤醒词检测节点 --&gt;</span>
    <span class="nt">&lt;node</span> <span class="na">name=</span><span class="s">"wakeup_node"</span>
          <span class="na">pkg=</span><span class="s">"wakeup_pkg"</span>
          <span class="na">type=</span><span class="s">"wakeup_node.py"</span>
          <span class="na">launch-prefix=</span><span class="s">"$(arg wakeup_venv)"</span>
          <span class="na">output=</span><span class="s">"screen"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/node&gt;</span>

    <span class="c">&lt;!-- 语音识别服务 --&gt;</span>
    <span class="nt">&lt;node</span> <span class="na">name=</span><span class="s">"stt_node"</span>
          <span class="na">pkg=</span><span class="s">"stt_pkg"</span>
          <span class="na">type=</span><span class="s">"stt_node.py"</span>
          <span class="na">launch-prefix=</span><span class="s">"$(arg stt_venv)"</span>
          <span class="na">output=</span><span class="s">"screen"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/node&gt;</span>

    <span class="c">&lt;!-- 语音合成服务 --&gt;</span>
    <span class="nt">&lt;node</span> <span class="na">name=</span><span class="s">"tts_node"</span>
          <span class="na">pkg=</span><span class="s">"tts_pkg"</span>
          <span class="na">type=</span><span class="s">"tts_node.py"</span>
          <span class="na">launch-prefix=</span><span class="s">"$(arg tts_venv)"</span>
          <span class="na">output=</span><span class="s">"screen"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/node&gt;</span>
<span class="nt">&lt;/launch&gt;</span>
</code></pre></div></div> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;launch&gt;</span>
    <span class="c">&lt;!-- 获取环境变量 --&gt;</span>
    <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"venv"</span> <span class="na">default=</span><span class="s">"/home/$(env USER)/miniconda3/envs/py310/bin/python"</span><span class="nt">/&gt;</span>

    <span class="c">&lt;!-- 环境变量设置 --&gt;</span>
    <span class="nt">&lt;env</span> <span class="na">name=</span><span class="s">"LD_PRELOAD"</span> <span class="na">value=</span><span class="s">"/usr/lib/x86_64-linux-gnu/libffi.so.7"</span> <span class="nt">/&gt;</span>

    <span class="c">&lt;!-- YOLO+SAM检测节点 --&gt;</span>
    <span class="nt">&lt;node</span> <span class="na">name=</span><span class="s">"yolo_evsam_ros"</span>
          <span class="na">pkg=</span><span class="s">"yolo_evsam_ros"</span>
          <span class="na">type=</span><span class="s">"yoesam.py"</span>
          <span class="na">launch-prefix=</span><span class="s">"$(arg venv)"</span>
          <span class="na">output=</span><span class="s">"screen"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/node&gt;</span>
<span class="nt">&lt;/launch&gt;</span>
</code></pre></div></div> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;launch&gt;</span>
    <span class="c">&lt;!-- 环境参数 --&gt;</span>
    <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"semantic_map/venv"</span> <span class="na">default=</span><span class="s">"/usr/bin/python"</span><span class="nt">/&gt;</span>

    <span class="c">&lt;!-- 语义地图生成器 --&gt;</span>
    <span class="nt">&lt;node</span> <span class="na">name=</span><span class="s">"semantic_map_generator_node"</span>
          <span class="na">pkg=</span><span class="s">"semantic_map_pkg"</span>
          <span class="na">type=</span><span class="s">"semantic_map_generator_node.py"</span>
          <span class="na">launch-prefix=</span><span class="s">"$(arg semantic_map/venv)"</span>
          <span class="na">output=</span><span class="s">"screen"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/node&gt;</span>

    <span class="c">&lt;!-- 语义地图管理器 --&gt;</span>
    <span class="nt">&lt;node</span> <span class="na">name=</span><span class="s">"semantic_map_manager_node"</span>
          <span class="na">pkg=</span><span class="s">"semantic_map_pkg"</span>
          <span class="na">type=</span><span class="s">"semantic_map_manager_node.py"</span>
          <span class="na">launch-prefix=</span><span class="s">"$(arg semantic_map/venv)"</span>
          <span class="na">output=</span><span class="s">"screen"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/node&gt;</span>
<span class="nt">&lt;/launch&gt;</span>
</code></pre></div></div> <pre><code class="language-shellscript"># 当launch-prefix="/home/user/miniconda3/envs/interact/bin/python"时
# 实际执行的命令相当于:
/home/user/miniconda3/envs/interact/bin/python /path/to/node.py
</code></pre> <pre><code class="language-shellscript"># 1. 启动主系统
roslaunch cerebellum_pkg main.launch

# 2. 系统自动分配环境:
# - 语音交互节点 → interact环境
# - 视觉处理节点 → py310环境
# - 语义地图节点 → 系统Python环境
# - LLM/VLM节点 → 系统Python环境
</code></pre> <pre><code class="language-shellscript"># 启动语音交互测试
roslaunch cerebellum_pkg test_interact.launch
# 所有语音相关节点都在interact环境中运行
</code></pre> <pre><code class="language-shellscript"># 启动语义地图
roslaunch semantic_map_pkg semantic_map.launch
# YOLO+SAM节点在py310环境中运行
# 其他节点在系统Python环境中运行
</code></pre> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># interact环境中的依赖
</span><span class="n">torch</span><span class="o">==</span><span class="mf">2.5</span><span class="p">.</span><span class="mi">0</span>
<span class="n">torchvision</span><span class="o">==</span><span class="mf">0.20</span><span class="p">.</span><span class="mi">0</span>
<span class="n">funasr</span><span class="o">==</span><span class="mf">1.2</span><span class="p">.</span><span class="mi">6</span>
<span class="n">chattts</span><span class="o">==</span><span class="mf">0.0</span><span class="p">.</span><span class="mi">0</span>

<span class="c1"># py310环境中的依赖
</span><span class="n">torch</span><span class="o">==</span><span class="mf">2.6</span><span class="p">.</span><span class="mi">0</span>
<span class="n">torchvision</span><span class="o">==</span><span class="mf">0.21</span><span class="p">.</span><span class="mi">0</span>
<span class="n">ultralytics</span><span class="o">==</span><span class="mf">8.3</span><span class="p">.</span><span class="mi">94</span>
<span class="n">segment</span><span class="o">-</span><span class="n">anything</span><span class="o">==</span><span class="mf">1.0</span>
</code></pre></div></div> <pre><code class="language-shellscript">#!/bin/bash
# scripts/setup_environments.sh

# 创建interact环境
conda env create -f scripts/interact.yaml

# 创建py310环境
conda env create -f scripts/py310.yaml

# 验证环境路径
echo "interact环境路径:"
conda run -n interact which python

echo "py310环境路径:"
conda run -n py310 which python
</code></pre> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- 可以在launch文件中添加环境验证 --&gt;</span>
<span class="nt">&lt;launch&gt;</span>
    <span class="c">&lt;!-- 验证interact环境是否存在 --&gt;</span>
    <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"interact_venv"</span> <span class="na">default=</span><span class="s">"/home/$(env USER)/miniconda3/envs/interact/bin/python"</span><span class="nt">/&gt;</span>

    <span class="c">&lt;!-- 如果环境不存在，使用系统Python --&gt;</span>
    <span class="nt">&lt;group</span> <span class="na">unless=</span><span class="s">"$(eval arg('interact_venv') != '')"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"interact_venv"</span> <span class="na">value=</span><span class="s">"/usr/bin/python"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/group&gt;</span>

    <span class="nt">&lt;node</span> <span class="na">name=</span><span class="s">"wakeup_node"</span>
          <span class="na">pkg=</span><span class="s">"wakeup_pkg"</span>
          <span class="na">type=</span><span class="s">"wakeup_node.py"</span>
          <span class="na">launch-prefix=</span><span class="s">"$(arg interact_venv)"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/node&gt;</span>
<span class="nt">&lt;/launch&gt;</span>
</code></pre></div></div> <pre><code class="language-shellscript"># 检查conda环境是否存在
conda env list

# 检查Python解释器路径
ls -la /home/$USER/miniconda3/envs/interact/bin/python
ls -la /home/$USER/miniconda3/envs/py310/bin/python

# 测试环境中的包
conda run -n interact python -c "import torch; print(torch.__version__)"
conda run -n py310 python -c "import ultralytics; print(ultralytics.__version__)"
</code></pre> <pre><code class="language-shellscript"># 手动测试不同环境中的节点
conda run -n interact python src/Cerebellum/interact/wakeup_pkg/scripts/wakeup_node.py
conda run -n py310 python src/Cerebellum/semantic_map/yolo_evsam_ros/src/yoesam.py
</code></pre> <hr/> <p><strong>User</strong></p> <p>能告诉我这些大脑和小脑模块间是怎么通信的吗</p> <hr/> <p><strong>Cursor</strong></p> <p>让我详细分析YanBot系统中大脑(Brain)和小脑(Cerebellum)模块之间的通信机制。</p> <p>基于我对代码的深入分析，我来详细解释YanBot系统中大脑(Brain)和小脑(Cerebellum)模块之间的通信机制：</p> <h2 id="yanbot系统中brain和cerebellum模块的通信机制">YanBot系统中Brain和Cerebellum模块的通信机制</h2> <h3 id="1-整体架构概述">1. 整体架构概述</h3> <p>YanBot系统采用<strong>分层架构</strong>，Brain模块负责<strong>智能决策</strong>，Cerebellum模块负责<strong>执行控制</strong>：</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>┌─────────────────┐    ROS Services/Topics    ┌─────────────────┐
│   Brain模块     │ ←──────────────────────→ │  Cerebellum模块 │
│  (智能决策层)    │                          │  (执行控制层)    │
│                 │                          │                 │
│ • LLM (语言理解)│                          │ • 语义地图      │
│ • VLM (视觉理解)│                          │ • 导航系统      │
│ • CLIP (语义匹配)│                          │ • 语音交互      │
│ • 任务规划      │                          │ • 机械臂控制    │
└─────────────────┘                          └─────────────────┘
</code></pre></div></div> <h3 id="2-通信方式分类">2. 通信方式分类</h3> <h4 id="21-ros服务调用-service-calls">2.1 ROS服务调用 (Service Calls)</h4> <p><strong>特点</strong>: 同步通信，请求-响应模式 <strong>用途</strong>: 智能问答、任务规划、语义理解</p> <h4 id="22-ros话题订阅-topic-subscriptions">2.2 ROS话题订阅 (Topic Subscriptions)</h4> <p><strong>特点</strong>: 异步通信，发布-订阅模式 <strong>用途</strong>: 传感器数据、状态信息、控制指令</p> <h4 id="23-参数服务器-parameter-server">2.3 参数服务器 (Parameter Server)</h4> <p><strong>特点</strong>: 全局配置共享 <strong>用途</strong>: 系统参数、配置信息</p> <h3 id="3-具体通信接口">3. 具体通信接口</h3> <h4 id="31-brain--cerebellum-服务调用">3.1 Brain → Cerebellum 服务调用</h4> <p><strong>A. LLM服务调用</strong>:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Cerebellum模块调用Brain的LLM服务
</span><span class="k">class</span> <span class="nc">SemanticMapGuide</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="c1"># 等待LLM服务就绪
</span>        <span class="n">rospy</span><span class="p">.</span><span class="nf">wait_for_service</span><span class="p">(</span><span class="sh">"</span><span class="s">llm_chat</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">rospy</span><span class="p">.</span><span class="nf">wait_for_service</span><span class="p">(</span><span class="sh">"</span><span class="s">llm_reason</span><span class="sh">"</span><span class="p">)</span>

        <span class="c1"># 创建服务客户端
</span>        <span class="n">self</span><span class="p">.</span><span class="n">llm_chat_client</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">ServiceProxy</span><span class="p">(</span><span class="sh">"</span><span class="s">llm_chat</span><span class="sh">"</span><span class="p">,</span> <span class="n">LLMChat</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">llm_reason_client</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">ServiceProxy</span><span class="p">(</span><span class="sh">"</span><span class="s">llm_reason</span><span class="sh">"</span><span class="p">,</span> <span class="n">LLMChat</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">ask_llm_chat</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="nb">type</span><span class="p">,</span> <span class="n">content</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">调用LLM对话服务</span><span class="sh">"""</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">response</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">llm_chat_client</span><span class="p">(</span><span class="nb">type</span><span class="p">,</span> <span class="n">content</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">response</span>
        <span class="k">except</span> <span class="n">rospy</span><span class="p">.</span><span class="n">ServiceException</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="n">rospy</span><span class="p">.</span><span class="nf">logerr</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">LLM chat service call failed: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">return</span> <span class="bp">None</span>

    <span class="k">def</span> <span class="nf">ask_llm_reason</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="nb">type</span><span class="p">,</span> <span class="n">content</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">调用LLM推理服务</span><span class="sh">"""</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">response</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">llm_reason_client</span><span class="p">(</span><span class="nb">type</span><span class="p">,</span> <span class="n">content</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">response</span>
        <span class="k">except</span> <span class="n">rospy</span><span class="p">.</span><span class="n">ServiceException</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="n">rospy</span><span class="p">.</span><span class="nf">logerr</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">LLM reason service call failed: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">return</span> <span class="bp">None</span>
</code></pre></div></div> <p><strong>B. VLM服务调用</strong>:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Cerebellum模块调用Brain的VLM服务
</span><span class="k">class</span> <span class="nc">SemanticMapGuide</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="c1"># 等待VLM服务就绪
</span>        <span class="n">rospy</span><span class="p">.</span><span class="nf">wait_for_service</span><span class="p">(</span><span class="sh">"</span><span class="s">vlm_chat</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">vlm_chat_client</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">ServiceProxy</span><span class="p">(</span><span class="sh">"</span><span class="s">vlm_chat</span><span class="sh">"</span><span class="p">,</span> <span class="n">VLMChat</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">ask_vlm_chat</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="nb">type</span><span class="p">,</span> <span class="n">content</span><span class="p">,</span> <span class="n">image_path</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">调用VLM视觉问答服务</span><span class="sh">"""</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">response</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">vlm_chat_client</span><span class="p">(</span><span class="nb">type</span><span class="p">,</span> <span class="n">content</span><span class="p">,</span> <span class="n">image_path</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">response</span>
        <span class="k">except</span> <span class="n">rospy</span><span class="p">.</span><span class="n">ServiceException</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="n">rospy</span><span class="p">.</span><span class="nf">logerr</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">VLM chat service call failed: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">return</span> <span class="bp">None</span>
</code></pre></div></div> <p><strong>C. CLIP服务调用</strong>:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Cerebellum模块调用Brain的CLIP服务
</span><span class="k">class</span> <span class="nc">SemanticMapGuide</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="c1"># 等待CLIP服务就绪
</span>        <span class="n">rospy</span><span class="p">.</span><span class="nf">wait_for_service</span><span class="p">(</span><span class="sh">"</span><span class="s">clip</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">clip_client</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">ServiceProxy</span><span class="p">(</span><span class="sh">"</span><span class="s">clip</span><span class="sh">"</span><span class="p">,</span> <span class="n">Clip</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">lang_imgs_match</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">lang</span><span class="p">,</span> <span class="n">img_paths</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">调用CLIP进行语言-图像匹配</span><span class="sh">"""</span>
        <span class="n">response</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">clip_client</span><span class="p">(</span>
            <span class="n">task</span><span class="o">=</span><span class="sh">"</span><span class="s">text_match_images</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">text</span><span class="o">=</span><span class="n">lang</span><span class="p">,</span>
            <span class="n">image_paths</span><span class="o">=</span><span class="n">img_paths</span>
        <span class="p">)</span>
        <span class="k">return</span> <span class="n">response</span>
</code></pre></div></div> <h4 id="32-cerebellum--brain-数据提供">3.2 Cerebellum → Brain 数据提供</h4> <p><strong>A. 语义地图数据</strong>:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Cerebellum发布语义对象数据
</span><span class="k">class</span> <span class="nc">SemanticMapGenerator</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="c1"># 发布语义对象
</span>        <span class="n">self</span><span class="p">.</span><span class="n">semantic_object_pub</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">Publisher</span><span class="p">(</span>
            <span class="sh">"</span><span class="s">/semantic_object</span><span class="sh">"</span><span class="p">,</span> <span class="n">SemanticObject</span><span class="p">,</span> <span class="n">queue_size</span><span class="o">=</span><span class="mi">10</span>
        <span class="p">)</span>

    <span class="k">def</span> <span class="nf">publish_semantic_object</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">semantic_obj</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">发布语义对象信息</span><span class="sh">"""</span>
        <span class="n">self</span><span class="p">.</span><span class="n">semantic_object_pub</span><span class="p">.</span><span class="nf">publish</span><span class="p">(</span><span class="n">semantic_obj</span><span class="p">)</span>
</code></pre></div></div> <p><strong>B. 机器人状态信息</strong>:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Cerebellum发布机器人位姿
</span><span class="k">class</span> <span class="nc">SemanticMapGuide</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="c1"># 订阅机器人位姿
</span>        <span class="n">rospy</span><span class="p">.</span><span class="nc">Subscriber</span><span class="p">(</span>
            <span class="sh">"</span><span class="s">/robot_pose_ekf/odom_combined</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">PoseWithCovarianceStamped</span><span class="p">,</span>
            <span class="n">self</span><span class="p">.</span><span class="n">pose_callback</span>
        <span class="p">)</span>

    <span class="k">def</span> <span class="nf">pose_callback</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">msg</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">机器人位姿回调</span><span class="sh">"""</span>
        <span class="n">self</span><span class="p">.</span><span class="n">robot_pose</span> <span class="o">=</span> <span class="n">msg</span><span class="p">.</span><span class="n">pose</span><span class="p">.</span><span class="n">pose</span>
</code></pre></div></div> <h3 id="4-典型通信流程">4. 典型通信流程</h3> <h4 id="41-任务规划流程">4.1 任务规划流程</h4> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 1. 用户指令输入
</span><span class="n">user_command</span> <span class="o">=</span> <span class="sh">"</span><span class="s">把桌子上的饮料放到冰箱里</span><span class="sh">"</span>

<span class="c1"># 2. Cerebellum调用Brain进行任务规划
</span><span class="k">def</span> <span class="nf">execute_tasks</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">cmd</span><span class="p">):</span>
    <span class="c1"># 构建任务规划请求
</span>    <span class="n">content</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">以下是语义对象列表：</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">semantic_categories</span><span class="si">}</span><span class="s">。用户的指令是：</span><span class="si">{</span><span class="n">cmd</span><span class="si">}</span><span class="sh">"</span>

    <span class="c1"># 调用Brain的LLM推理服务
</span>    <span class="n">llm_reason_res</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">ask_llm_reason</span><span class="p">(</span><span class="sh">"</span><span class="s">task_plan_reason</span><span class="sh">"</span><span class="p">,</span> <span class="n">content</span><span class="p">)</span>

    <span class="c1"># 解析任务计划
</span>    <span class="n">task_plans</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">llm_analyzer</span><span class="p">.</span><span class="nf">analyze</span><span class="p">(</span><span class="sh">"</span><span class="s">task_plan_reason</span><span class="sh">"</span><span class="p">,</span> <span class="n">llm_reason_res</span><span class="p">.</span><span class="n">response</span><span class="p">)</span>

    <span class="c1"># 执行任务计划
</span>    <span class="k">for</span> <span class="n">task_plan</span> <span class="ow">in</span> <span class="n">task_plans</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">execute_task_plan</span><span class="p">(</span><span class="n">task_plan</span><span class="p">,</span> <span class="n">cmd</span><span class="p">)</span>
</code></pre></div></div> <h4 id="42-语义理解流程">4.2 语义理解流程</h4> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 1. 语义对象查找
</span><span class="k">def</span> <span class="nf">find_semantic_object_by_language</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">category</span><span class="p">,</span> <span class="n">language</span><span class="p">):</span>
    <span class="c1"># 获取图像路径
</span>    <span class="n">label_img_paths</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">database</span><span class="p">.</span><span class="nf">get_img_paths_by_category</span><span class="p">(</span><span class="n">category</span><span class="p">)</span>

    <span class="c1"># 调用Brain的CLIP服务进行匹配
</span>    <span class="n">match_pairs</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">lang_imgs_match</span><span class="p">(</span><span class="n">language</span><span class="p">,</span> <span class="n">img_paths</span><span class="p">)</span>

    <span class="c1"># 返回最佳匹配结果
</span>    <span class="k">return</span> <span class="n">best_label</span>
</code></pre></div></div> <h4 id="43-导航指导流程">4.3 导航指导流程</h4> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 1. 接收导航请求
</span><span class="k">def</span> <span class="nf">guide_callback</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">req</span><span class="p">):</span>
    <span class="c1"># 2. 调用Brain进行语义理解
</span>    <span class="n">content</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">要找的对象是</span><span class="si">{</span><span class="n">req</span><span class="p">.</span><span class="n">category</span><span class="si">}</span><span class="s">，用户的指令是</span><span class="si">{</span><span class="n">req</span><span class="p">.</span><span class="n">origin_cmd</span><span class="si">}</span><span class="sh">"</span>
    <span class="n">llm_chat_res</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">ask_llm_chat</span><span class="p">(</span><span class="sh">"</span><span class="s">category_or_language_chat</span><span class="sh">"</span><span class="p">,</span> <span class="n">content</span><span class="p">)</span>

    <span class="c1"># 3. 解析语义对象属性
</span>    <span class="n">navi_obj_properties</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">llm_analyzer</span><span class="p">.</span><span class="nf">analyze</span><span class="p">(</span>
        <span class="sh">"</span><span class="s">category_or_language_chat</span><span class="sh">"</span><span class="p">,</span> <span class="n">llm_chat_res</span><span class="p">.</span><span class="n">response</span>
    <span class="p">)</span>

    <span class="c1"># 4. 查找具体语义对象
</span>    <span class="k">if</span> <span class="n">navi_obj_properties</span><span class="p">[</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">]</span> <span class="o">==</span> <span class="sh">"</span><span class="s">language</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">label</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">find_semantic_object_by_language</span><span class="p">(</span>
            <span class="n">navi_obj_properties</span><span class="p">[</span><span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">],</span>
            <span class="n">navi_obj_properties</span><span class="p">[</span><span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">]</span>
        <span class="p">)</span>

    <span class="c1"># 5. 生成导航目标
</span>    <span class="n">ideal_navi_goals</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">get_ideal_navi_goals</span><span class="p">(</span><span class="n">label</span><span class="p">,</span> <span class="n">req</span><span class="p">.</span><span class="n">op_cmd</span><span class="p">)</span>

    <span class="c1"># 6. 返回导航指导结果
</span>    <span class="k">return</span> <span class="nc">GuideResponse</span><span class="p">(</span>
        <span class="n">success</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
        <span class="n">label</span><span class="o">=</span><span class="n">label</span><span class="p">,</span>
        <span class="n">nav_goals</span><span class="o">=</span><span class="n">ideal_navi_goals</span>
    <span class="p">)</span>
</code></pre></div></div> <h3 id="5-服务接口定义">5. 服务接口定义</h3> <h4 id="51-llm服务接口">5.1 LLM服务接口</h4> <div class="language-protobuf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">#</span> <span class="n">LLMChat.srv</span>
<span class="kt">string</span> <span class="n">type</span>      <span class="err">#</span> <span class="err">服务类型</span> <span class="p">(</span><span class="n">test_chat</span><span class="p">,</span> <span class="n">category_or_language_chat</span><span class="p">)</span>
<span class="kt">string</span> <span class="n">content</span>   <span class="err">#</span> <span class="err">输入内容</span>
<span class="o">---</span>
<span class="kt">bool</span> <span class="n">success</span>     <span class="err">#</span> <span class="err">成功标志</span>
<span class="kt">string</span> <span class="n">response</span>  <span class="err">#</span> <span class="err">响应内容</span>
</code></pre></div></div> <h4 id="52-vlm服务接口">5.2 VLM服务接口</h4> <div class="language-protobuf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">#</span> <span class="n">VLMChat.srv</span>
<span class="kt">string</span> <span class="n">type</span>        <span class="err">#</span> <span class="err">服务类型</span> <span class="p">(</span><span class="n">test_vision</span><span class="p">,</span> <span class="n">manipulation_oriented_vision</span><span class="p">)</span>
<span class="kt">string</span> <span class="n">content</span>     <span class="err">#</span> <span class="err">文本内容</span>
<span class="kt">string</span> <span class="n">image_path</span>  <span class="err">#</span> <span class="err">图像路径</span>
<span class="o">---</span>
<span class="kt">bool</span> <span class="n">success</span>       <span class="err">#</span> <span class="err">成功标志</span>
<span class="kt">string</span> <span class="n">response</span>    <span class="err">#</span> <span class="err">响应内容</span>
</code></pre></div></div> <h4 id="53-语义地图指导服务接口">5.3 语义地图指导服务接口</h4> <div class="language-protobuf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">#</span> <span class="n">Guide.srv</span>
<span class="kt">string</span> <span class="n">category</span>    <span class="err">#</span> <span class="err">导航目标类</span>
<span class="kt">string</span> <span class="n">op_cmd</span>      <span class="err">#</span> <span class="err">操作命令</span>
<span class="kt">string</span> <span class="n">origin_cmd</span>  <span class="err">#</span> <span class="err">原始指令</span>
<span class="o">---</span>
<span class="kt">bool</span> <span class="n">success</span>       <span class="err">#</span> <span class="err">成功标志</span>
<span class="kt">string</span> <span class="kd">message</span>     <span class="err">#</span> <span class="err">消息</span>
<span class="kt">string</span> <span class="n">label</span>       <span class="err">#</span> <span class="err">语义对象标签</span>
<span class="n">geometry_msgs</span><span class="o">/</span><span class="n">Pose</span><span class="p">[]</span> <span class="n">nav_goals</span>  <span class="err">#</span> <span class="err">导航目标点列表</span>
</code></pre></div></div> <h3 id="6-通信特点">6. 通信特点</h3> <h4 id="61-异步解耦">6.1 异步解耦</h4> <ul> <li>Brain和Cerebellum模块独立运行</li> <li>通过ROS服务进行松耦合通信</li> <li>支持模块的动态启动和停止</li> </ul> <h4 id="62-智能分层">6.2 智能分层</h4> <ul> <li>Brain负责高级智能决策</li> <li>Cerebellum负责具体执行控制</li> <li>清晰的职责分离</li> </ul> <h4 id="63-可扩展性">6.3 可扩展性</h4> <ul> <li>新增AI模型只需在Brain模块添加服务</li> <li>新增执行功能只需在Cerebellum模块添加节点</li> <li>标准化的服务接口便于扩展</li> </ul> <h3 id="7-错误处理机制">7. 错误处理机制</h3> <h4 id="71-服务可用性检查">7.1 服务可用性检查</h4> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 等待服务就绪
</span><span class="n">rospy</span><span class="p">.</span><span class="nf">wait_for_service</span><span class="p">(</span><span class="sh">"</span><span class="s">llm_chat</span><span class="sh">"</span><span class="p">)</span>
<span class="n">rospy</span><span class="p">.</span><span class="nf">wait_for_service</span><span class="p">(</span><span class="sh">"</span><span class="s">vlm_chat</span><span class="sh">"</span><span class="p">)</span>
<span class="n">rospy</span><span class="p">.</span><span class="nf">wait_for_service</span><span class="p">(</span><span class="sh">"</span><span class="s">clip</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <h4 id="72-异常处理">7.2 异常处理</h4> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span><span class="p">:</span>
    <span class="n">response</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">llm_chat_client</span><span class="p">(</span><span class="nb">type</span><span class="p">,</span> <span class="n">content</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">response</span>
<span class="k">except</span> <span class="n">rospy</span><span class="p">.</span><span class="n">ServiceException</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
    <span class="n">rospy</span><span class="p">.</span><span class="nf">logerr</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Service call failed: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">return</span> <span class="bp">None</span>
</code></pre></div></div> <h4 id="73-超时处理">7.3 超时处理</h4> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 设置服务调用超时
</span><span class="n">rospy</span><span class="p">.</span><span class="nf">wait_for_service</span><span class="p">(</span><span class="sh">"</span><span class="s">llm_chat</span><span class="sh">"</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="mf">10.0</span><span class="p">)</span>
</code></pre></div></div> <p>这种设计使得YanBot系统具有良好的模块化特性，Brain和Cerebellum模块可以独立开发和测试，通过标准化的ROS服务接口进行通信，实现了智能决策和执行控制的完美分离。</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>┌─────────────────┐    ROS Services/Topics    ┌─────────────────┐
│   Brain模块     │ ←──────────────────────→ │  Cerebellum模块 │
│  (智能决策层)    │                          │  (执行控制层)    │
│                 │                          │                 │
│ • LLM (语言理解)│                          │ • 语义地图      │
│ • VLM (视觉理解)│                          │ • 导航系统      │
│ • CLIP (语义匹配)│                          │ • 语音交互      │
│ • 任务规划      │                          │ • 机械臂控制    │
└─────────────────┘                          └─────────────────┘
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Cerebellum模块调用Brain的LLM服务
</span><span class="k">class</span> <span class="nc">SemanticMapGuide</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="c1"># 等待LLM服务就绪
</span>        <span class="n">rospy</span><span class="p">.</span><span class="nf">wait_for_service</span><span class="p">(</span><span class="sh">"</span><span class="s">llm_chat</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">rospy</span><span class="p">.</span><span class="nf">wait_for_service</span><span class="p">(</span><span class="sh">"</span><span class="s">llm_reason</span><span class="sh">"</span><span class="p">)</span>

        <span class="c1"># 创建服务客户端
</span>        <span class="n">self</span><span class="p">.</span><span class="n">llm_chat_client</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">ServiceProxy</span><span class="p">(</span><span class="sh">"</span><span class="s">llm_chat</span><span class="sh">"</span><span class="p">,</span> <span class="n">LLMChat</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">llm_reason_client</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">ServiceProxy</span><span class="p">(</span><span class="sh">"</span><span class="s">llm_reason</span><span class="sh">"</span><span class="p">,</span> <span class="n">LLMChat</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">ask_llm_chat</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="nb">type</span><span class="p">,</span> <span class="n">content</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">调用LLM对话服务</span><span class="sh">"""</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">response</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">llm_chat_client</span><span class="p">(</span><span class="nb">type</span><span class="p">,</span> <span class="n">content</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">response</span>
        <span class="k">except</span> <span class="n">rospy</span><span class="p">.</span><span class="n">ServiceException</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="n">rospy</span><span class="p">.</span><span class="nf">logerr</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">LLM chat service call failed: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">return</span> <span class="bp">None</span>

    <span class="k">def</span> <span class="nf">ask_llm_reason</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="nb">type</span><span class="p">,</span> <span class="n">content</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">调用LLM推理服务</span><span class="sh">"""</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">response</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">llm_reason_client</span><span class="p">(</span><span class="nb">type</span><span class="p">,</span> <span class="n">content</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">response</span>
        <span class="k">except</span> <span class="n">rospy</span><span class="p">.</span><span class="n">ServiceException</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="n">rospy</span><span class="p">.</span><span class="nf">logerr</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">LLM reason service call failed: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">return</span> <span class="bp">None</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Cerebellum模块调用Brain的VLM服务
</span><span class="k">class</span> <span class="nc">SemanticMapGuide</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="c1"># 等待VLM服务就绪
</span>        <span class="n">rospy</span><span class="p">.</span><span class="nf">wait_for_service</span><span class="p">(</span><span class="sh">"</span><span class="s">vlm_chat</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">vlm_chat_client</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">ServiceProxy</span><span class="p">(</span><span class="sh">"</span><span class="s">vlm_chat</span><span class="sh">"</span><span class="p">,</span> <span class="n">VLMChat</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">ask_vlm_chat</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="nb">type</span><span class="p">,</span> <span class="n">content</span><span class="p">,</span> <span class="n">image_path</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">调用VLM视觉问答服务</span><span class="sh">"""</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">response</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">vlm_chat_client</span><span class="p">(</span><span class="nb">type</span><span class="p">,</span> <span class="n">content</span><span class="p">,</span> <span class="n">image_path</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">response</span>
        <span class="k">except</span> <span class="n">rospy</span><span class="p">.</span><span class="n">ServiceException</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="n">rospy</span><span class="p">.</span><span class="nf">logerr</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">VLM chat service call failed: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">return</span> <span class="bp">None</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Cerebellum模块调用Brain的CLIP服务
</span><span class="k">class</span> <span class="nc">SemanticMapGuide</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="c1"># 等待CLIP服务就绪
</span>        <span class="n">rospy</span><span class="p">.</span><span class="nf">wait_for_service</span><span class="p">(</span><span class="sh">"</span><span class="s">clip</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">clip_client</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">ServiceProxy</span><span class="p">(</span><span class="sh">"</span><span class="s">clip</span><span class="sh">"</span><span class="p">,</span> <span class="n">Clip</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">lang_imgs_match</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">lang</span><span class="p">,</span> <span class="n">img_paths</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">调用CLIP进行语言-图像匹配</span><span class="sh">"""</span>
        <span class="n">response</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">clip_client</span><span class="p">(</span>
            <span class="n">task</span><span class="o">=</span><span class="sh">"</span><span class="s">text_match_images</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">text</span><span class="o">=</span><span class="n">lang</span><span class="p">,</span>
            <span class="n">image_paths</span><span class="o">=</span><span class="n">img_paths</span>
        <span class="p">)</span>
        <span class="k">return</span> <span class="n">response</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Cerebellum发布语义对象数据
</span><span class="k">class</span> <span class="nc">SemanticMapGenerator</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="c1"># 发布语义对象
</span>        <span class="n">self</span><span class="p">.</span><span class="n">semantic_object_pub</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">Publisher</span><span class="p">(</span>
            <span class="sh">"</span><span class="s">/semantic_object</span><span class="sh">"</span><span class="p">,</span> <span class="n">SemanticObject</span><span class="p">,</span> <span class="n">queue_size</span><span class="o">=</span><span class="mi">10</span>
        <span class="p">)</span>

    <span class="k">def</span> <span class="nf">publish_semantic_object</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">semantic_obj</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">发布语义对象信息</span><span class="sh">"""</span>
        <span class="n">self</span><span class="p">.</span><span class="n">semantic_object_pub</span><span class="p">.</span><span class="nf">publish</span><span class="p">(</span><span class="n">semantic_obj</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Cerebellum发布机器人位姿
</span><span class="k">class</span> <span class="nc">SemanticMapGuide</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="c1"># 订阅机器人位姿
</span>        <span class="n">rospy</span><span class="p">.</span><span class="nc">Subscriber</span><span class="p">(</span>
            <span class="sh">"</span><span class="s">/robot_pose_ekf/odom_combined</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">PoseWithCovarianceStamped</span><span class="p">,</span>
            <span class="n">self</span><span class="p">.</span><span class="n">pose_callback</span>
        <span class="p">)</span>

    <span class="k">def</span> <span class="nf">pose_callback</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">msg</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">机器人位姿回调</span><span class="sh">"""</span>
        <span class="n">self</span><span class="p">.</span><span class="n">robot_pose</span> <span class="o">=</span> <span class="n">msg</span><span class="p">.</span><span class="n">pose</span><span class="p">.</span><span class="n">pose</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 1. 用户指令输入
</span><span class="n">user_command</span> <span class="o">=</span> <span class="sh">"</span><span class="s">把桌子上的饮料放到冰箱里</span><span class="sh">"</span>

<span class="c1"># 2. Cerebellum调用Brain进行任务规划
</span><span class="k">def</span> <span class="nf">execute_tasks</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">cmd</span><span class="p">):</span>
    <span class="c1"># 构建任务规划请求
</span>    <span class="n">content</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">以下是语义对象列表：</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">semantic_categories</span><span class="si">}</span><span class="s">。用户的指令是：</span><span class="si">{</span><span class="n">cmd</span><span class="si">}</span><span class="sh">"</span>

    <span class="c1"># 调用Brain的LLM推理服务
</span>    <span class="n">llm_reason_res</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">ask_llm_reason</span><span class="p">(</span><span class="sh">"</span><span class="s">task_plan_reason</span><span class="sh">"</span><span class="p">,</span> <span class="n">content</span><span class="p">)</span>

    <span class="c1"># 解析任务计划
</span>    <span class="n">task_plans</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">llm_analyzer</span><span class="p">.</span><span class="nf">analyze</span><span class="p">(</span><span class="sh">"</span><span class="s">task_plan_reason</span><span class="sh">"</span><span class="p">,</span> <span class="n">llm_reason_res</span><span class="p">.</span><span class="n">response</span><span class="p">)</span>

    <span class="c1"># 执行任务计划
</span>    <span class="k">for</span> <span class="n">task_plan</span> <span class="ow">in</span> <span class="n">task_plans</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">execute_task_plan</span><span class="p">(</span><span class="n">task_plan</span><span class="p">,</span> <span class="n">cmd</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 1. 语义对象查找
</span><span class="k">def</span> <span class="nf">find_semantic_object_by_language</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">category</span><span class="p">,</span> <span class="n">language</span><span class="p">):</span>
    <span class="c1"># 获取图像路径
</span>    <span class="n">label_img_paths</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">database</span><span class="p">.</span><span class="nf">get_img_paths_by_category</span><span class="p">(</span><span class="n">category</span><span class="p">)</span>

    <span class="c1"># 调用Brain的CLIP服务进行匹配
</span>    <span class="n">match_pairs</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">lang_imgs_match</span><span class="p">(</span><span class="n">language</span><span class="p">,</span> <span class="n">img_paths</span><span class="p">)</span>

    <span class="c1"># 返回最佳匹配结果
</span>    <span class="k">return</span> <span class="n">best_label</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 1. 接收导航请求
</span><span class="k">def</span> <span class="nf">guide_callback</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">req</span><span class="p">):</span>
    <span class="c1"># 2. 调用Brain进行语义理解
</span>    <span class="n">content</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">要找的对象是</span><span class="si">{</span><span class="n">req</span><span class="p">.</span><span class="n">category</span><span class="si">}</span><span class="s">，用户的指令是</span><span class="si">{</span><span class="n">req</span><span class="p">.</span><span class="n">origin_cmd</span><span class="si">}</span><span class="sh">"</span>
    <span class="n">llm_chat_res</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">ask_llm_chat</span><span class="p">(</span><span class="sh">"</span><span class="s">category_or_language_chat</span><span class="sh">"</span><span class="p">,</span> <span class="n">content</span><span class="p">)</span>

    <span class="c1"># 3. 解析语义对象属性
</span>    <span class="n">navi_obj_properties</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">llm_analyzer</span><span class="p">.</span><span class="nf">analyze</span><span class="p">(</span>
        <span class="sh">"</span><span class="s">category_or_language_chat</span><span class="sh">"</span><span class="p">,</span> <span class="n">llm_chat_res</span><span class="p">.</span><span class="n">response</span>
    <span class="p">)</span>

    <span class="c1"># 4. 查找具体语义对象
</span>    <span class="k">if</span> <span class="n">navi_obj_properties</span><span class="p">[</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">]</span> <span class="o">==</span> <span class="sh">"</span><span class="s">language</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">label</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">find_semantic_object_by_language</span><span class="p">(</span>
            <span class="n">navi_obj_properties</span><span class="p">[</span><span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">],</span>
            <span class="n">navi_obj_properties</span><span class="p">[</span><span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">]</span>
        <span class="p">)</span>

    <span class="c1"># 5. 生成导航目标
</span>    <span class="n">ideal_navi_goals</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">get_ideal_navi_goals</span><span class="p">(</span><span class="n">label</span><span class="p">,</span> <span class="n">req</span><span class="p">.</span><span class="n">op_cmd</span><span class="p">)</span>

    <span class="c1"># 6. 返回导航指导结果
</span>    <span class="k">return</span> <span class="nc">GuideResponse</span><span class="p">(</span>
        <span class="n">success</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
        <span class="n">label</span><span class="o">=</span><span class="n">label</span><span class="p">,</span>
        <span class="n">nav_goals</span><span class="o">=</span><span class="n">ideal_navi_goals</span>
    <span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># LLMChat.srv
string type      # 服务类型 (test_chat, category_or_language_chat)
string content   # 输入内容
---
bool success     # 成功标志
string response  # 响应内容
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># VLMChat.srv
string type        # 服务类型 (test_vision, manipulation_oriented_vision)
string content     # 文本内容
string image_path  # 图像路径
---
bool success       # 成功标志
string response    # 响应内容
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Guide.srv
string category    # 导航目标类
string op_cmd      # 操作命令
string origin_cmd  # 原始指令
---
bool success       # 成功标志
string message     # 消息
string label       # 语义对象标签
geometry_msgs/Pose[] nav_goals  # 导航目标点列表
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 等待服务就绪
</span><span class="n">rospy</span><span class="p">.</span><span class="nf">wait_for_service</span><span class="p">(</span><span class="sh">"</span><span class="s">llm_chat</span><span class="sh">"</span><span class="p">)</span>
<span class="n">rospy</span><span class="p">.</span><span class="nf">wait_for_service</span><span class="p">(</span><span class="sh">"</span><span class="s">vlm_chat</span><span class="sh">"</span><span class="p">)</span>
<span class="n">rospy</span><span class="p">.</span><span class="nf">wait_for_service</span><span class="p">(</span><span class="sh">"</span><span class="s">clip</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span><span class="p">:</span>
    <span class="n">response</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">llm_chat_client</span><span class="p">(</span><span class="nb">type</span><span class="p">,</span> <span class="n">content</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">response</span>
<span class="k">except</span> <span class="n">rospy</span><span class="p">.</span><span class="n">ServiceException</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
    <span class="n">rospy</span><span class="p">.</span><span class="nf">logerr</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Service call failed: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">return</span> <span class="bp">None</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 设置服务调用超时
</span><span class="n">rospy</span><span class="p">.</span><span class="nf">wait_for_service</span><span class="p">(</span><span class="sh">"</span><span class="s">llm_chat</span><span class="sh">"</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="mf">10.0</span><span class="p">)</span>
</code></pre></div></div> <hr/> <p><strong>User</strong></p> <p>画一个节点和通信和服务的完整拓扑图</p> <hr/> <p><strong>Cursor</strong></p> <p>基于我对YanBot系统的深入分析，我来为您绘制一个完整的节点、通信和服务的拓扑图。</p> <h2 id="yanbot系统完整拓扑图">YanBot系统完整拓扑图</h2> <pre><code class="language-mermaid">graph TB
    %% 用户交互层
    User[用户] --&gt; |语音指令| WakeupNode[唤醒节点&lt;br/&gt;wakeup_node]
    User --&gt; |语音指令| STTNode[语音识别节点&lt;br/&gt;stt_node]
    User --&gt; |文本指令| TestInteractNode[交互测试节点&lt;br/&gt;test_interact_node]

    %% 语音交互模块 (interact环境)
    subgraph "语音交互模块 (interact环境)"
        WakeupNode --&gt; |wakeup话题| TestInteractNode
        WakeupNode --&gt; |wakeup_control服务| WakeupNode
        STTNode --&gt; |srv_stt服务| TestInteractNode
        TTSNode[语音合成节点&lt;br/&gt;tts_node] --&gt; |srv_tts服务| TestInteractNode
    end

    %% 传感器层
    subgraph "传感器层"
        Camera[RealSense相机&lt;br/&gt;realsense2_camera] --&gt; |RGB图像| SemanticGenerator[语义地图生成器&lt;br/&gt;semantic_map_generator_node]
        Camera --&gt; |深度图像| SemanticGenerator
        Camera --&gt; |相机信息| SemanticGenerator
        Lidar[激光雷达&lt;br/&gt;mid360_laserscan] --&gt; |激光数据| Navigation[导航系统&lt;br/&gt;navigation]
    end

    %% 语义地图模块 (py310环境)
    subgraph "语义地图模块 (py310环境)"
        YOESAMNode[YOLO+SAM节点&lt;br/&gt;yolo_evsam_ros] --&gt; |/vit_detection服务| SemanticGenerator
        SemanticGenerator --&gt; |语义对象| SemanticManager[语义地图管理器&lt;br/&gt;semantic_map_manager_node]
        SemanticManager --&gt; |语义地图数据库| SemanticGuide[语义地图引导器&lt;br/&gt;semantic_map_guide_node]
        SemanticGenerator --&gt; |/clip服务| CLIPNode[CLIP节点&lt;br/&gt;semantic_map_CLIP_node]
    end

    %% Brain模块 (AI大脑)
    subgraph "Brain模块 (AI大脑)"
        LLMNode[LLM节点&lt;br/&gt;llm_node] --&gt; |llm_chat服务| SemanticGuide
        LLMNode --&gt; |llm_reason服务| SemanticGuide
        VLMNode[VLM节点&lt;br/&gt;vlm_node] --&gt; |vlm_chat服务| SemanticGuide
        CLIPNode --&gt; |clip服务| SemanticGuide
    end

    %% 导航系统
    subgraph "导航系统"
        Navigation --&gt; |地图数据| MapServer[地图服务器&lt;br/&gt;map_server]
        Navigation --&gt; |定位数据| AMCL[AMCL定位&lt;br/&gt;amcl]
        Navigation --&gt; |路径规划| MoveBase[移动基座&lt;br/&gt;move_base]
        Navigation --&gt; |机器人状态| RobotPose[机器人位姿&lt;br/&gt;robot_pose_ekf]
    end

    %% 机械臂控制
    subgraph "机械臂控制"
        ARXMaster[ARX主控&lt;br/&gt;arm_master_node] --&gt; |关节控制| ARXFollow[ARX跟随&lt;br/&gt;arm_follow_node]
        ARXFollow --&gt; |关节信息| ARXMaster
        ARXController[ARX控制器&lt;br/&gt;R5Controller] --&gt; |末端位姿| ARXMaster
    end

    %% 数据流和通信
    %% 话题通信 (异步)
    Camera -.-&gt;|/camera/color/image_raw| SemanticGenerator
    Camera -.-&gt;|/camera/aligned_depth_to_color/image_raw| SemanticGenerator
    Camera -.-&gt;|/camera/color/camera_info| SemanticGenerator
    Lidar -.-&gt;|/scan| Navigation
    SemanticGenerator -.-&gt;|/semantic_object| SemanticManager
    SemanticManager -.-&gt;|/semantic_map| RViz[RViz可视化]
    RobotPose -.-&gt;|/robot_pose_ekf/odom_combined| SemanticGuide
    MapServer -.-&gt;|/map| SemanticGuide

    %% 服务通信 (同步)
    TestInteractNode -.-&gt;|wakeup_control服务| WakeupNode
    TestInteractNode -.-&gt;|srv_stt服务| STTNode
    TestInteractNode -.-&gt;|srv_tts服务| TTSNode
    SemanticGenerator -.-&gt;|/vit_detection服务| YOESAMNode
    SemanticGenerator -.-&gt;|/clip服务| CLIPNode
    SemanticGuide -.-&gt;|llm_chat服务| LLMNode
    SemanticGuide -.-&gt;|llm_reason服务| LLMNode
    SemanticGuide -.-&gt;|vlm_chat服务| VLMNode
    SemanticGuide -.-&gt;|clip服务| CLIPNode
    SemanticGuide -.-&gt;|semantic_map_guide服务| ExternalClient[外部客户端]

    %% 参数服务器
    ParamServer[参数服务器] -.-&gt;|配置参数| WakeupNode
    ParamServer -.-&gt;|配置参数| STTNode
    ParamServer -.-&gt;|配置参数| TTSNode
    ParamServer -.-&gt;|配置参数| SemanticGenerator
    ParamServer -.-&gt;|配置参数| YOESAMNode
    ParamServer -.-&gt;|配置参数| LLMNode
    ParamServer -.-&gt;|配置参数| VLMNode
    ParamServer -.-&gt;|配置参数| Navigation

    %% 环境隔离
    subgraph "环境管理"
        InteractEnv[interact环境&lt;br/&gt;语音处理]
        Py310Env[py310环境&lt;br/&gt;视觉处理]
        SystemEnv[系统环境&lt;br/&gt;基础功能]
    end

    WakeupNode -.-&gt;|launch-prefix| InteractEnv
    STTNode -.-&gt;|launch-prefix| InteractEnv
    TTSNode -.-&gt;|launch-prefix| InteractEnv
    YOESAMNode -.-&gt;|launch-prefix| Py310Env
    SemanticGenerator -.-&gt;|launch-prefix| SystemEnv
    SemanticManager -.-&gt;|launch-prefix| SystemEnv
    SemanticGuide -.-&gt;|launch-prefix| SystemEnv
    LLMNode -.-&gt;|launch-prefix| SystemEnv
    VLMNode -.-&gt;|launch-prefix| SystemEnv

    %% 样式定义
    classDef userNode fill:#e1f5fe
    classDef sensorNode fill:#f3e5f5
    classDef brainNode fill:#e8f5e8
    classDef cerebellumNode fill:#fff3e0
    classDef navigationNode fill:#fce4ec
    classDef armNode fill:#f1f8e9
    classDef envNode fill:#fafafa

    class User userNode
    class Camera,Lidar sensorNode
    class LLMNode,VLMNode,CLIPNode brainNode
    class WakeupNode,STTNode,TTSNode,SemanticGenerator,SemanticManager,SemanticGuide,YOESAMNode cerebellumNode
    class Navigation,MapServer,AMCL,MoveBase,RobotPose navigationNode
    class ARXMaster,ARXFollow,ARXController armNode
    class InteractEnv,Py310Env,SystemEnv envNode
</code></pre> <h2 id="详细通信说明">详细通信说明</h2> <h3 id="1-话题通信-topics---异步通信">1. 话题通信 (Topics) - 异步通信</h3> <h4 id="11-传感器数据流">1.1 传感器数据流</h4> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>RealSense相机 → 语义地图生成器
├── /camera/color/image_raw (RGB图像)
├── /camera/aligned_depth_to_color/image_raw (深度图像)
└── /camera/color/camera_info (相机参数)

激光雷达 → 导航系统
└── /scan (激光扫描数据)
</code></pre></div></div> <h4 id="12-语义地图数据流">1.2 语义地图数据流</h4> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>语义地图生成器 → 语义地图管理器
└── /semantic_object (语义对象)

语义地图管理器 → RViz
└── /semantic_map (语义地图点云)
</code></pre></div></div> <h4 id="13-机器人状态数据流">1.3 机器人状态数据流</h4> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>机器人位姿 → 语义地图引导器
└── /robot_pose_ekf/odom_combined (机器人位姿)

地图服务器 → 语义地图引导器
└── /map (占用栅格地图)
</code></pre></div></div> <h3 id="2-服务通信-services---同步通信">2. 服务通信 (Services) - 同步通信</h3> <h4 id="21-语音交互服务">2.1 语音交互服务</h4> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>交互测试节点 ↔ 唤醒节点
└── wakeup_control (唤醒控制)

交互测试节点 ↔ 语音识别节点
└── srv_stt (语音转文本)

交互测试节点 ↔ 语音合成节点
└── srv_tts (文本转语音)
</code></pre></div></div> <h4 id="22-ai服务调用">2.2 AI服务调用</h4> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>语义地图生成器 → YOLO+SAM节点
└── /vit_detection (目标检测和分割)

语义地图生成器 → CLIP节点
└── /clip (语义匹配)

语义地图引导器 → LLM节点
├── llm_chat (对话服务)
└── llm_reason (推理服务)

语义地图引导器 → VLM节点
└── vlm_chat (视觉问答)

语义地图引导器 → CLIP节点
└── clip (语义匹配)
</code></pre></div></div> <h4 id="23-外部接口服务">2.3 外部接口服务</h4> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>外部客户端 ↔ 语义地图引导器
└── semantic_map_guide (导航指导)
</code></pre></div></div> <h3 id="3-环境隔离机制">3. 环境隔离机制</h3> <h4 id="31-interact环境-语音处理">3.1 interact环境 (语音处理)</h4> <ul> <li><strong>节点</strong>: wakeup_node, stt_node, tts_node</li> <li><strong>依赖</strong>: PyTorch, FunASR, ChatTTS, PvPorcupine</li> <li><strong>路径</strong>: <code class="language-plaintext highlighter-rouge">/home/user/miniconda3/envs/interact/bin/python</code></li> </ul> <h4 id="32-py310环境-视觉处理">3.2 py310环境 (视觉处理)</h4> <ul> <li><strong>节点</strong>: yolo_evsam_ros</li> <li><strong>依赖</strong>: PyTorch, Ultralytics, Segment-Anything, CLIP</li> <li><strong>路径</strong>: <code class="language-plaintext highlighter-rouge">/home/user/miniconda3/envs/py310/bin/python</code></li> </ul> <h4 id="33-系统环境-基础功能">3.3 系统环境 (基础功能)</h4> <ul> <li><strong>节点</strong>: semantic<em>map</em>*, llm_node, vlm_node</li> <li><strong>依赖</strong>: ROS基础包, Python标准库</li> <li><strong>路径</strong>: <code class="language-plaintext highlighter-rouge">/usr/bin/python</code></li> </ul> <h3 id="4-数据流向分析">4. 数据流向分析</h3> <h4 id="41-感知认知决策执行流程">4.1 感知→认知→决策→执行流程</h4> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>传感器数据 → 语义理解 → AI推理 → 任务规划 → 执行控制
    ↓           ↓         ↓        ↓         ↓
RealSense   YOLO+SAM   LLM/VLM   任务分解   导航/机械臂
激光雷达     语义地图   智能问答   路径规划   动作执行
</code></pre></div></div> <h4 id="42-用户交互流程">4.2 用户交互流程</h4> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>用户指令 → 语音识别 → 语义理解 → 任务规划 → 执行反馈
    ↓        ↓         ↓         ↓         ↓
语音输入   STT服务    LLM推理    任务分解    TTS反馈
</code></pre></div></div> <h3 id="5-系统特点-1">5. 系统特点</h3> <h4 id="51-模块化设计-1">5.1 模块化设计</h4> <ul> <li>每个功能模块独立运行</li> <li>通过标准化接口通信</li> <li>支持动态配置和扩展</li> </ul> <h4 id="52-环境隔离">5.2 环境隔离</h4> <ul> <li>不同功能使用不同conda环境</li> <li>避免依赖冲突</li> <li>提高系统稳定性</li> </ul> <h4 id="53-智能分层">5.3 智能分层</h4> <ul> <li>Brain模块负责高级智能决策</li> <li>Cerebellum模块负责具体执行</li> <li>清晰的职责分离</li> </ul> <p>这个拓扑图展示了YanBot系统完整的架构设计，包括节点间的通信关系、服务调用方式、环境隔离机制以及数据流向，为理解系统工作原理提供了清晰的视图。</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>graph TB
    %% 用户交互层
    User[用户] --&gt; |语音指令| WakeupNode[唤醒节点&lt;br/&gt;wakeup_node]
    User --&gt; |语音指令| STTNode[语音识别节点&lt;br/&gt;stt_node]
    User --&gt; |文本指令| TestInteractNode[交互测试节点&lt;br/&gt;test_interact_node]

    %% 语音交互模块 (interact环境)
    subgraph "语音交互模块 (interact环境)"
        WakeupNode --&gt; |wakeup话题| TestInteractNode
        WakeupNode --&gt; |wakeup_control服务| WakeupNode
        STTNode --&gt; |srv_stt服务| TestInteractNode
        TTSNode[语音合成节点&lt;br/&gt;tts_node] --&gt; |srv_tts服务| TestInteractNode
    end

    %% 传感器层
    subgraph "传感器层"
        Camera[RealSense相机&lt;br/&gt;realsense2_camera] --&gt; |RGB图像| SemanticGenerator[语义地图生成器&lt;br/&gt;semantic_map_generator_node]
        Camera --&gt; |深度图像| SemanticGenerator
        Camera --&gt; |相机信息| SemanticGenerator
        Lidar[激光雷达&lt;br/&gt;mid360_laserscan] --&gt; |激光数据| Navigation[导航系统&lt;br/&gt;navigation]
    end

    %% 语义地图模块 (py310环境)
    subgraph "语义地图模块 (py310环境)"
        YOESAMNode[YOLO+SAM节点&lt;br/&gt;yolo_evsam_ros] --&gt; |/vit_detection服务| SemanticGenerator
        SemanticGenerator --&gt; |语义对象| SemanticManager[语义地图管理器&lt;br/&gt;semantic_map_manager_node]
        SemanticManager --&gt; |语义地图数据库| SemanticGuide[语义地图引导器&lt;br/&gt;semantic_map_guide_node]
        SemanticGenerator --&gt; |/clip服务| CLIPNode[CLIP节点&lt;br/&gt;semantic_map_CLIP_node]
    end

    %% Brain模块 (AI大脑)
    subgraph "Brain模块 (AI大脑)"
        LLMNode[LLM节点&lt;br/&gt;llm_node] --&gt; |llm_chat服务| SemanticGuide
        LLMNode --&gt; |llm_reason服务| SemanticGuide
        VLMNode[VLM节点&lt;br/&gt;vlm_node] --&gt; |vlm_chat服务| SemanticGuide
        CLIPNode --&gt; |clip服务| SemanticGuide
    end

    %% 导航系统
    subgraph "导航系统"
        Navigation --&gt; |地图数据| MapServer[地图服务器&lt;br/&gt;map_server]
        Navigation --&gt; |定位数据| AMCL[AMCL定位&lt;br/&gt;amcl]
        Navigation --&gt; |路径规划| MoveBase[移动基座&lt;br/&gt;move_base]
        Navigation --&gt; |机器人状态| RobotPose[机器人位姿&lt;br/&gt;robot_pose_ekf]
    end

    %% 机械臂控制
    subgraph "机械臂控制"
        ARXMaster[ARX主控&lt;br/&gt;arm_master_node] --&gt; |关节控制| ARXFollow[ARX跟随&lt;br/&gt;arm_follow_node]
        ARXFollow --&gt; |关节信息| ARXMaster
        ARXController[ARX控制器&lt;br/&gt;R5Controller] --&gt; |末端位姿| ARXMaster
    end

    %% 数据流和通信
    %% 话题通信 (异步)
    Camera -.-&gt;|/camera/color/image_raw| SemanticGenerator
    Camera -.-&gt;|/camera/aligned_depth_to_color/image_raw| SemanticGenerator
    Camera -.-&gt;|/camera/color/camera_info| SemanticGenerator
    Lidar -.-&gt;|/scan| Navigation
    SemanticGenerator -.-&gt;|/semantic_object| SemanticManager
    SemanticManager -.-&gt;|/semantic_map| RViz[RViz可视化]
    RobotPose -.-&gt;|/robot_pose_ekf/odom_combined| SemanticGuide
    MapServer -.-&gt;|/map| SemanticGuide

    %% 服务通信 (同步)
    TestInteractNode -.-&gt;|wakeup_control服务| WakeupNode
    TestInteractNode -.-&gt;|srv_stt服务| STTNode
    TestInteractNode -.-&gt;|srv_tts服务| TTSNode
    SemanticGenerator -.-&gt;|/vit_detection服务| YOESAMNode
    SemanticGenerator -.-&gt;|/clip服务| CLIPNode
    SemanticGuide -.-&gt;|llm_chat服务| LLMNode
    SemanticGuide -.-&gt;|llm_reason服务| LLMNode
    SemanticGuide -.-&gt;|vlm_chat服务| VLMNode
    SemanticGuide -.-&gt;|clip服务| CLIPNode
    SemanticGuide -.-&gt;|semantic_map_guide服务| ExternalClient[外部客户端]

    %% 参数服务器
    ParamServer[参数服务器] -.-&gt;|配置参数| WakeupNode
    ParamServer -.-&gt;|配置参数| STTNode
    ParamServer -.-&gt;|配置参数| TTSNode
    ParamServer -.-&gt;|配置参数| SemanticGenerator
    ParamServer -.-&gt;|配置参数| YOESAMNode
    ParamServer -.-&gt;|配置参数| LLMNode
    ParamServer -.-&gt;|配置参数| VLMNode
    ParamServer -.-&gt;|配置参数| Navigation

    %% 环境隔离
    subgraph "环境管理"
        InteractEnv[interact环境&lt;br/&gt;语音处理]
        Py310Env[py310环境&lt;br/&gt;视觉处理]
        SystemEnv[系统环境&lt;br/&gt;基础功能]
    end

    WakeupNode -.-&gt;|launch-prefix| InteractEnv
    STTNode -.-&gt;|launch-prefix| InteractEnv
    TTSNode -.-&gt;|launch-prefix| InteractEnv
    YOESAMNode -.-&gt;|launch-prefix| Py310Env
    SemanticGenerator -.-&gt;|launch-prefix| SystemEnv
    SemanticManager -.-&gt;|launch-prefix| SystemEnv
    SemanticGuide -.-&gt;|launch-prefix| SystemEnv
    LLMNode -.-&gt;|launch-prefix| SystemEnv
    VLMNode -.-&gt;|launch-prefix| SystemEnv

    %% 样式定义
    classDef userNode fill:#e1f5fe
    classDef sensorNode fill:#f3e5f5
    classDef brainNode fill:#e8f5e8
    classDef cerebellumNode fill:#fff3e0
    classDef navigationNode fill:#fce4ec
    classDef armNode fill:#f1f8e9
    classDef envNode fill:#fafafa

    class User userNode
    class Camera,Lidar sensorNode
    class LLMNode,VLMNode,CLIPNode brainNode
    class WakeupNode,STTNode,TTSNode,SemanticGenerator,SemanticManager,SemanticGuide,YOESAMNode cerebellumNode
    class Navigation,MapServer,AMCL,MoveBase,RobotPose navigationNode
    class ARXMaster,ARXFollow,ARXController armNode
    class InteractEnv,Py310Env,SystemEnv envNode
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>RealSense相机 → 语义地图生成器
├── /camera/color/image_raw (RGB图像)
├── /camera/aligned_depth_to_color/image_raw (深度图像)
└── /camera/color/camera_info (相机参数)

激光雷达 → 导航系统
└── /scan (激光扫描数据)
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>语义地图生成器 → 语义地图管理器
└── /semantic_object (语义对象)

语义地图管理器 → RViz
└── /semantic_map (语义地图点云)
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>机器人位姿 → 语义地图引导器
└── /robot_pose_ekf/odom_combined (机器人位姿)

地图服务器 → 语义地图引导器
└── /map (占用栅格地图)
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>交互测试节点 ↔ 唤醒节点
└── wakeup_control (唤醒控制)

交互测试节点 ↔ 语音识别节点
└── srv_stt (语音转文本)

交互测试节点 ↔ 语音合成节点
└── srv_tts (文本转语音)
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>语义地图生成器 → YOLO+SAM节点
└── /vit_detection (目标检测和分割)

语义地图生成器 → CLIP节点
└── /clip (语义匹配)

语义地图引导器 → LLM节点
├── llm_chat (对话服务)
└── llm_reason (推理服务)

语义地图引导器 → VLM节点
└── vlm_chat (视觉问答)

语义地图引导器 → CLIP节点
└── clip (语义匹配)
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>外部客户端 ↔ 语义地图引导器
└── semantic_map_guide (导航指导)
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>传感器数据 → 语义理解 → AI推理 → 任务规划 → 执行控制
    ↓           ↓         ↓        ↓         ↓
RealSense   YOLO+SAM   LLM/VLM   任务分解   导航/机械臂
激光雷达     语义地图   智能问答   路径规划   动作执行
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>用户指令 → 语音识别 → 语义理解 → 任务规划 → 执行反馈
    ↓        ↓         ↓         ↓         ↓
语音输入   STT服务    LLM推理    任务分解    TTS反馈
</code></pre></div></div> <hr/> <p><strong>User</strong></p> <p>图中实线和虚线的区别是什么</p> <hr/> <p><strong>Cursor</strong></p> <p>在拓扑图中，实线和虚线有明确的区别，让我详细解释：</p> <h2 id="实线和虚线的区别">实线和虚线的区别</h2> <h3 id="1-实线-solid-lines">1. 实线 (Solid Lines)</h3> <p><strong>含义</strong>: 表示<strong>直接的数据流或控制流</strong> <strong>特点</strong>: 节点间有直接的数据传递或控制关系</p> <h4 id="11-实线示例">1.1 实线示例</h4> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>User --&gt; |语音指令| WakeupNode
</code></pre></div></div> <ul> <li>用户直接向唤醒节点发送语音指令</li> <li>存在实际的数据传递</li> </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>WakeupNode --&gt; |wakeup话题| TestInteractNode
</code></pre></div></div> <ul> <li>唤醒节点直接发布wakeup话题</li> <li>交互测试节点直接订阅该话题</li> </ul> <h3 id="2-虚线-dotted-lines">2. 虚线 (Dotted Lines)</h3> <p><strong>含义</strong>: 表示<strong>服务调用或配置关系</strong> <strong>特点</strong>: 节点间通过服务接口通信或参数配置</p> <h4 id="21-虚线示例">2.1 虚线示例</h4> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>TestInteractNode -.-&gt;|wakeup_control服务| WakeupNode
</code></pre></div></div> <ul> <li>交互测试节点通过ROS服务调用唤醒节点</li> <li>是请求-响应模式的通信</li> </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ParamServer -.-&gt;|配置参数| WakeupNode
</code></pre></div></div> <ul> <li>参数服务器向节点提供配置参数</li> <li>是配置关系，不是数据流</li> </ul> <h3 id="3-具体分类说明">3. 具体分类说明</h3> <h4 id="31-实线表示的关系">3.1 实线表示的关系</h4> <p><strong>话题通信 (Topics)</strong>:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Camera -.-&gt;|/camera/color/image_raw| SemanticGenerator
</code></pre></div></div> <ul> <li>相机节点发布图像话题</li> <li>语义生成器订阅该话题</li> <li>异步通信，数据持续流动</li> </ul> <p><strong>直接控制流</strong>:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ARXMaster --&gt; |关节控制| ARXFollow
</code></pre></div></div> <ul> <li>主控节点直接控制跟随节点</li> <li>存在直接的控制指令传递</li> </ul> <h4 id="32-虚线表示的关系">3.2 虚线表示的关系</h4> <p><strong>服务调用 (Services)</strong>:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SemanticGuide -.-&gt;|llm_chat服务| LLMNode
</code></pre></div></div> <ul> <li>语义引导器调用LLM的聊天服务</li> <li>同步通信，请求-响应模式</li> </ul> <p><strong>环境配置</strong>:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>WakeupNode -.-&gt;|launch-prefix| InteractEnv
</code></pre></div></div> <ul> <li>节点使用特定的conda环境</li> <li>是配置关系，不是数据流</li> </ul> <p><strong>参数配置</strong>:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ParamServer -.-&gt;|配置参数| WakeupNode
</code></pre></div></div> <ul> <li>参数服务器提供配置信息</li> <li>是静态配置关系</li> </ul> <h3 id="4-通信模式对比">4. 通信模式对比</h3> <h4 id="41-实线---异步通信-topics">4.1 实线 - 异步通信 (Topics)</h4> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 发布者
</span><span class="n">self</span><span class="p">.</span><span class="n">pub</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">Publisher</span><span class="p">(</span><span class="sh">'</span><span class="s">/semantic_object</span><span class="sh">'</span><span class="p">,</span> <span class="n">SemanticObject</span><span class="p">,</span> <span class="n">queue_size</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="n">self</span><span class="p">.</span><span class="n">pub</span><span class="p">.</span><span class="nf">publish</span><span class="p">(</span><span class="n">semantic_obj</span><span class="p">)</span>

<span class="c1"># 订阅者
</span><span class="n">rospy</span><span class="p">.</span><span class="nc">Subscriber</span><span class="p">(</span><span class="sh">'</span><span class="s">/semantic_object</span><span class="sh">'</span><span class="p">,</span> <span class="n">SemanticObject</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">callback</span><span class="p">)</span>
</code></pre></div></div> <ul> <li>数据持续流动</li> <li>发布者不等待订阅者</li> <li>适合传感器数据、状态信息</li> </ul> <h4 id="42-虚线---同步通信-services">4.2 虚线 - 同步通信 (Services)</h4> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 服务客户端
</span><span class="n">rospy</span><span class="p">.</span><span class="nf">wait_for_service</span><span class="p">(</span><span class="sh">'</span><span class="s">llm_chat</span><span class="sh">'</span><span class="p">)</span>
<span class="n">client</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">ServiceProxy</span><span class="p">(</span><span class="sh">'</span><span class="s">llm_chat</span><span class="sh">'</span><span class="p">,</span> <span class="n">LLMChat</span><span class="p">)</span>
<span class="n">response</span> <span class="o">=</span> <span class="nf">client</span><span class="p">(</span><span class="nb">type</span><span class="p">,</span> <span class="n">content</span><span class="p">)</span>

<span class="c1"># 服务服务器
</span><span class="n">rospy</span><span class="p">.</span><span class="nc">Service</span><span class="p">(</span><span class="sh">'</span><span class="s">llm_chat</span><span class="sh">'</span><span class="p">,</span> <span class="n">LLMChat</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">handle_request</span><span class="p">)</span>
</code></pre></div></div> <ul> <li>请求-响应模式</li> <li>客户端等待服务器响应</li> <li>适合智能问答、任务规划</li> </ul> <h3 id="5-实际应用场景">5. 实际应用场景</h3> <h4 id="51-使用实线的场景">5.1 使用实线的场景</h4> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>传感器数据流:
Camera --&gt; SemanticGenerator  (图像数据持续传输)

状态信息流:
RobotPose --&gt; SemanticGuide   (机器人位姿实时更新)

控制指令流:
ARXMaster --&gt; ARXFollow       (机械臂控制指令)
</code></pre></div></div> <h4 id="52-使用虚线的场景">5.2 使用虚线的场景</h4> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>智能服务调用:
SemanticGuide -.-&gt; LLMNode    (AI推理服务)

配置关系:
ParamServer -.-&gt; WakeupNode   (参数配置)

环境配置:
WakeupNode -.-&gt; InteractEnv   (Python环境)
</code></pre></div></div> <h3 id="6-在mermaid图中的表示">6. 在Mermaid图中的表示</h3> <pre><code class="language-mermaid">graph TB
    %% 实线示例 - 直接数据流
    A[节点A] --&gt; B[节点B]

    %% 虚线示例 - 服务调用
    C[节点C] -.-&gt; D[节点D]

    %% 带标签的实线
    E[传感器] --&gt;|数据流| F[处理器]

    %% 带标签的虚线
    G[客户端] -.-&gt;|服务调用| H[服务器]
</code></pre> <h3 id="7-总结">7. 总结</h3> <table> <thead> <tr> <th>特征</th> <th>实线</th> <th>虚线</th> </tr> </thead> <tbody> <tr> <td><strong>通信类型</strong></td> <td>话题通信 (Topics)</td> <td>服务调用 (Services)</td> </tr> <tr> <td><strong>通信模式</strong></td> <td>异步</td> <td>同步</td> </tr> <tr> <td><strong>数据流向</strong></td> <td>持续流动</td> <td>请求-响应</td> </tr> <tr> <td><strong>关系类型</strong></td> <td>直接数据流</td> <td>服务调用/配置关系</td> </tr> <tr> <td><strong>典型应用</strong></td> <td>传感器数据、状态信息</td> <td>AI服务、参数配置</td> </tr> <tr> <td><strong>等待机制</strong></td> <td>不等待</td> <td>等待响应</td> </tr> </tbody> </table> <p>这种区分帮助我们：</p> <ol> <li><strong>理解通信模式</strong>: 实线表示数据持续流动，虚线表示按需调用</li> <li><strong>分析系统性能</strong>: 实线可能影响实时性，虚线影响响应时间</li> <li><strong>设计系统架构</strong>: 合理选择通信方式</li> <li><strong>调试系统问题</strong>: 快速定位通信类型和问题所在</li> </ol> <p>在YanBot系统中，这种区分特别重要，因为它帮助我们理解哪些是实时数据流（如传感器数据），哪些是智能服务调用（如AI推理），从而更好地优化系统性能。</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>User --&gt; |语音指令| WakeupNode
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>WakeupNode --&gt; |wakeup话题| TestInteractNode
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>TestInteractNode -.-&gt;|wakeup_control服务| WakeupNode
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ParamServer -.-&gt;|配置参数| WakeupNode
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Camera -.-&gt;|/camera/color/image_raw| SemanticGenerator
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ARXMaster --&gt; |关节控制| ARXFollow
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SemanticGuide -.-&gt;|llm_chat服务| LLMNode
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>WakeupNode -.-&gt;|launch-prefix| InteractEnv
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ParamServer -.-&gt;|配置参数| WakeupNode
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 发布者
</span><span class="n">self</span><span class="p">.</span><span class="n">pub</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">Publisher</span><span class="p">(</span><span class="sh">'</span><span class="s">/semantic_object</span><span class="sh">'</span><span class="p">,</span> <span class="n">SemanticObject</span><span class="p">,</span> <span class="n">queue_size</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="n">self</span><span class="p">.</span><span class="n">pub</span><span class="p">.</span><span class="nf">publish</span><span class="p">(</span><span class="n">semantic_obj</span><span class="p">)</span>

<span class="c1"># 订阅者
</span><span class="n">rospy</span><span class="p">.</span><span class="nc">Subscriber</span><span class="p">(</span><span class="sh">'</span><span class="s">/semantic_object</span><span class="sh">'</span><span class="p">,</span> <span class="n">SemanticObject</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">callback</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 服务客户端
</span><span class="n">rospy</span><span class="p">.</span><span class="nf">wait_for_service</span><span class="p">(</span><span class="sh">'</span><span class="s">llm_chat</span><span class="sh">'</span><span class="p">)</span>
<span class="n">client</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">ServiceProxy</span><span class="p">(</span><span class="sh">'</span><span class="s">llm_chat</span><span class="sh">'</span><span class="p">,</span> <span class="n">LLMChat</span><span class="p">)</span>
<span class="n">response</span> <span class="o">=</span> <span class="nf">client</span><span class="p">(</span><span class="nb">type</span><span class="p">,</span> <span class="n">content</span><span class="p">)</span>

<span class="c1"># 服务服务器
</span><span class="n">rospy</span><span class="p">.</span><span class="nc">Service</span><span class="p">(</span><span class="sh">'</span><span class="s">llm_chat</span><span class="sh">'</span><span class="p">,</span> <span class="n">LLMChat</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">handle_request</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>传感器数据流:
Camera --&gt; SemanticGenerator  (图像数据持续传输)

状态信息流:
RobotPose --&gt; SemanticGuide   (机器人位姿实时更新)

控制指令流:
ARXMaster --&gt; ARXFollow       (机械臂控制指令)
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>智能服务调用:
SemanticGuide -.-&gt; LLMNode    (AI推理服务)

配置关系:
ParamServer -.-&gt; WakeupNode   (参数配置)

环境配置:
WakeupNode -.-&gt; InteractEnv   (Python环境)
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>graph TB
    %% 实线示例 - 直接数据流
    A[节点A] --&gt; B[节点B]

    %% 虚线示例 - 服务调用
    C[节点C] -.-&gt; D[节点D]

    %% 带标签的实线
    E[传感器] --&gt;|数据流| F[处理器]

    %% 带标签的虚线
    G[客户端] -.-&gt;|服务调用| H[服务器]
</code></pre></div></div> <hr/> <p><strong>User</strong></p> <p>假设我已经连上了机器人，我该如何启动它</p> <hr/> <p><strong>Cursor</strong></p> <p>基于我对YanBot系统的分析，我来为您提供完整的机器人启动指南。</p> <h2 id="yanbot机器人启动指南">YanBot机器人启动指南</h2> <h3 id="1-环境准备">1. 环境准备</h3> <h4 id="11-检查环境变量">1.1 检查环境变量</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 确保环境变量已设置</span>
<span class="nb">echo</span> <span class="nv">$YANBOT_WS</span>
<span class="c"># 应该输出: /home/kara/YanBot-zyt</span>

<span class="c"># 如果没有设置，运行基础配置</span>
<span class="nb">cd</span> /home/kara/YanBot-zyt
<span class="nb">source </span>scripts/basic.sh
</code></pre></div></div> <h4 id="12-激活ros环境">1.2 激活ROS环境</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 激活ROS Noetic</span>
<span class="nb">source</span> /opt/ros/noetic/setup.bash

<span class="c"># 激活工作空间</span>
<span class="nb">cd</span> <span class="nv">$YANBOT_WS</span>
<span class="nb">source </span>devel/setup.bash
</code></pre></div></div> <h4 id="13-检查硬件连接">1.3 检查硬件连接</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 检查相机连接</span>
lsusb | <span class="nb">grep </span>RealSense
<span class="c"># 应该看到Intel RealSense设备</span>

<span class="c"># 检查激光雷达连接</span>
<span class="nb">ls</span> /dev/ttyUSB<span class="k">*</span>
<span class="c"># 应该看到激光雷达设备</span>

<span class="c"># 检查机械臂CAN总线</span>
<span class="nb">ls</span> /dev/can<span class="k">*</span>
<span class="c"># 应该看到can0, can1等设备</span>
</code></pre></div></div> <h3 id="2-启动方式选择">2. 启动方式选择</h3> <h4 id="21-完整系统启动-推荐">2.1 完整系统启动 (推荐)</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 启动完整系统 - 包含导航、语义地图、AI服务</span>
roslaunch cerebellum_pkg main.launch
</code></pre></div></div> <p><strong>启动内容</strong>:</p> <ul> <li>✅ RViz可视化</li> <li>✅ 2D导航系统</li> <li>✅ RealSense相机</li> <li>✅ 语义地图系统</li> <li>✅ LLM/VLM AI服务</li> <li>✅ CLIP语义匹配</li> </ul> <h4 id="22-语音交互测试启动">2.2 语音交互测试启动</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 启动语音交互测试</span>
roslaunch cerebellum_pkg test_interact.launch
</code></pre></div></div> <p><strong>启动内容</strong>:</p> <ul> <li>✅ 语音唤醒 (wakeup_node)</li> <li>✅ 语音识别 (stt_node)</li> <li>✅ 语音合成 (tts_node)</li> <li>✅ 交互测试 (test_interact_node)</li> </ul> <h4 id="23-语义地图系统启动">2.3 语义地图系统启动</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 启动语义地图系统</span>
roslaunch semantic_map_pkg semantic_map.launch
</code></pre></div></div> <p><strong>启动内容</strong>:</p> <ul> <li>✅ YOLO+SAM检测分割</li> <li>✅ 语义地图生成器</li> <li>✅ 语义地图管理器</li> <li>✅ 语义地图引导器</li> <li>✅ AI服务 (LLM/VLM/CLIP)</li> </ul> <h3 id="3-分步启动-调试用">3. 分步启动 (调试用)</h3> <h4 id="31-启动导航系统">3.1 启动导航系统</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 启动机器人底盘和导航</span>
roslaunch turn_on_wheeltec_robot navigation.launch
</code></pre></div></div> <h4 id="32-启动相机">3.2 启动相机</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 启动RealSense相机</span>
roslaunch realsense2_camera rs_camera.launch align_depth:<span class="o">=</span><span class="nb">true</span>
</code></pre></div></div> <h4 id="33-启动语义地图">3.3 启动语义地图</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 启动语义地图系统</span>
roslaunch semantic_map_pkg semantic_map.launch
</code></pre></div></div> <h4 id="34-启动ai服务">3.4 启动AI服务</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 启动LLM服务</span>
roslaunch llm_pkg llm.launch

<span class="c"># 启动VLM服务</span>
roslaunch vlm_pkg vlm.launch
</code></pre></div></div> <h3 id="4-启动参数配置">4. 启动参数配置</h3> <h4 id="41-自定义启动参数">4.1 自定义启动参数</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 启动时不使用RViz</span>
roslaunch cerebellum_pkg main.launch main/use_rviz:<span class="o">=</span><span class="nb">false</span>

<span class="c"># 使用3D导航模式</span>
roslaunch cerebellum_pkg main.launch main/navi_func:<span class="o">=</span>3D

<span class="c"># 使用分布式语义地图</span>
roslaunch cerebellum_pkg main.launch main/semantic_map/semantic_map_mode:<span class="o">=</span>distribute

<span class="c"># 使用GSAM检测分割</span>
roslaunch cerebellum_pkg main.launch main/semantic_map/det_seg_mode:<span class="o">=</span>gsam
</code></pre></div></div> <h4 id="42-地图文件配置">4.2 地图文件配置</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 使用自定义地图</span>
roslaunch cerebellum_pkg main.launch main/2D_Navi/map_file:<span class="o">=</span>/path/to/your/map.yaml
</code></pre></div></div> <h3 id="5-启动验证">5. 启动验证</h3> <h4 id="51-检查节点状态">5.1 检查节点状态</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 查看所有运行节点</span>
rosnode list

<span class="c"># 查看节点详细信息</span>
rosnode info /semantic_map_generator_node
rosnode info /llm_node
rosnode info /wakeup_node
</code></pre></div></div> <h4 id="52-检查话题">5.2 检查话题</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 查看所有话题</span>
rostopic list

<span class="c"># 检查关键话题</span>
rostopic <span class="nb">echo</span> /camera/color/image_raw
rostopic <span class="nb">echo</span> /semantic_object
rostopic <span class="nb">echo</span> /robot_pose_ekf/odom_combined
</code></pre></div></div> <h4 id="53-检查服务">5.3 检查服务</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 查看所有服务</span>
rosservice list

<span class="c"># 测试AI服务</span>
rosservice call /llm_chat <span class="s2">"type: 'test_chat'
content: '你好'"</span>

<span class="c"># 测试语义地图服务</span>
rosservice call /semantic_map_guide <span class="s2">"category: 'chair'
op_cmd: '找到椅子'
origin_cmd: '帮我找把椅子'"</span>
</code></pre></div></div> <h3 id="6-常见问题解决">6. 常见问题解决</h3> <h4 id="61-环境问题">6.1 环境问题</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 如果conda环境未激活</span>
conda activate interact  <span class="c"># 语音交互</span>
conda activate py310     <span class="c"># 视觉处理</span>

<span class="c"># 检查Python路径</span>
which python
<span class="c"># 应该指向对应的conda环境</span>
</code></pre></div></div> <h4 id="62-权限问题">6.2 权限问题</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 相机权限</span>
<span class="nb">sudo </span>usermod <span class="nt">-a</span> <span class="nt">-G</span> video <span class="nv">$USER</span>

<span class="c"># 串口权限</span>
<span class="nb">sudo </span>usermod <span class="nt">-a</span> <span class="nt">-G</span> dialout <span class="nv">$USER</span>

<span class="c"># 重新登录或重启</span>
</code></pre></div></div> <h4 id="63-依赖问题">6.3 依赖问题</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 安装缺失依赖</span>
rosdep <span class="nb">install</span> <span class="nt">--from-paths</span> src <span class="nt">--ignore-src</span> <span class="nt">-r</span> <span class="nt">-y</span>

<span class="c"># 编译工作空间</span>
catkin_make
<span class="nb">source </span>devel/setup.bash
</code></pre></div></div> <h3 id="7-启动后操作">7. 启动后操作</h3> <h4 id="71-语音交互测试">7.1 语音交互测试</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 说唤醒词 (如"你好")</span>
<span class="c"># 系统会录制您的指令</span>
<span class="c"># 然后进行语音识别和合成回复</span>
</code></pre></div></div> <h4 id="72-语义地图测试">7.2 语义地图测试</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 在RViz中查看语义地图</span>
<span class="c"># 移动机器人观察语义对象检测</span>
<span class="c"># 测试AI问答功能</span>
</code></pre></div></div> <h4 id="73-导航测试">7.3 导航测试</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 在RViz中设置导航目标</span>
<span class="c"># 观察机器人路径规划</span>
<span class="c"># 测试避障功能</span>
</code></pre></div></div> <h3 id="8-启动脚本示例">8. 启动脚本示例</h3> <h4 id="81-创建启动脚本">8.1 创建启动脚本</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 创建启动脚本</span>
<span class="nb">cat</span> <span class="o">&gt;</span> start_yanbot.sh <span class="o">&lt;&lt;</span> <span class="sh">'</span><span class="no">EOF</span><span class="sh">'
#!/bin/bash

# 设置环境
source /opt/ros/noetic/setup.bash
cd </span><span class="nv">$YANBOT_WS</span><span class="sh">
source devel/setup.bash

# 检查硬件
echo "检查硬件连接..."
lsusb | grep RealSense || echo "警告: 未检测到RealSense相机"
ls /dev/can* || echo "警告: 未检测到CAN设备"

# 启动系统
echo "启动YanBot系统..."
roslaunch cerebellum_pkg main.launch
</span><span class="no">EOF

</span><span class="nb">chmod</span> +x start_yanbot.sh
</code></pre></div></div> <h4 id="82-使用启动脚本">8.2 使用启动脚本</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 运行启动脚本</span>
./start_yanbot.sh
</code></pre></div></div> <h3 id="9-监控和调试">9. 监控和调试</h3> <h4 id="91-日志监控">9.1 日志监控</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 查看节点日志</span>
rosrun rqt_console rqt_console

<span class="c"># 查看系统日志</span>
<span class="nb">tail</span> <span class="nt">-f</span> ~/.ros/log/latest/rosout.log
</code></pre></div></div> <h4 id="92-性能监控">9.2 性能监控</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 查看CPU和内存使用</span>
htop

<span class="c"># 查看GPU使用 (如果有)</span>
nvidia-smi
</code></pre></div></div> <h3 id="10-安全注意事项">10. 安全注意事项</h3> <h4 id="101-启动前检查">10.1 启动前检查</h4> <ul> <li>✅ 确保机器人周围有足够空间</li> <li>✅ 检查急停按钮是否可用</li> <li>✅ 确认所有传感器工作正常</li> <li>✅ 检查电池电量充足</li> </ul> <h4 id="102-启动后监控">10.2 启动后监控</h4> <ul> <li>✅ 观察机器人运动是否正常</li> <li>✅ 检查传感器数据是否准确</li> <li>✅ 监控AI服务响应时间</li> <li>✅ 注意异常日志信息</li> </ul> <p>按照这个指南，您应该能够成功启动YanBot机器人系统。建议先从语音交互测试开始，熟悉系统后再启动完整功能。</p> <pre><code class="language-shellscript"># 确保环境变量已设置
echo $YANBOT_WS
# 应该输出: /home/kara/YanBot-zyt

# 如果没有设置，运行基础配置
cd /home/kara/YanBot-zyt
source scripts/basic.sh
</code></pre> <pre><code class="language-shellscript"># 激活ROS Noetic
source /opt/ros/noetic/setup.bash

# 激活工作空间
cd $YANBOT_WS
source devel/setup.bash
</code></pre> <pre><code class="language-shellscript"># 检查相机连接
lsusb | grep RealSense
# 应该看到Intel RealSense设备

# 检查激光雷达连接
ls /dev/ttyUSB*
# 应该看到激光雷达设备

# 检查机械臂CAN总线
ls /dev/can*
# 应该看到can0, can1等设备
</code></pre> <pre><code class="language-shellscript"># 启动完整系统 - 包含导航、语义地图、AI服务
roslaunch cerebellum_pkg main.launch
</code></pre> <pre><code class="language-shellscript"># 启动语音交互测试
roslaunch cerebellum_pkg test_interact.launch
</code></pre> <pre><code class="language-shellscript"># 启动语义地图系统
roslaunch semantic_map_pkg semantic_map.launch
</code></pre> <pre><code class="language-shellscript"># 启动机器人底盘和导航
roslaunch turn_on_wheeltec_robot navigation.launch
</code></pre> <pre><code class="language-shellscript"># 启动RealSense相机
roslaunch realsense2_camera rs_camera.launch align_depth:=true
</code></pre> <pre><code class="language-shellscript"># 启动语义地图系统
roslaunch semantic_map_pkg semantic_map.launch
</code></pre> <pre><code class="language-shellscript"># 启动LLM服务
roslaunch llm_pkg llm.launch

# 启动VLM服务
roslaunch vlm_pkg vlm.launch
</code></pre> <pre><code class="language-shellscript"># 启动时不使用RViz
roslaunch cerebellum_pkg main.launch main/use_rviz:=false

# 使用3D导航模式
roslaunch cerebellum_pkg main.launch main/navi_func:=3D

# 使用分布式语义地图
roslaunch cerebellum_pkg main.launch main/semantic_map/semantic_map_mode:=distribute

# 使用GSAM检测分割
roslaunch cerebellum_pkg main.launch main/semantic_map/det_seg_mode:=gsam
</code></pre> <pre><code class="language-shellscript"># 使用自定义地图
roslaunch cerebellum_pkg main.launch main/2D_Navi/map_file:=/path/to/your/map.yaml
</code></pre> <pre><code class="language-shellscript"># 查看所有运行节点
rosnode list

# 查看节点详细信息
rosnode info /semantic_map_generator_node
rosnode info /llm_node
rosnode info /wakeup_node
</code></pre> <pre><code class="language-shellscript"># 查看所有话题
rostopic list

# 检查关键话题
rostopic echo /camera/color/image_raw
rostopic echo /semantic_object
rostopic echo /robot_pose_ekf/odom_combined
</code></pre> <pre><code class="language-shellscript"># 查看所有服务
rosservice list

# 测试AI服务
rosservice call /llm_chat "type: 'test_chat'
content: '你好'"

# 测试语义地图服务
rosservice call /semantic_map_guide "category: 'chair'
op_cmd: '找到椅子'
origin_cmd: '帮我找把椅子'"
</code></pre> <pre><code class="language-shellscript"># 如果conda环境未激活
conda activate interact  # 语音交互
conda activate py310     # 视觉处理

# 检查Python路径
which python
# 应该指向对应的conda环境
</code></pre> <pre><code class="language-shellscript"># 相机权限
sudo usermod -a -G video $USER

# 串口权限
sudo usermod -a -G dialout $USER

# 重新登录或重启
</code></pre> <pre><code class="language-shellscript"># 安装缺失依赖
rosdep install --from-paths src --ignore-src -r -y

# 编译工作空间
catkin_make
source devel/setup.bash
</code></pre> <pre><code class="language-shellscript"># 说唤醒词 (如"你好")
# 系统会录制您的指令
# 然后进行语音识别和合成回复
</code></pre> <pre><code class="language-shellscript"># 在RViz中查看语义地图
# 移动机器人观察语义对象检测
# 测试AI问答功能
</code></pre> <pre><code class="language-shellscript"># 在RViz中设置导航目标
# 观察机器人路径规划
# 测试避障功能
</code></pre> <pre><code class="language-shellscript"># 创建启动脚本
cat &gt; start_yanbot.sh &lt;&lt; 'EOF'
#!/bin/bash

# 设置环境
source /opt/ros/noetic/setup.bash
cd $YANBOT_WS
source devel/setup.bash

# 检查硬件
echo "检查硬件连接..."
lsusb | grep RealSense || echo "警告: 未检测到RealSense相机"
ls /dev/can* || echo "警告: 未检测到CAN设备"

# 启动系统
echo "启动YanBot系统..."
roslaunch cerebellum_pkg main.launch
EOF

chmod +x start_yanbot.sh
</code></pre> <pre><code class="language-shellscript"># 运行启动脚本
./start_yanbot.sh
</code></pre> <pre><code class="language-shellscript"># 查看节点日志
rosrun rqt_console rqt_console

# 查看系统日志
tail -f ~/.ros/log/latest/rosout.log
</code></pre> <pre><code class="language-shellscript"># 查看CPU和内存使用
htop

# 查看GPU使用 (如果有)
nvidia-smi
</code></pre> <hr/> <p><strong>User</strong></p> <p>接下来我们逐个模块详细讲解一下，首先是 Brain 的 llm_pkg</p> <hr/> <p><strong>Cursor</strong></p> <p>好的，让我详细讲解Brain模块中的llm_pkg。首先让我查看相关的代码文件来了解其完整实现。</p> <p>现在让我查看一些相关的分析器代码：</p> <p>现在让我查看LLMAnalyzer的完整实现：</p> <p>基于我对代码的深入分析，现在我来详细讲解Brain模块中的llm_pkg：</p> <h1 id="brain模块---llm_pkg-详细讲解">Brain模块 - llm_pkg 详细讲解</h1> <h2 id="1-模块概述">1. 模块概述</h2> <p><code class="language-plaintext highlighter-rouge">llm_pkg</code>是YanBot系统的<strong>语言理解核心模块</strong>，负责处理自然语言指令，为机器人提供智能决策支持。</p> <h3 id="11-核心功能">1.1 核心功能</h3> <ul> <li><strong>对话服务</strong> (Chat Service): 处理一般性对话和语义理解</li> <li><strong>推理服务</strong> (Reason Service): 进行任务规划和逻辑推理</li> <li><strong>响应解析</strong> (Response Analysis): 解析AI模型返回的结构化数据</li> </ul> <h3 id="12-架构设计">1.2 架构设计</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   ROS服务接口    │    │   LLM核心类     │    │   AI模型API     │
│                 │    │                 │    │                 │
│ • llm_chat      │◄──►│ • LLM类         │◄──►│ • DeepSeek-V2.5 │
│ • llm_reason    │    │ • LLMNode类     │    │ • DeepSeek-R1   │
│ • 响应解析      │    │ • LLMAnalyzer类 │    │ • SiliconFlow   │
└─────────────────┘    └─────────────────┘    └─────────────────┘
</code></pre></div></div> <h2 id="2-核心组件详解">2. 核心组件详解</h2> <h3 id="21-llm核心类-llmpy">2.1 LLM核心类 (<code class="language-plaintext highlighter-rouge">llm.py</code>)</h3> <h4 id="211-类定义和初始化">2.1.1 类定义和初始化</h4> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">LLM</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">model</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">deepseek-ai/DeepSeek-V2.5</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">max_tokens</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">4096</span><span class="p">,</span>
        <span class="n">base_url</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">https://api.siliconflow.cn/v1/</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">api_key</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
    <span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">model</span> <span class="o">=</span> <span class="n">model</span>
        <span class="n">self</span><span class="p">.</span><span class="n">max_tokens</span> <span class="o">=</span> <span class="n">max_tokens</span>
        <span class="n">self</span><span class="p">.</span><span class="n">base_url</span> <span class="o">=</span> <span class="n">base_url</span>
        <span class="n">self</span><span class="p">.</span><span class="n">api_key</span> <span class="o">=</span> <span class="n">api_key</span> <span class="ow">or</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">SILICONFLOW_API_KEY</span><span class="sh">"</span><span class="p">)</span>

        <span class="k">if</span> <span class="ow">not</span> <span class="n">self</span><span class="p">.</span><span class="n">api_key</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sh">"</span><span class="s">未找到API密钥，请设置环境变量 SILICONFLOW_API_KEY</span><span class="sh">"</span><span class="p">)</span>

        <span class="n">self</span><span class="p">.</span><span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">api_key</span><span class="p">)</span>
</code></pre></div></div> <p><strong>关键特性</strong>:</p> <ul> <li><strong>双模型支持</strong>: DeepSeek-V2.5 (对话) + DeepSeek-R1 (推理)</li> <li><strong>API配置</strong>: 使用SiliconFlow作为API提供商</li> <li><strong>环境变量</strong>: 通过<code class="language-plaintext highlighter-rouge">SILICONFLOW_API_KEY</code>设置密钥</li> </ul> <h4 id="212-响应处理机制">2.1.2 响应处理机制</h4> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">_process_response</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">response</span><span class="p">:</span> <span class="n">Any</span><span class="p">,</span> <span class="n">stream</span><span class="p">:</span> <span class="nb">bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Generator</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="bp">None</span><span class="p">]:</span>
    <span class="k">if</span> <span class="n">stream</span><span class="p">:</span>
        <span class="c1"># 流式响应处理
</span>        <span class="n">first_content</span> <span class="o">=</span> <span class="bp">True</span>
        <span class="n">first_reason</span> <span class="o">=</span> <span class="bp">True</span>
        <span class="k">for</span> <span class="n">chunk</span> <span class="ow">in</span> <span class="n">response</span><span class="p">:</span>
            <span class="n">delta</span> <span class="o">=</span> <span class="n">chunk</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">delta</span>

            <span class="k">if</span> <span class="n">delta</span><span class="p">.</span><span class="n">content</span><span class="p">:</span>
                <span class="n">new_content</span> <span class="o">=</span> <span class="n">delta</span><span class="p">.</span><span class="n">content</span>
                <span class="k">if</span> <span class="n">first_content</span><span class="p">:</span>
                    <span class="k">yield</span> <span class="sh">"</span><span class="se">\n</span><span class="s">&lt;ans&gt;</span><span class="se">\n</span><span class="sh">"</span>
                    <span class="n">first_content</span> <span class="o">=</span> <span class="bp">False</span>
                <span class="k">yield</span> <span class="k">from</span> <span class="n">new_content</span>

            <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">delta</span><span class="p">,</span> <span class="sh">"</span><span class="s">reasoning_content</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">delta</span><span class="p">.</span><span class="n">reasoning_content</span><span class="p">:</span>
                <span class="n">new_reason</span> <span class="o">=</span> <span class="n">delta</span><span class="p">.</span><span class="n">reasoning_content</span>
                <span class="k">if</span> <span class="n">first_reason</span><span class="p">:</span>
                    <span class="k">yield</span> <span class="sh">"</span><span class="se">\n</span><span class="s">&lt;think&gt;</span><span class="se">\n</span><span class="sh">"</span>
                    <span class="n">first_reason</span> <span class="o">=</span> <span class="bp">False</span>
                <span class="k">yield</span> <span class="k">from</span> <span class="n">new_reason</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="c1"># 非流式响应处理
</span>        <span class="n">completion</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>
        <span class="k">if</span> <span class="n">completion</span><span class="p">.</span><span class="n">content</span><span class="p">:</span>
            <span class="k">yield</span> <span class="sa">f</span><span class="sh">"</span><span class="se">\n</span><span class="s">&lt;ans&gt;</span><span class="se">\n</span><span class="si">{</span><span class="n">completion</span><span class="p">.</span><span class="n">content</span><span class="si">}</span><span class="sh">"</span>
        <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">completion</span><span class="p">,</span> <span class="sh">"</span><span class="s">reasoning_content</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">completion</span><span class="p">.</span><span class="n">reasoning_content</span><span class="p">:</span>
            <span class="k">yield</span> <span class="sa">f</span><span class="sh">"</span><span class="se">\n</span><span class="s">&lt;think&gt;</span><span class="se">\n</span><span class="si">{</span><span class="n">completion</span><span class="p">.</span><span class="n">reasoning_content</span><span class="si">}</span><span class="sh">"</span>
</code></pre></div></div> <p><strong>特殊标签处理</strong>:</p> <ul> <li><code class="language-plaintext highlighter-rouge">&lt;ans&gt;</code>: 答案内容标签</li> <li><code class="language-plaintext highlighter-rouge">&lt;think&gt;</code>: 推理过程标签</li> <li>支持流式和非流式两种模式</li> </ul> <h4 id="213-对话方法">2.1.3 对话方法</h4> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">stream_chat</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">messages</span><span class="p">:</span> <span class="nb">list</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Generator</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="bp">None</span><span class="p">]:</span>
    <span class="sh">"""</span><span class="s">流式对话</span><span class="sh">"""</span>
    <span class="n">response</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
        <span class="n">model</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">,</span>
        <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
        <span class="n">stream</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
        <span class="n">max_tokens</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">max_tokens</span><span class="p">,</span>
        <span class="o">**</span><span class="n">kwargs</span><span class="p">,</span>
    <span class="p">)</span>
    <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">_process_response</span><span class="p">(</span><span class="n">response</span><span class="p">,</span> <span class="n">stream</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">non_stream_chat</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">messages</span><span class="p">:</span> <span class="nb">list</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">非流式对话</span><span class="sh">"""</span>
    <span class="n">response</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
        <span class="n">model</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">,</span>
        <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
        <span class="n">stream</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
        <span class="n">max_tokens</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">max_tokens</span><span class="p">,</span>
        <span class="o">**</span><span class="n">kwargs</span><span class="p">,</span>
    <span class="p">)</span>
    <span class="k">return</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">_process_response</span><span class="p">(</span><span class="n">response</span><span class="p">,</span> <span class="n">stream</span><span class="o">=</span><span class="bp">False</span><span class="p">))</span>
</code></pre></div></div> <h3 id="22-ros节点类-llm_nodepy">2.2 ROS节点类 (<code class="language-plaintext highlighter-rouge">llm_node.py</code>)</h3> <h4 id="221-节点初始化">2.2.1 节点初始化</h4> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">LLMNode</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">rospy</span><span class="p">.</span><span class="nf">init_node</span><span class="p">(</span><span class="sh">"</span><span class="s">llm_node</span><span class="sh">"</span><span class="p">)</span>

        <span class="c1"># 初始化两个LLM实例
</span>        <span class="n">self</span><span class="p">.</span><span class="n">chat_llm</span> <span class="o">=</span> <span class="nc">LLM</span><span class="p">(</span><span class="sh">"</span><span class="s">deepseek-ai/DeepSeek-V2.5</span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># 对话模型
</span>        <span class="n">self</span><span class="p">.</span><span class="n">reason_llm</span> <span class="o">=</span> <span class="nc">LLM</span><span class="p">(</span><span class="sh">"</span><span class="s">deepseek-ai/DeepSeek-R1</span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># 推理模型
</span>
        <span class="c1"># 加载配置
</span>        <span class="n">llm_types_path</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nf">get_param</span><span class="p">(</span><span class="sh">"</span><span class="s">~llm_types_path</span><span class="sh">"</span><span class="p">,</span> <span class="n">default_llm_types_path</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">llm_types</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="nf">open</span><span class="p">(</span><span class="n">llm_types_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">))</span>
        <span class="n">self</span><span class="p">.</span><span class="n">chat_types</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">llm_types</span><span class="p">[</span><span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="p">].</span><span class="nf">keys</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">reason_types</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">llm_types</span><span class="p">[</span><span class="sh">"</span><span class="s">reason</span><span class="sh">"</span><span class="p">].</span><span class="nf">keys</span><span class="p">()</span>

        <span class="c1"># 创建ROS服务
</span>        <span class="n">self</span><span class="p">.</span><span class="n">service</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">Service</span><span class="p">(</span><span class="sh">"</span><span class="s">llm_chat</span><span class="sh">"</span><span class="p">,</span> <span class="n">LLMChat</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">handle_llm_chat_request</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">service_reason</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">Service</span><span class="p">(</span><span class="sh">"</span><span class="s">llm_reason</span><span class="sh">"</span><span class="p">,</span> <span class="n">LLMChat</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">handle_llm_reason_request</span><span class="p">)</span>
</code></pre></div></div> <h4 id="222-响应处理">2.2.2 响应处理</h4> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">_process_response</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">response</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="p">):</span>
    <span class="k">if</span> <span class="nb">type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="p">:</span>
        <span class="c1"># 对话响应处理
</span>        <span class="n">res</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span>
        <span class="n">res</span> <span class="o">=</span> <span class="n">res</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="s">&lt;ans&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="s">&lt;think&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
        <span class="n">res</span> <span class="o">=</span> <span class="n">res</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
    <span class="k">elif</span> <span class="nb">type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">reason</span><span class="sh">"</span><span class="p">:</span>
        <span class="c1"># 推理响应处理
</span>        <span class="n">res</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span>
        <span class="n">res</span> <span class="o">=</span> <span class="n">res</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
        <span class="c1"># 提取&lt;ans&gt;和&lt;think&gt;标签之间的内容
</span>        <span class="n">pattern</span> <span class="o">=</span> <span class="sa">r</span><span class="sh">"</span><span class="s">&lt;ans&gt;(.*?)&lt;think&gt;</span><span class="sh">"</span>
        <span class="n">matches</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">findall</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">res</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">matches</span><span class="p">:</span>
            <span class="n">res</span> <span class="o">=</span> <span class="n">matches</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">strip</span><span class="p">()</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">rospy</span><span class="p">.</span><span class="nf">logerr</span><span class="p">(</span><span class="sh">"</span><span class="s">Did not find &lt;ans&gt; and &lt;think&gt; tags in the response.</span><span class="sh">"</span><span class="p">)</span>
            <span class="n">res</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="k">return</span> <span class="n">res</span>
</code></pre></div></div> <h4 id="223-服务处理">2.2.3 服务处理</h4> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">handle_llm_chat_request</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">req</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">处理对话请求</span><span class="sh">"""</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="nb">type</span> <span class="o">=</span> <span class="n">req</span><span class="p">.</span><span class="nb">type</span>
        <span class="k">if</span> <span class="nb">type</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">chat_types</span><span class="p">:</span>
            <span class="n">rospy</span><span class="p">.</span><span class="nf">logwarn</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">不支持的问答类型: </span><span class="si">{</span><span class="nb">type</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
            <span class="nb">type</span> <span class="o">=</span> <span class="sh">"</span><span class="s">test_chat</span><span class="sh">"</span>

        <span class="c1"># 构建消息
</span>        <span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>
            <span class="p">{</span>
                <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">llm_types</span><span class="p">[</span><span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="p">][</span><span class="nb">type</span><span class="p">][</span><span class="sh">"</span><span class="s">system_prompt</span><span class="sh">"</span><span class="p">],</span>
            <span class="p">},</span>
            <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">req</span><span class="p">.</span><span class="n">content</span><span class="p">},</span>
        <span class="p">]</span>

        <span class="c1"># 调用LLM
</span>        <span class="n">response</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">chat_llm</span><span class="p">.</span><span class="nf">non_stream_chat</span><span class="p">(</span><span class="n">messages</span><span class="p">)</span>
        <span class="n">response</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_process_response</span><span class="p">(</span><span class="n">response</span><span class="p">,</span> <span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="nc">LLMChatResponse</span><span class="p">(</span><span class="n">success</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">response</span><span class="o">=</span><span class="nf">str</span><span class="p">(</span><span class="n">response</span><span class="p">))</span>

    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="n">rospy</span><span class="p">.</span><span class="nf">logerr</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">处理LLM Chat请求时发生错误: </span><span class="si">{</span><span class="nf">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="nc">LLMChatResponse</span><span class="p">(</span><span class="n">success</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">response</span><span class="o">=</span><span class="nf">str</span><span class="p">(</span><span class="n">e</span><span class="p">))</span>
</code></pre></div></div> <h3 id="23-响应分析器-llm_analyzerpy">2.3 响应分析器 (<code class="language-plaintext highlighter-rouge">llm_analyzer.py</code>)</h3> <h4 id="231-分析器类">2.3.1 分析器类</h4> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">LLMAnalyzer</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">analyze</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="nb">type</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">分析LLM响应</span><span class="sh">"""</span>
        <span class="k">if</span> <span class="nb">type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">category_or_language_chat</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">_analyze_category_or_language</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
        <span class="k">elif</span> <span class="nb">type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">task_plan_reason</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">_analyze_task_plan</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="s">failed_to_parse, unsupported type: </span><span class="si">{</span><span class="nb">type</span><span class="si">}</span><span class="sh">"</span>
</code></pre></div></div> <h4 id="232-类别语言分析">2.3.2 类别/语言分析</h4> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">_analyze_category_or_language</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">分析类别或语言描述</span><span class="sh">"""</span>
    <span class="c1"># 找出{}之间的内容
</span>    <span class="n">category_or_language</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">findall</span><span class="p">(</span><span class="sa">r</span><span class="sh">"</span><span class="s">\{(.*?)\}</span><span class="sh">"</span><span class="p">,</span> <span class="n">response</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">category_or_language</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">category_or_language</span> <span class="o">=</span> <span class="n">ast</span><span class="p">.</span><span class="nf">literal_eval</span><span class="p">(</span>
                <span class="sh">"</span><span class="s">{</span><span class="sh">"</span> <span class="o">+</span> <span class="n">category_or_language</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="sh">"</span><span class="s">}</span><span class="sh">"</span>
            <span class="p">)</span>
            <span class="k">return</span> <span class="n">category_or_language</span>  <span class="c1"># dict
</span>        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Failed to parse: </span><span class="si">{</span><span class="nf">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="se">\n</span><span class="s">original: </span><span class="si">{</span><span class="n">response</span><span class="si">}</span><span class="sh">"</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="sh">"</span><span class="s">failed_to_parse, no match</span><span class="sh">"</span>
</code></pre></div></div> <h4 id="233-任务规划分析">2.3.3 任务规划分析</h4> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">_analyze_task_plan</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">分析任务规划</span><span class="sh">"""</span>
    <span class="c1"># 检查是否包含"not_in_list"
</span>    <span class="k">if</span> <span class="sh">"</span><span class="s">not_in_list</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">response</span><span class="p">.</span><span class="nf">lower</span><span class="p">():</span>
        <span class="k">return</span> <span class="sh">"</span><span class="s">not_in_list</span><span class="sh">"</span>

    <span class="c1"># 找出[]之间的内容
</span>    <span class="n">task_plan_match</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">findall</span><span class="p">(</span><span class="sa">r</span><span class="sh">"</span><span class="s">\[(.*?)\]</span><span class="sh">"</span><span class="p">,</span> <span class="n">response</span><span class="p">,</span> <span class="n">re</span><span class="p">.</span><span class="n">DOTALL</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">task_plan_match</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="c1"># 使用ast.literal_eval解析Python字面量
</span>            <span class="n">task_plans</span> <span class="o">=</span> <span class="n">ast</span><span class="p">.</span><span class="nf">literal_eval</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">[</span><span class="si">{</span><span class="n">task_plan_match</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="si">}</span><span class="s">]</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">task_plans</span>  <span class="c1"># list
</span>        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="c1"># 尝试JSON解析
</span>            <span class="k">try</span><span class="p">:</span>
                <span class="n">modified_response</span> <span class="o">=</span> <span class="n">task_plan_match</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"'"</span><span class="p">,</span> <span class="sh">'"'</span><span class="p">)</span>
                <span class="n">task_plans</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">[</span><span class="si">{</span><span class="n">modified_response</span><span class="si">}</span><span class="s">]</span><span class="sh">"</span><span class="p">)</span>
                <span class="k">return</span> <span class="n">task_plans</span>
            <span class="k">except</span> <span class="n">json</span><span class="p">.</span><span class="n">JSONDecodeError</span><span class="p">:</span>
                <span class="k">return</span> <span class="sh">"</span><span class="s">failed_to_parse, decode error</span><span class="sh">"</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="sh">"</span><span class="s">failed_to_parse, no match</span><span class="sh">"</span>
</code></pre></div></div> <h2 id="3-配置系统">3. 配置系统</h2> <h3 id="31-服务类型配置-llm_typesjson">3.1 服务类型配置 (<code class="language-plaintext highlighter-rouge">llm_types.json</code>)</h3> <h4 id="311-对话类型">3.1.1 对话类型</h4> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"chat"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"test_chat"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"system_prompt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"你是一个AI助手，只能回答是或否。"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"max_tokens"</span><span class="p">:</span><span class="w"> </span><span class="mi">4096</span><span class="p">,</span><span class="w">
      </span><span class="nl">"temperature"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.5</span><span class="p">,</span><span class="w">
      </span><span class="nl">"top_p"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
      </span><span class="nl">"frequency_penalty"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
      </span><span class="nl">"presence_penalty"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"category_or_language_chat"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"system_prompt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"你是一个机器人语义理解模块，需要理解用户的指令，判断用户要找的东西是一个类别(category)还是一个特定描述的对象(language)，直接返回一个可json解包的字典..."</span><span class="p">,</span><span class="w">
      </span><span class="nl">"max_tokens"</span><span class="p">:</span><span class="w"> </span><span class="mi">4096</span><span class="p">,</span><span class="w">
      </span><span class="nl">"temperature"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.2</span><span class="p">,</span><span class="w">
      </span><span class="nl">"top_p"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
      </span><span class="nl">"frequency_penalty"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
      </span><span class="nl">"presence_penalty"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <h4 id="312-推理类型">3.1.2 推理类型</h4> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"reason"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"task_plan_reason"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"system_prompt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"你是机器人任务规划模块，需要结合用户的指令和语义对象列表，直接生成顺序执行的任务计划列表..."</span><span class="p">,</span><span class="w">
      </span><span class="nl">"max_tokens"</span><span class="p">:</span><span class="w"> </span><span class="mi">4096</span><span class="p">,</span><span class="w">
      </span><span class="nl">"temperature"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.2</span><span class="p">,</span><span class="w">
      </span><span class="nl">"top_p"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
      </span><span class="nl">"frequency_penalty"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
      </span><span class="nl">"presence_penalty"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <h3 id="32-ros服务接口-llmchatsrv">3.2 ROS服务接口 (<code class="language-plaintext highlighter-rouge">LLMChat.srv</code>)</h3> <div class="language-protobuf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">#</span> <span class="err">请求参数</span>
<span class="kt">string</span> <span class="n">type</span>      <span class="err">#</span> <span class="err">服务类型</span>
<span class="kt">string</span> <span class="n">content</span>   <span class="err">#</span> <span class="err">输入内容</span>
<span class="o">---</span>
<span class="err">#</span> <span class="err">响应参数</span>
<span class="kt">bool</span> <span class="n">success</span>     <span class="err">#</span> <span class="err">成功标志</span>
<span class="kt">string</span> <span class="n">response</span>  <span class="err">#</span> <span class="err">响应内容</span>
</code></pre></div></div> <h2 id="4-使用示例">4. 使用示例</h2> <h3 id="41-启动llm服务">4.1 启动LLM服务</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 启动LLM节点</span>
roslaunch llm_pkg llm.launch

<span class="c"># 或者通过语义地图启动</span>
roslaunch semantic_map_pkg semantic_map.launch
</code></pre></div></div> <h3 id="42-测试对话服务">4.2 测试对话服务</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 测试基本对话</span>
rosservice call /llm_chat <span class="s2">"type: 'test_chat'
content: '你好'"</span>

<span class="c"># 测试语义理解</span>
rosservice call /llm_chat <span class="s2">"type: 'category_or_language_chat'
content: '要找的对象是table，用户的指令是把桌子上的饮料放到冰箱里'"</span>
</code></pre></div></div> <h3 id="43-测试推理服务">4.3 测试推理服务</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 测试任务规划</span>
rosservice call /llm_reason <span class="s2">"type: 'task_plan_reason'
content: '以下是语义对象列表：[refrigerator, table, apple, human]。用户的指令是：帮我从冰箱里拿一个苹果放桌上'"</span>
</code></pre></div></div> <h3 id="44-python代码调用">4.4 Python代码调用</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">rospy</span>
<span class="kn">from</span> <span class="n">llm_pkg.srv</span> <span class="kn">import</span> <span class="n">LLMChat</span>
<span class="kn">from</span> <span class="n">llm_analyzer.llm_analyzer</span> <span class="kn">import</span> <span class="n">LLMAnalyzer</span>

<span class="c1"># 等待服务
</span><span class="n">rospy</span><span class="p">.</span><span class="nf">wait_for_service</span><span class="p">(</span><span class="sh">"</span><span class="s">llm_chat</span><span class="sh">"</span><span class="p">)</span>
<span class="n">rospy</span><span class="p">.</span><span class="nf">wait_for_service</span><span class="p">(</span><span class="sh">"</span><span class="s">llm_reason</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># 创建客户端
</span><span class="n">llm_chat_client</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">ServiceProxy</span><span class="p">(</span><span class="sh">"</span><span class="s">llm_chat</span><span class="sh">"</span><span class="p">,</span> <span class="n">LLMChat</span><span class="p">)</span>
<span class="n">llm_reason_client</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">ServiceProxy</span><span class="p">(</span><span class="sh">"</span><span class="s">llm_reason</span><span class="sh">"</span><span class="p">,</span> <span class="n">LLMChat</span><span class="p">)</span>

<span class="c1"># 创建分析器
</span><span class="n">llm_analyzer</span> <span class="o">=</span> <span class="nc">LLMAnalyzer</span><span class="p">()</span>

<span class="c1"># 调用对话服务
</span><span class="n">response</span> <span class="o">=</span> <span class="nf">llm_chat_client</span><span class="p">(</span><span class="sh">"</span><span class="s">test_chat</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">你好</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">对话响应: </span><span class="si">{</span><span class="n">response</span><span class="p">.</span><span class="n">response</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># 调用推理服务
</span><span class="n">response</span> <span class="o">=</span> <span class="nf">llm_reason_client</span><span class="p">(</span><span class="sh">"</span><span class="s">task_plan_reason</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">用户指令内容</span><span class="sh">"</span><span class="p">)</span>
<span class="n">task_plans</span> <span class="o">=</span> <span class="n">llm_analyzer</span><span class="p">.</span><span class="nf">analyze</span><span class="p">(</span><span class="sh">"</span><span class="s">task_plan_reason</span><span class="sh">"</span><span class="p">,</span> <span class="n">response</span><span class="p">.</span><span class="n">response</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">任务计划: </span><span class="si">{</span><span class="n">task_plans</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <h2 id="5-工作流程">5. 工作流程</h2> <h3 id="51-完整调用流程">5.1 完整调用流程</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1. 客户端调用ROS服务
   ↓
2. LLMNode接收请求
   ↓
3. 根据type选择配置
   ↓
4. 构建消息列表
   ↓
5. 调用LLM API
   ↓
6. 处理响应内容
   ↓
7. 返回ROS响应
   ↓
8. 客户端使用LLMAnalyzer解析
</code></pre></div></div> <h3 id="52-语义理解流程">5.2 语义理解流程</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>用户指令 → 语义理解服务 → LLM推理 → 结构化输出 → 任务分解
    ↓           ↓           ↓         ↓         ↓
"把苹果放到冰箱里" → category_or_language_chat → {'type':'language', 'object':'apple', 'description':'...'} → 导航+操作任务
</code></pre></div></div> <h3 id="53-任务规划流程">5.3 任务规划流程</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>用户指令 + 语义对象列表 → 任务规划服务 → LLM推理 → 任务计划列表
    ↓                    ↓              ↓         ↓
"帮我拿苹果" + [refrigerator, table, apple] → task_plan_reason → [{'navi':'apple', 'op':'夹取苹果'}]
</code></pre></div></div> <h2 id="6-关键特性">6. 关键特性</h2> <h3 id="61-双模型架构">6.1 双模型架构</h3> <ul> <li><strong>DeepSeek-V2.5</strong>: 用于一般对话和语义理解</li> <li><strong>DeepSeek-R1</strong>: 专门用于推理和任务规划</li> </ul> <h3 id="62-结构化输出">6.2 结构化输出</h3> <ul> <li>使用特殊标签<code class="language-plaintext highlighter-rouge">&lt;ans&gt;</code>和<code class="language-plaintext highlighter-rouge">&lt;think&gt;</code>区分答案和推理</li> <li>支持JSON格式的结构化数据输出</li> <li>提供专门的解析器处理复杂响应</li> </ul> <h3 id="63-配置化设计">6.3 配置化设计</h3> <ul> <li>通过JSON文件配置不同的服务类型</li> <li>支持动态添加新的对话和推理类型</li> <li>参数可调（temperature、max_tokens等）</li> </ul> <h3 id="64-错误处理">6.4 错误处理</h3> <ul> <li>完善的异常处理机制</li> <li>服务调用失败时的降级处理</li> <li>详细的日志输出</li> </ul> <h2 id="7-扩展性">7. 扩展性</h2> <h3 id="71-添加新的对话类型">7.1 添加新的对话类型</h3> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"chat"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"new_chat_type"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"system_prompt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"新的系统提示词"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"max_tokens"</span><span class="p">:</span><span class="w"> </span><span class="mi">4096</span><span class="p">,</span><span class="w">
      </span><span class="nl">"temperature"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.5</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <h3 id="72-添加新的推理类型">7.2 添加新的推理类型</h3> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"reason"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"new_reason_type"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"system_prompt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"新的推理提示词"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"max_tokens"</span><span class="p">:</span><span class="w"> </span><span class="mi">4096</span><span class="p">,</span><span class="w">
      </span><span class="nl">"temperature"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.2</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <h3 id="73-自定义分析器">7.3 自定义分析器</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">analyze</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="nb">type</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
    <span class="k">if</span> <span class="nb">type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">new_type</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">_analyze_new_type</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
    <span class="c1"># ... 其他类型处理
</span></code></pre></div></div> <p>这个llm_pkg模块为YanBot系统提供了强大的语言理解能力，是整个智能决策系统的核心组件。</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   ROS服务接口    │    │   LLM核心类     │    │   AI模型API     │
│                 │    │                 │    │                 │
│ • llm_chat      │◄──►│ • LLM类         │◄──►│ • DeepSeek-V2.5 │
│ • llm_reason    │    │ • LLMNode类     │    │ • DeepSeek-R1   │
│ • 响应解析      │    │ • LLMAnalyzer类 │    │ • SiliconFlow   │
└─────────────────┘    └─────────────────┘    └─────────────────┘
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">LLM</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">model</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">deepseek-ai/DeepSeek-V2.5</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">max_tokens</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">4096</span><span class="p">,</span>
        <span class="n">base_url</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">https://api.siliconflow.cn/v1/</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">api_key</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
    <span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">model</span> <span class="o">=</span> <span class="n">model</span>
        <span class="n">self</span><span class="p">.</span><span class="n">max_tokens</span> <span class="o">=</span> <span class="n">max_tokens</span>
        <span class="n">self</span><span class="p">.</span><span class="n">base_url</span> <span class="o">=</span> <span class="n">base_url</span>
        <span class="n">self</span><span class="p">.</span><span class="n">api_key</span> <span class="o">=</span> <span class="n">api_key</span> <span class="ow">or</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">SILICONFLOW_API_KEY</span><span class="sh">"</span><span class="p">)</span>

        <span class="k">if</span> <span class="ow">not</span> <span class="n">self</span><span class="p">.</span><span class="n">api_key</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sh">"</span><span class="s">未找到API密钥，请设置环境变量 SILICONFLOW_API_KEY</span><span class="sh">"</span><span class="p">)</span>

        <span class="n">self</span><span class="p">.</span><span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">api_key</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">_process_response</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">response</span><span class="p">:</span> <span class="n">Any</span><span class="p">,</span> <span class="n">stream</span><span class="p">:</span> <span class="nb">bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Generator</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="bp">None</span><span class="p">]:</span>
    <span class="k">if</span> <span class="n">stream</span><span class="p">:</span>
        <span class="c1"># 流式响应处理
</span>        <span class="n">first_content</span> <span class="o">=</span> <span class="bp">True</span>
        <span class="n">first_reason</span> <span class="o">=</span> <span class="bp">True</span>
        <span class="k">for</span> <span class="n">chunk</span> <span class="ow">in</span> <span class="n">response</span><span class="p">:</span>
            <span class="n">delta</span> <span class="o">=</span> <span class="n">chunk</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">delta</span>

            <span class="k">if</span> <span class="n">delta</span><span class="p">.</span><span class="n">content</span><span class="p">:</span>
                <span class="n">new_content</span> <span class="o">=</span> <span class="n">delta</span><span class="p">.</span><span class="n">content</span>
                <span class="k">if</span> <span class="n">first_content</span><span class="p">:</span>
                    <span class="k">yield</span> <span class="sh">"</span><span class="se">\n</span><span class="s">&lt;ans&gt;</span><span class="se">\n</span><span class="sh">"</span>
                    <span class="n">first_content</span> <span class="o">=</span> <span class="bp">False</span>
                <span class="k">yield</span> <span class="k">from</span> <span class="n">new_content</span>

            <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">delta</span><span class="p">,</span> <span class="sh">"</span><span class="s">reasoning_content</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">delta</span><span class="p">.</span><span class="n">reasoning_content</span><span class="p">:</span>
                <span class="n">new_reason</span> <span class="o">=</span> <span class="n">delta</span><span class="p">.</span><span class="n">reasoning_content</span>
                <span class="k">if</span> <span class="n">first_reason</span><span class="p">:</span>
                    <span class="k">yield</span> <span class="sh">"</span><span class="se">\n</span><span class="s">&lt;think&gt;</span><span class="se">\n</span><span class="sh">"</span>
                    <span class="n">first_reason</span> <span class="o">=</span> <span class="bp">False</span>
                <span class="k">yield</span> <span class="k">from</span> <span class="n">new_reason</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="c1"># 非流式响应处理
</span>        <span class="n">completion</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>
        <span class="k">if</span> <span class="n">completion</span><span class="p">.</span><span class="n">content</span><span class="p">:</span>
            <span class="k">yield</span> <span class="sa">f</span><span class="sh">"</span><span class="se">\n</span><span class="s">&lt;ans&gt;</span><span class="se">\n</span><span class="si">{</span><span class="n">completion</span><span class="p">.</span><span class="n">content</span><span class="si">}</span><span class="sh">"</span>
        <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">completion</span><span class="p">,</span> <span class="sh">"</span><span class="s">reasoning_content</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">completion</span><span class="p">.</span><span class="n">reasoning_content</span><span class="p">:</span>
            <span class="k">yield</span> <span class="sa">f</span><span class="sh">"</span><span class="se">\n</span><span class="s">&lt;think&gt;</span><span class="se">\n</span><span class="si">{</span><span class="n">completion</span><span class="p">.</span><span class="n">reasoning_content</span><span class="si">}</span><span class="sh">"</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">stream_chat</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">messages</span><span class="p">:</span> <span class="nb">list</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Generator</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="bp">None</span><span class="p">]:</span>
    <span class="sh">"""</span><span class="s">流式对话</span><span class="sh">"""</span>
    <span class="n">response</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
        <span class="n">model</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">,</span>
        <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
        <span class="n">stream</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
        <span class="n">max_tokens</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">max_tokens</span><span class="p">,</span>
        <span class="o">**</span><span class="n">kwargs</span><span class="p">,</span>
    <span class="p">)</span>
    <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">_process_response</span><span class="p">(</span><span class="n">response</span><span class="p">,</span> <span class="n">stream</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">non_stream_chat</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">messages</span><span class="p">:</span> <span class="nb">list</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">非流式对话</span><span class="sh">"""</span>
    <span class="n">response</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
        <span class="n">model</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">,</span>
        <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
        <span class="n">stream</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
        <span class="n">max_tokens</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">max_tokens</span><span class="p">,</span>
        <span class="o">**</span><span class="n">kwargs</span><span class="p">,</span>
    <span class="p">)</span>
    <span class="k">return</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">_process_response</span><span class="p">(</span><span class="n">response</span><span class="p">,</span> <span class="n">stream</span><span class="o">=</span><span class="bp">False</span><span class="p">))</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">LLMNode</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">rospy</span><span class="p">.</span><span class="nf">init_node</span><span class="p">(</span><span class="sh">"</span><span class="s">llm_node</span><span class="sh">"</span><span class="p">)</span>

        <span class="c1"># 初始化两个LLM实例
</span>        <span class="n">self</span><span class="p">.</span><span class="n">chat_llm</span> <span class="o">=</span> <span class="nc">LLM</span><span class="p">(</span><span class="sh">"</span><span class="s">deepseek-ai/DeepSeek-V2.5</span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># 对话模型
</span>        <span class="n">self</span><span class="p">.</span><span class="n">reason_llm</span> <span class="o">=</span> <span class="nc">LLM</span><span class="p">(</span><span class="sh">"</span><span class="s">deepseek-ai/DeepSeek-R1</span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># 推理模型
</span>
        <span class="c1"># 加载配置
</span>        <span class="n">llm_types_path</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nf">get_param</span><span class="p">(</span><span class="sh">"</span><span class="s">~llm_types_path</span><span class="sh">"</span><span class="p">,</span> <span class="n">default_llm_types_path</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">llm_types</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="nf">open</span><span class="p">(</span><span class="n">llm_types_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">))</span>
        <span class="n">self</span><span class="p">.</span><span class="n">chat_types</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">llm_types</span><span class="p">[</span><span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="p">].</span><span class="nf">keys</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">reason_types</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">llm_types</span><span class="p">[</span><span class="sh">"</span><span class="s">reason</span><span class="sh">"</span><span class="p">].</span><span class="nf">keys</span><span class="p">()</span>

        <span class="c1"># 创建ROS服务
</span>        <span class="n">self</span><span class="p">.</span><span class="n">service</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">Service</span><span class="p">(</span><span class="sh">"</span><span class="s">llm_chat</span><span class="sh">"</span><span class="p">,</span> <span class="n">LLMChat</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">handle_llm_chat_request</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">service_reason</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">Service</span><span class="p">(</span><span class="sh">"</span><span class="s">llm_reason</span><span class="sh">"</span><span class="p">,</span> <span class="n">LLMChat</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">handle_llm_reason_request</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">_process_response</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">response</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="p">):</span>
    <span class="k">if</span> <span class="nb">type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="p">:</span>
        <span class="c1"># 对话响应处理
</span>        <span class="n">res</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span>
        <span class="n">res</span> <span class="o">=</span> <span class="n">res</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="s">&lt;ans&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="s">&lt;think&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
        <span class="n">res</span> <span class="o">=</span> <span class="n">res</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
    <span class="k">elif</span> <span class="nb">type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">reason</span><span class="sh">"</span><span class="p">:</span>
        <span class="c1"># 推理响应处理
</span>        <span class="n">res</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span>
        <span class="n">res</span> <span class="o">=</span> <span class="n">res</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
        <span class="c1"># 提取&lt;ans&gt;和&lt;think&gt;标签之间的内容
</span>        <span class="n">pattern</span> <span class="o">=</span> <span class="sa">r</span><span class="sh">"</span><span class="s">&lt;ans&gt;(.*?)&lt;think&gt;</span><span class="sh">"</span>
        <span class="n">matches</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">findall</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">res</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">matches</span><span class="p">:</span>
            <span class="n">res</span> <span class="o">=</span> <span class="n">matches</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">strip</span><span class="p">()</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">rospy</span><span class="p">.</span><span class="nf">logerr</span><span class="p">(</span><span class="sh">"</span><span class="s">Did not find &lt;ans&gt; and &lt;think&gt; tags in the response.</span><span class="sh">"</span><span class="p">)</span>
            <span class="n">res</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="k">return</span> <span class="n">res</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">handle_llm_chat_request</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">req</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">处理对话请求</span><span class="sh">"""</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="nb">type</span> <span class="o">=</span> <span class="n">req</span><span class="p">.</span><span class="nb">type</span>
        <span class="k">if</span> <span class="nb">type</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">chat_types</span><span class="p">:</span>
            <span class="n">rospy</span><span class="p">.</span><span class="nf">logwarn</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">不支持的问答类型: </span><span class="si">{</span><span class="nb">type</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
            <span class="nb">type</span> <span class="o">=</span> <span class="sh">"</span><span class="s">test_chat</span><span class="sh">"</span>

        <span class="c1"># 构建消息
</span>        <span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>
            <span class="p">{</span>
                <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">llm_types</span><span class="p">[</span><span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="p">][</span><span class="nb">type</span><span class="p">][</span><span class="sh">"</span><span class="s">system_prompt</span><span class="sh">"</span><span class="p">],</span>
            <span class="p">},</span>
            <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">req</span><span class="p">.</span><span class="n">content</span><span class="p">},</span>
        <span class="p">]</span>

        <span class="c1"># 调用LLM
</span>        <span class="n">response</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">chat_llm</span><span class="p">.</span><span class="nf">non_stream_chat</span><span class="p">(</span><span class="n">messages</span><span class="p">)</span>
        <span class="n">response</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_process_response</span><span class="p">(</span><span class="n">response</span><span class="p">,</span> <span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="nc">LLMChatResponse</span><span class="p">(</span><span class="n">success</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">response</span><span class="o">=</span><span class="nf">str</span><span class="p">(</span><span class="n">response</span><span class="p">))</span>

    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="n">rospy</span><span class="p">.</span><span class="nf">logerr</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">处理LLM Chat请求时发生错误: </span><span class="si">{</span><span class="nf">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="nc">LLMChatResponse</span><span class="p">(</span><span class="n">success</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">response</span><span class="o">=</span><span class="nf">str</span><span class="p">(</span><span class="n">e</span><span class="p">))</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">LLMAnalyzer</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">analyze</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="nb">type</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">分析LLM响应</span><span class="sh">"""</span>
        <span class="k">if</span> <span class="nb">type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">category_or_language_chat</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">_analyze_category_or_language</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
        <span class="k">elif</span> <span class="nb">type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">task_plan_reason</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">_analyze_task_plan</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="s">failed_to_parse, unsupported type: </span><span class="si">{</span><span class="nb">type</span><span class="si">}</span><span class="sh">"</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">_analyze_category_or_language</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">分析类别或语言描述</span><span class="sh">"""</span>
    <span class="c1"># 找出{}之间的内容
</span>    <span class="n">category_or_language</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">findall</span><span class="p">(</span><span class="sa">r</span><span class="sh">"</span><span class="s">\{(.*?)\}</span><span class="sh">"</span><span class="p">,</span> <span class="n">response</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">category_or_language</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">category_or_language</span> <span class="o">=</span> <span class="n">ast</span><span class="p">.</span><span class="nf">literal_eval</span><span class="p">(</span>
                <span class="sh">"</span><span class="s">{</span><span class="sh">"</span> <span class="o">+</span> <span class="n">category_or_language</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="sh">"</span><span class="s">}</span><span class="sh">"</span>
            <span class="p">)</span>
            <span class="k">return</span> <span class="n">category_or_language</span>  <span class="c1"># dict
</span>        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Failed to parse: </span><span class="si">{</span><span class="nf">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="se">\n</span><span class="s">original: </span><span class="si">{</span><span class="n">response</span><span class="si">}</span><span class="sh">"</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="sh">"</span><span class="s">failed_to_parse, no match</span><span class="sh">"</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">_analyze_task_plan</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">分析任务规划</span><span class="sh">"""</span>
    <span class="c1"># 检查是否包含"not_in_list"
</span>    <span class="k">if</span> <span class="sh">"</span><span class="s">not_in_list</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">response</span><span class="p">.</span><span class="nf">lower</span><span class="p">():</span>
        <span class="k">return</span> <span class="sh">"</span><span class="s">not_in_list</span><span class="sh">"</span>

    <span class="c1"># 找出[]之间的内容
</span>    <span class="n">task_plan_match</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">findall</span><span class="p">(</span><span class="sa">r</span><span class="sh">"</span><span class="s">\[(.*?)\]</span><span class="sh">"</span><span class="p">,</span> <span class="n">response</span><span class="p">,</span> <span class="n">re</span><span class="p">.</span><span class="n">DOTALL</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">task_plan_match</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="c1"># 使用ast.literal_eval解析Python字面量
</span>            <span class="n">task_plans</span> <span class="o">=</span> <span class="n">ast</span><span class="p">.</span><span class="nf">literal_eval</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">[</span><span class="si">{</span><span class="n">task_plan_match</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="si">}</span><span class="s">]</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">task_plans</span>  <span class="c1"># list
</span>        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="c1"># 尝试JSON解析
</span>            <span class="k">try</span><span class="p">:</span>
                <span class="n">modified_response</span> <span class="o">=</span> <span class="n">task_plan_match</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"'"</span><span class="p">,</span> <span class="sh">'"'</span><span class="p">)</span>
                <span class="n">task_plans</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">[</span><span class="si">{</span><span class="n">modified_response</span><span class="si">}</span><span class="s">]</span><span class="sh">"</span><span class="p">)</span>
                <span class="k">return</span> <span class="n">task_plans</span>
            <span class="k">except</span> <span class="n">json</span><span class="p">.</span><span class="n">JSONDecodeError</span><span class="p">:</span>
                <span class="k">return</span> <span class="sh">"</span><span class="s">failed_to_parse, decode error</span><span class="sh">"</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="sh">"</span><span class="s">failed_to_parse, no match</span><span class="sh">"</span>
</code></pre></div></div> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"chat"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"test_chat"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"system_prompt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"你是一个AI助手，只能回答是或否。"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"max_tokens"</span><span class="p">:</span><span class="w"> </span><span class="mi">4096</span><span class="p">,</span><span class="w">
      </span><span class="nl">"temperature"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.5</span><span class="p">,</span><span class="w">
      </span><span class="nl">"top_p"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
      </span><span class="nl">"frequency_penalty"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
      </span><span class="nl">"presence_penalty"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"category_or_language_chat"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"system_prompt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"你是一个机器人语义理解模块，需要理解用户的指令，判断用户要找的东西是一个类别(category)还是一个特定描述的对象(language)，直接返回一个可json解包的字典..."</span><span class="p">,</span><span class="w">
      </span><span class="nl">"max_tokens"</span><span class="p">:</span><span class="w"> </span><span class="mi">4096</span><span class="p">,</span><span class="w">
      </span><span class="nl">"temperature"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.2</span><span class="p">,</span><span class="w">
      </span><span class="nl">"top_p"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
      </span><span class="nl">"frequency_penalty"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
      </span><span class="nl">"presence_penalty"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"reason"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"task_plan_reason"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"system_prompt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"你是机器人任务规划模块，需要结合用户的指令和语义对象列表，直接生成顺序执行的任务计划列表..."</span><span class="p">,</span><span class="w">
      </span><span class="nl">"max_tokens"</span><span class="p">:</span><span class="w"> </span><span class="mi">4096</span><span class="p">,</span><span class="w">
      </span><span class="nl">"temperature"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.2</span><span class="p">,</span><span class="w">
      </span><span class="nl">"top_p"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
      </span><span class="nl">"frequency_penalty"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
      </span><span class="nl">"presence_penalty"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 请求参数
string type      # 服务类型
string content   # 输入内容
---
# 响应参数
bool success     # 成功标志
string response  # 响应内容
</code></pre></div></div> <pre><code class="language-shellscript"># 启动LLM节点
roslaunch llm_pkg llm.launch

# 或者通过语义地图启动
roslaunch semantic_map_pkg semantic_map.launch
</code></pre> <pre><code class="language-shellscript"># 测试基本对话
rosservice call /llm_chat "type: 'test_chat'
content: '你好'"

# 测试语义理解
rosservice call /llm_chat "type: 'category_or_language_chat'
content: '要找的对象是table，用户的指令是把桌子上的饮料放到冰箱里'"
</code></pre> <pre><code class="language-shellscript"># 测试任务规划
rosservice call /llm_reason "type: 'task_plan_reason'
content: '以下是语义对象列表：[refrigerator, table, apple, human]。用户的指令是：帮我从冰箱里拿一个苹果放桌上'"
</code></pre> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">rospy</span>
<span class="kn">from</span> <span class="n">llm_pkg.srv</span> <span class="kn">import</span> <span class="n">LLMChat</span>
<span class="kn">from</span> <span class="n">llm_analyzer.llm_analyzer</span> <span class="kn">import</span> <span class="n">LLMAnalyzer</span>

<span class="c1"># 等待服务
</span><span class="n">rospy</span><span class="p">.</span><span class="nf">wait_for_service</span><span class="p">(</span><span class="sh">"</span><span class="s">llm_chat</span><span class="sh">"</span><span class="p">)</span>
<span class="n">rospy</span><span class="p">.</span><span class="nf">wait_for_service</span><span class="p">(</span><span class="sh">"</span><span class="s">llm_reason</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># 创建客户端
</span><span class="n">llm_chat_client</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">ServiceProxy</span><span class="p">(</span><span class="sh">"</span><span class="s">llm_chat</span><span class="sh">"</span><span class="p">,</span> <span class="n">LLMChat</span><span class="p">)</span>
<span class="n">llm_reason_client</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">ServiceProxy</span><span class="p">(</span><span class="sh">"</span><span class="s">llm_reason</span><span class="sh">"</span><span class="p">,</span> <span class="n">LLMChat</span><span class="p">)</span>

<span class="c1"># 创建分析器
</span><span class="n">llm_analyzer</span> <span class="o">=</span> <span class="nc">LLMAnalyzer</span><span class="p">()</span>

<span class="c1"># 调用对话服务
</span><span class="n">response</span> <span class="o">=</span> <span class="nf">llm_chat_client</span><span class="p">(</span><span class="sh">"</span><span class="s">test_chat</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">你好</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">对话响应: </span><span class="si">{</span><span class="n">response</span><span class="p">.</span><span class="n">response</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># 调用推理服务
</span><span class="n">response</span> <span class="o">=</span> <span class="nf">llm_reason_client</span><span class="p">(</span><span class="sh">"</span><span class="s">task_plan_reason</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">用户指令内容</span><span class="sh">"</span><span class="p">)</span>
<span class="n">task_plans</span> <span class="o">=</span> <span class="n">llm_analyzer</span><span class="p">.</span><span class="nf">analyze</span><span class="p">(</span><span class="sh">"</span><span class="s">task_plan_reason</span><span class="sh">"</span><span class="p">,</span> <span class="n">response</span><span class="p">.</span><span class="n">response</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">任务计划: </span><span class="si">{</span><span class="n">task_plans</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1. 客户端调用ROS服务
   ↓
2. LLMNode接收请求
   ↓
3. 根据type选择配置
   ↓
4. 构建消息列表
   ↓
5. 调用LLM API
   ↓
6. 处理响应内容
   ↓
7. 返回ROS响应
   ↓
8. 客户端使用LLMAnalyzer解析
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>用户指令 → 语义理解服务 → LLM推理 → 结构化输出 → 任务分解
    ↓           ↓           ↓         ↓         ↓
"把苹果放到冰箱里" → category_or_language_chat → {'type':'language', 'object':'apple', 'description':'...'} → 导航+操作任务
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>用户指令 + 语义对象列表 → 任务规划服务 → LLM推理 → 任务计划列表
    ↓                    ↓              ↓         ↓
"帮我拿苹果" + [refrigerator, table, apple] → task_plan_reason → [{'navi':'apple', 'op':'夹取苹果'}]
</code></pre></div></div> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"chat"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"new_chat_type"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"system_prompt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"新的系统提示词"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"max_tokens"</span><span class="p">:</span><span class="w"> </span><span class="mi">4096</span><span class="p">,</span><span class="w">
      </span><span class="nl">"temperature"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.5</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"reason"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"new_reason_type"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"system_prompt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"新的推理提示词"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"max_tokens"</span><span class="p">:</span><span class="w"> </span><span class="mi">4096</span><span class="p">,</span><span class="w">
      </span><span class="nl">"temperature"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.2</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">analyze</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="nb">type</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
    <span class="k">if</span> <span class="nb">type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">new_type</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">_analyze_new_type</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
    <span class="c1"># ... 其他类型处理
</span></code></pre></div></div> <hr/> <p><strong>User</strong></p> <p>详细解释一下 vlm_pkg</p> <hr/> <p><strong>Cursor</strong></p> <p>让我详细分析Brain模块中的vlm_pkg。首先查看相关的代码文件来了解其完整实现。</p> <p>基于我对代码的深入分析，现在我来详细讲解Brain模块中的vlm_pkg：</p> <h1 id="brain模块---vlm_pkg-详细讲解">Brain模块 - vlm_pkg 详细讲解</h1> <h2 id="1-模块概述-1">1. 模块概述</h2> <p><code class="language-plaintext highlighter-rouge">vlm_pkg</code>是YanBot系统的<strong>视觉语言模型模块</strong>，负责处理图像和文本的多模态理解，为机器人提供视觉感知和智能决策支持。</p> <h3 id="11-核心功能-1">1.1 核心功能</h3> <ul> <li><strong>视觉问答</strong> (Visual Question Answering): 理解图像内容并回答相关问题</li> <li><strong>操作导向视觉</strong> (Manipulation-Oriented Vision): 识别适合执行任务的图像区域</li> <li><strong>多模态理解</strong> (Multimodal Understanding): 结合图像和文本进行智能分析</li> </ul> <h3 id="12-架构设计-1">1.2 架构设计</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   ROS服务接口    │    │   VLM核心类     │    │   AI模型API     │
│                 │    │                 │    │                 │
│ • vlm_chat      │◄──►│ • VLM类         │◄──►│ • Qwen2-VL-72B  │
│ • 图像处理      │    │ • VLMNode类     │    │ • SiliconFlow   │
│ • 响应解析      │    │ • VLMAnalyzer类 │    │ • OpenAI兼容    │
└─────────────────┘    └─────────────────┘    └─────────────────┘
</code></pre></div></div> <h2 id="2-核心组件详解-1">2. 核心组件详解</h2> <h3 id="21-vlm类-vlmpy">2.1 VLM类 (<code class="language-plaintext highlighter-rouge">vlm.py</code>)</h3> <p><strong>功能</strong>: 封装视觉语言模型的API调用</p> <p><strong>关键特性</strong>:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">VLM</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">Qwen/Qwen2-VL-72B-Instruct</span><span class="sh">"</span><span class="p">,</span>
                 <span class="n">max_tokens</span><span class="o">=</span><span class="mi">4096</span><span class="p">,</span>
                 <span class="n">base_url</span><span class="o">=</span><span class="sh">"</span><span class="s">https://api.siliconflow.cn/v1</span><span class="sh">"</span><span class="p">):</span>
        <span class="c1"># 使用Qwen2-VL-72B-Instruct模型
</span>        <span class="c1"># 通过SiliconFlow API服务
</span></code></pre></div></div> <p><strong>主要方法</strong>:</p> <ul> <li><code class="language-plaintext highlighter-rouge">stream_chat()</code>: 流式对话，实时返回响应</li> <li><code class="language-plaintext highlighter-rouge">non_stream_chat()</code>: 非流式对话，一次性返回完整响应</li> <li><code class="language-plaintext highlighter-rouge">_process_response()</code>: 处理API响应格式</li> </ul> <h3 id="22-vlmnode类-vlm_nodepy">2.2 VLMNode类 (<code class="language-plaintext highlighter-rouge">vlm_node.py</code>)</h3> <p><strong>功能</strong>: ROS节点，提供视觉语言模型服务</p> <p><strong>服务接口</strong>:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 服务名称: /vlm_chat
# 请求参数:
#   - type: 视觉问答类型
#   - content: 文本内容或问题
#   - image_path: 图像文件路径
</span>
<span class="c1"># 响应参数:
#   - success: 成功标志
#   - response: 响应内容
</span></code></pre></div></div> <p><strong>核心处理流程</strong>:</p> <ol> <li><strong>图像预处理</strong>: 将图像转换为base64编码</li> <li><strong>消息构建</strong>: 构建多模态消息格式</li> <li><strong>模型调用</strong>: 调用VLM模型进行推理</li> <li><strong>响应返回</strong>: 返回处理结果</li> </ol> <h3 id="23-vlmanalyzer类-vlm_analyzerpy">2.3 VLMAnalyzer类 (<code class="language-plaintext highlighter-rouge">vlm_analyzer.py</code>)</h3> <p><strong>功能</strong>: 解析VLM模型的响应结果</p> <p><strong>支持的解析类型</strong>:</p> <ul> <li><code class="language-plaintext highlighter-rouge">manipulation_oriented_vision</code>: 提取操作目标序号</li> <li><code class="language-plaintext highlighter-rouge">test_vision</code>: 通用视觉描述</li> </ul> <h2 id="3-视觉问答类型配置">3. 视觉问答类型配置</h2> <h3 id="31-配置结构-vlm_typesjson">3.1 配置结构 (<code class="language-plaintext highlighter-rouge">vlm_types.json</code>)</h3> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"vision"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"test_vision"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"system_prompt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"你是一个计算机视觉助手，请描述图片中的内容。"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"manipulation_oriented_vision"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"system_prompt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"你是一个家庭服务机器人，我将会给你一张由多个子图拼接而成的图片和一句命令，请你选出最适合机器人去执行命令的子图（一般是家具的正面图），并返回子图的序号（从左到右依次是1，2，3……）。"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <h3 id="32-问答类型说明">3.2 问答类型说明</h3> <h4 id="a-test_vision-测试视觉">A. test_vision (测试视觉)</h4> <ul> <li><strong>用途</strong>: 通用图像描述和内容理解</li> <li><strong>输入</strong>: 图像 + 描述性文本</li> <li><strong>输出</strong>: 图像内容的文字描述</li> </ul> <h4 id="b-manipulation_oriented_vision-操作导向视觉">B. manipulation_oriented_vision (操作导向视觉)</h4> <ul> <li><strong>用途</strong>: 识别适合执行特定任务的图像区域</li> <li><strong>输入</strong>: 拼接图像 + 操作指令</li> <li><strong>输出</strong>: 目标子图的序号</li> <li><strong>应用场景</strong>: 机器人操作目标选择</li> </ul> <h2 id="4-使用示例-1">4. 使用示例</h2> <h3 id="41-启动vlm服务">4.1 启动VLM服务</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 启动VLM节点</span>
roslaunch vlm_pkg vlm.launch

<span class="c"># 或者通过主系统启动</span>
roslaunch cerebellum_pkg main.launch
</code></pre></div></div> <h3 id="42-服务调用示例">4.2 服务调用示例</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">rospy</span>
<span class="kn">from</span> <span class="n">vlm_pkg.srv</span> <span class="kn">import</span> <span class="n">VLMChat</span>

<span class="c1"># 等待服务可用
</span><span class="n">rospy</span><span class="p">.</span><span class="nf">wait_for_service</span><span class="p">(</span><span class="sh">'</span><span class="s">vlm_chat</span><span class="sh">'</span><span class="p">)</span>
<span class="n">vlm_service</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">ServiceProxy</span><span class="p">(</span><span class="sh">'</span><span class="s">vlm_chat</span><span class="sh">'</span><span class="p">,</span> <span class="n">VLMChat</span><span class="p">)</span>

<span class="c1"># 调用服务
</span><span class="n">response</span> <span class="o">=</span> <span class="nf">vlm_service</span><span class="p">(</span>
    <span class="nb">type</span><span class="o">=</span><span class="sh">"</span><span class="s">manipulation_oriented_vision</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">content</span><span class="o">=</span><span class="sh">"</span><span class="s">打开洗衣机</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">image_path</span><span class="o">=</span><span class="sh">"</span><span class="s">/path/to/merged_image.jpg</span><span class="sh">"</span>
<span class="p">)</span>

<span class="k">if</span> <span class="n">response</span><span class="p">.</span><span class="n">success</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">识别结果: </span><span class="si">{</span><span class="n">response</span><span class="p">.</span><span class="n">response</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">识别失败: </span><span class="si">{</span><span class="n">response</span><span class="p">.</span><span class="n">response</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <h2 id="5-技术特点">5. 技术特点</h2> <h3 id="51-多模态处理">5.1 多模态处理</h3> <ul> <li><strong>图像编码</strong>: 支持WebP格式的base64编码</li> <li><strong>文本处理</strong>: 支持中文指令理解</li> <li><strong>消息格式</strong>: 符合OpenAI多模态API标准</li> </ul> <h3 id="52-模型选择">5.2 模型选择</h3> <ul> <li><strong>Qwen2-VL-72B-Instruct</strong>: 强大的视觉语言理解能力</li> <li><strong>SiliconFlow API</strong>: 稳定的云端推理服务</li> <li><strong>OpenAI兼容</strong>: 标准化的API接口</li> </ul> <h3 id="53-错误处理">5.3 错误处理</h3> <ul> <li><strong>图像验证</strong>: 检查文件路径和格式</li> <li><strong>API异常</strong>: 处理网络和模型调用错误</li> <li><strong>响应解析</strong>: 安全的响应格式处理</li> </ul> <h2 id="6-与其他模块的集成">6. 与其他模块的集成</h2> <h3 id="61-与语义地图模块的集成">6.1 与语义地图模块的集成</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 语义地图模块调用VLM进行目标识别
</span><span class="n">vlm_response</span> <span class="o">=</span> <span class="nf">vlm_service</span><span class="p">(</span>
    <span class="nb">type</span><span class="o">=</span><span class="sh">"</span><span class="s">manipulation_oriented_vision</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">content</span><span class="o">=</span><span class="n">user_command</span><span class="p">,</span>
    <span class="n">image_path</span><span class="o">=</span><span class="n">semantic_map_image</span>
<span class="p">)</span>
</code></pre></div></div> <h3 id="62-与导航模块的集成">6.2 与导航模块的集成</h3> <ul> <li>VLM识别目标位置</li> <li>导航模块规划路径</li> <li>协同完成移动任务</li> </ul> <p>这个vlm_pkg模块为YanBot系统提供了强大的视觉理解能力，使机器人能够理解图像内容并做出相应的智能决策。</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   ROS服务接口    │    │   VLM核心类     │    │   AI模型API     │
│                 │    │                 │    │                 │
│ • vlm_chat      │◄──►│ • VLM类         │◄──►│ • Qwen2-VL-72B  │
│ • 图像处理      │    │ • VLMNode类     │    │ • SiliconFlow   │
│ • 响应解析      │    │ • VLMAnalyzer类 │    │ • OpenAI兼容    │
└─────────────────┘    └─────────────────┘    └─────────────────┘
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">VLM</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">Qwen/Qwen2-VL-72B-Instruct</span><span class="sh">"</span><span class="p">,</span>
                 <span class="n">max_tokens</span><span class="o">=</span><span class="mi">4096</span><span class="p">,</span>
                 <span class="n">base_url</span><span class="o">=</span><span class="sh">"</span><span class="s">https://api.siliconflow.cn/v1</span><span class="sh">"</span><span class="p">):</span>
        <span class="c1"># 使用Qwen2-VL-72B-Instruct模型
</span>        <span class="c1"># 通过SiliconFlow API服务
</span></code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 服务名称: /vlm_chat
# 请求参数:
#   - type: 视觉问答类型
#   - content: 文本内容或问题
#   - image_path: 图像文件路径
</span>
<span class="c1"># 响应参数:
#   - success: 成功标志
#   - response: 响应内容
</span></code></pre></div></div> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"vision"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"test_vision"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"system_prompt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"你是一个计算机视觉助手，请描述图片中的内容。"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"manipulation_oriented_vision"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"system_prompt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"你是一个家庭服务机器人，我将会给你一张由多个子图拼接而成的图片和一句命令，请你选出最适合机器人去执行命令的子图（一般是家具的正面图），并返回子图的序号（从左到右依次是1，2，3……）。"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <pre><code class="language-shellscript"># 启动VLM节点
roslaunch vlm_pkg vlm.launch

# 或者通过主系统启动
roslaunch cerebellum_pkg main.launch
</code></pre> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">rospy</span>
<span class="kn">from</span> <span class="n">vlm_pkg.srv</span> <span class="kn">import</span> <span class="n">VLMChat</span>

<span class="c1"># 等待服务可用
</span><span class="n">rospy</span><span class="p">.</span><span class="nf">wait_for_service</span><span class="p">(</span><span class="sh">'</span><span class="s">vlm_chat</span><span class="sh">'</span><span class="p">)</span>
<span class="n">vlm_service</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">ServiceProxy</span><span class="p">(</span><span class="sh">'</span><span class="s">vlm_chat</span><span class="sh">'</span><span class="p">,</span> <span class="n">VLMChat</span><span class="p">)</span>

<span class="c1"># 调用服务
</span><span class="n">response</span> <span class="o">=</span> <span class="nf">vlm_service</span><span class="p">(</span>
    <span class="nb">type</span><span class="o">=</span><span class="sh">"</span><span class="s">manipulation_oriented_vision</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">content</span><span class="o">=</span><span class="sh">"</span><span class="s">打开洗衣机</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">image_path</span><span class="o">=</span><span class="sh">"</span><span class="s">/path/to/merged_image.jpg</span><span class="sh">"</span>
<span class="p">)</span>

<span class="k">if</span> <span class="n">response</span><span class="p">.</span><span class="n">success</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">识别结果: </span><span class="si">{</span><span class="n">response</span><span class="p">.</span><span class="n">response</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">识别失败: </span><span class="si">{</span><span class="n">response</span><span class="p">.</span><span class="n">response</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 语义地图模块调用VLM进行目标识别
</span><span class="n">vlm_response</span> <span class="o">=</span> <span class="nf">vlm_service</span><span class="p">(</span>
    <span class="nb">type</span><span class="o">=</span><span class="sh">"</span><span class="s">manipulation_oriented_vision</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">content</span><span class="o">=</span><span class="n">user_command</span><span class="p">,</span>
    <span class="n">image_path</span><span class="o">=</span><span class="n">semantic_map_image</span>
<span class="p">)</span>
</code></pre></div></div> <hr/> <p><strong>User</strong></p> <p>用一个图为我展示一下vlm_package 的功能，包含输入、输出、服务、消息</p> <hr/> <p><strong>Cursor</strong></p> <p>基于我对vlm_pkg的深入分析，我来为您绘制一个详细的功能架构图：</p> <h2 id="vlm-package-功能架构图">VLM Package 功能架构图</h2> <pre><code class="language-mermaid">graph TB
    %% 输入层
    subgraph "输入层"
        ImageInput[图像输入&lt;br/&gt;image_path] --&gt; ImageProcessor[图像处理器]
        TextInput[文本输入&lt;br/&gt;content] --&gt; MessageBuilder[消息构建器]
        TypeInput[类型输入&lt;br/&gt;type] --&gt; ConfigLoader[配置加载器]
    end

    %% 处理层
    subgraph "处理层"
        ImageProcessor --&gt; |base64编码| ImageEncoder[图像编码器]
        MessageBuilder --&gt; |文本内容| MessageBuilder
        ConfigLoader --&gt; |system_prompt| ConfigLoader

        ImageEncoder --&gt; |base64字符串| MessageBuilder
        MessageBuilder --&gt; |多模态消息| VLMClient[VLM客户端]
    end

    %% VLM核心
    subgraph "VLM核心模块"
        VLMClient --&gt; |API调用| QwenModel[Qwen2-VL-72B&lt;br/&gt;视觉语言模型]
        QwenModel --&gt; |推理结果| ResponseHandler[响应处理器]
    end

    %% 输出层
    subgraph "输出层"
        ResponseHandler --&gt; |原始响应| ResponseAnalyzer[响应分析器]
        ResponseAnalyzer --&gt; |解析结果| FinalOutput[最终输出]
    end

    %% ROS服务接口
    subgraph "ROS服务接口"
        VLMService[VLM服务&lt;br/&gt;/vlm_chat] --&gt; |请求| VLMNode[VLM节点&lt;br/&gt;vlm_node]
        VLMNode --&gt; |响应| VLMService
    end

    %% 配置和类型
    subgraph "配置管理"
        VLMTypes[vlm_types.json] --&gt; |配置加载| ConfigLoader
        VLMTypes --&gt; |test_vision| TestVision[测试视觉&lt;br/&gt;通用描述]
        VLMTypes --&gt; |manipulation_oriented_vision| ManipVision[操作导向视觉&lt;br/&gt;目标选择]
    end

    %% 连接关系
    VLMService -.-&gt;|调用| VLMNode
    VLMNode --&gt; ImageProcessor
    VLMNode --&gt; MessageBuilder
    VLMNode --&gt; ConfigLoader
    VLMNode --&gt; ResponseAnalyzer
    ResponseAnalyzer --&gt; FinalOutput

    %% 样式定义
    classDef inputStyle fill:#e1f5fe,stroke:#01579b,stroke-width:2px
    classDef processStyle fill:#f3e5f5,stroke:#4a148c,stroke-width:2px
    classDef coreStyle fill:#fff3e0,stroke:#e65100,stroke-width:2px
    classDef outputStyle fill:#e8f5e8,stroke:#1b5e20,stroke-width:2px
    classDef serviceStyle fill:#fce4ec,stroke:#880e4f,stroke-width:2px
    classDef configStyle fill:#f1f8e9,stroke:#33691e,stroke-width:2px

    %% 应用样式
    class ImageInput,TextInput,TypeInput inputStyle
    class ImageProcessor,MessageBuilder,ConfigLoader,ImageEncoder,VLMClient,ResponseHandler,ResponseAnalyzer processStyle
    class QwenModel coreStyle
    class FinalOutput outputStyle
    class VLMService,VLMNode serviceStyle
    class VLMTypes,TestVision,ManipVision configStyle
</code></pre> <h2 id="详细功能说明">详细功能说明</h2> <h3 id="1-输入层">1. 输入层</h3> <ul> <li><strong>图像输入</strong>: 支持多种图像格式，转换为base64编码</li> <li><strong>文本输入</strong>: 用户指令或问题描述</li> <li><strong>类型输入</strong>: 指定视觉问答类型（test_vision/manipulation_oriented_vision）</li> </ul> <h3 id="2-处理层">2. 处理层</h3> <ul> <li><strong>图像编码器</strong>: 将图像转换为WebP格式的base64字符串</li> <li><strong>消息构建器</strong>: 构建符合OpenAI多模态API的消息格式</li> <li><strong>配置加载器</strong>: 根据类型加载相应的system_prompt</li> </ul> <h3 id="3-vlm核心模块">3. VLM核心模块</h3> <ul> <li><strong>Qwen2-VL-72B模型</strong>: 强大的视觉语言理解能力</li> <li><strong>响应处理器</strong>: 处理模型返回的推理结果</li> </ul> <h3 id="4-输出层">4. 输出层</h3> <ul> <li><strong>响应分析器</strong>: 根据不同类型解析响应内容</li> <li><strong>最终输出</strong>: 结构化的识别结果</li> </ul> <h3 id="5-ros服务接口">5. ROS服务接口</h3> <ul> <li><strong>服务名称</strong>: <code class="language-plaintext highlighter-rouge">/vlm_chat</code></li> <li><strong>请求格式</strong>: <code class="language-plaintext highlighter-rouge">VLMChat.srv</code></li> <li><strong>响应格式</strong>: 包含success标志和response内容</li> </ul> <h3 id="6-配置管理">6. 配置管理</h3> <ul> <li><strong>test_vision</strong>: 通用图像描述功能</li> <li><strong>manipulation_oriented_vision</strong>: 操作导向的目标选择功能</li> </ul> <p>这个架构图展示了vlm_pkg从输入到输出的完整处理流程，以及各个组件之间的交互关系。</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>graph TB
    %% 输入层
    subgraph "输入层"
        ImageInput[图像输入&lt;br/&gt;image_path] --&gt; ImageProcessor[图像处理器]
        TextInput[文本输入&lt;br/&gt;content] --&gt; MessageBuilder[消息构建器]
        TypeInput[类型输入&lt;br/&gt;type] --&gt; ConfigLoader[配置加载器]
    end

    %% 处理层
    subgraph "处理层"
        ImageProcessor --&gt; |base64编码| ImageEncoder[图像编码器]
        MessageBuilder --&gt; |文本内容| MessageBuilder
        ConfigLoader --&gt; |system_prompt| ConfigLoader

        ImageEncoder --&gt; |base64字符串| MessageBuilder
        MessageBuilder --&gt; |多模态消息| VLMClient[VLM客户端]
    end

    %% VLM核心
    subgraph "VLM核心模块"
        VLMClient --&gt; |API调用| QwenModel[Qwen2-VL-72B&lt;br/&gt;视觉语言模型]
        QwenModel --&gt; |推理结果| ResponseHandler[响应处理器]
    end

    %% 输出层
    subgraph "输出层"
        ResponseHandler --&gt; |原始响应| ResponseAnalyzer[响应分析器]
        ResponseAnalyzer --&gt; |解析结果| FinalOutput[最终输出]
    end

    %% ROS服务接口
    subgraph "ROS服务接口"
        VLMService[VLM服务&lt;br/&gt;/vlm_chat] --&gt; |请求| VLMNode[VLM节点&lt;br/&gt;vlm_node]
        VLMNode --&gt; |响应| VLMService
    end

    %% 配置和类型
    subgraph "配置管理"
        VLMTypes[vlm_types.json] --&gt; |配置加载| ConfigLoader
        VLMTypes --&gt; |test_vision| TestVision[测试视觉&lt;br/&gt;通用描述]
        VLMTypes --&gt; |manipulation_oriented_vision| ManipVision[操作导向视觉&lt;br/&gt;目标选择]
    end

    %% 连接关系
    VLMService -.-&gt;|调用| VLMNode
    VLMNode --&gt; ImageProcessor
    VLMNode --&gt; MessageBuilder
    VLMNode --&gt; ConfigLoader
    VLMNode --&gt; ResponseAnalyzer
    ResponseAnalyzer --&gt; FinalOutput

    %% 样式定义
    classDef inputStyle fill:#e1f5fe,stroke:#01579b,stroke-width:2px
    classDef processStyle fill:#f3e5f5,stroke:#4a148c,stroke-width:2px
    classDef coreStyle fill:#fff3e0,stroke:#e65100,stroke-width:2px
    classDef outputStyle fill:#e8f5e8,stroke:#1b5e20,stroke-width:2px
    classDef serviceStyle fill:#fce4ec,stroke:#880e4f,stroke-width:2px
    classDef configStyle fill:#f1f8e9,stroke:#33691e,stroke-width:2px

    %% 应用样式
    class ImageInput,TextInput,TypeInput inputStyle
    class ImageProcessor,MessageBuilder,ConfigLoader,ImageEncoder,VLMClient,ResponseHandler,ResponseAnalyzer processStyle
    class QwenModel coreStyle
    class FinalOutput outputStyle
    class VLMService,VLMNode serviceStyle
    class VLMTypes,TestVision,ManipVision configStyle
</code></pre></div></div> <hr/> <p><strong>User</strong></p> <p>请详细解释一下 Cerebellum 中的 cerebellum_pkg 部分</p> <hr/> <p><strong>Cursor</strong></p> <p>让我详细分析Cerebellum模块中的cerebellum_pkg部分。首先查看相关的代码文件来了解其完整实现。</p> <p>基于我对代码的深入分析，现在我来详细讲解Cerebellum模块中的cerebellum_pkg：</p> <h1 id="cerebellum模块---cerebellum_pkg-详细讲解">Cerebellum模块 - cerebellum_pkg 详细讲解</h1> <h2 id="1-模块概述-2">1. 模块概述</h2> <p><code class="language-plaintext highlighter-rouge">cerebellum_pkg</code>是YanBot系统的<strong>核心控制包</strong>，负责协调和管理整个机器人的各个功能模块，相当于机器人的”小脑”，负责执行控制和任务协调。</p> <h3 id="11-核心功能-2">1.1 核心功能</h3> <ul> <li><strong>系统启动管理</strong>: 统一启动各个子系统</li> <li><strong>语音交互测试</strong>: 完整的语音交互流程测试</li> <li><strong>语义地图系统测试</strong>: 语义理解和导航测试</li> <li><strong>地图保存</strong>: 自动保存SLAM建图结果</li> </ul> <h3 id="12-架构设计-2">1.2 架构设计</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   主控制系统    │    │   测试节点       │    │   工具节点      │
│                 │    │                 │    │                 │
│ • main.launch   │    │ • test_interact │    │ • map_saver     │
│ • 参数管理      │    │ • semantic_test │    │ • 系统监控      │
│ • 模块协调      │    │ • 功能验证      │    │ • 日志记录      │
└─────────────────┘    └─────────────────┘    └─────────────────┘
</code></pre></div></div> <h2 id="2-核心组件详解-2">2. 核心组件详解</h2> <h3 id="21-主控制系统-mainlaunch">2.1 主控制系统 (<code class="language-plaintext highlighter-rouge">main.launch</code>)</h3> <p><strong>功能</strong>: 系统的主入口，负责启动所有核心模块</p> <p><strong>启动的模块</strong>:</p> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- 1. RViz可视化 --&gt;</span>
<span class="nt">&lt;group</span> <span class="na">if=</span><span class="s">"$(arg main/use_rviz)"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;node</span> <span class="na">pkg=</span><span class="s">"rviz"</span> <span class="na">type=</span><span class="s">"rviz"</span> <span class="na">name=</span><span class="s">"rviz"</span>
          <span class="na">args=</span><span class="s">"-d $(find cerebellum_pkg)/rviz/main.rviz"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/group&gt;</span>

<span class="c">&lt;!-- 2. 导航系统 --&gt;</span>
<span class="nt">&lt;group</span> <span class="na">if=</span><span class="s">"$(eval arg('main/navi_func') == '2D')"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;include</span> <span class="na">file=</span><span class="s">"$(find turn_on_wheeltec_robot)/launch/navigation.launch"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"map_file"</span> <span class="na">value=</span><span class="s">"$(arg main/2D_Navi/map_file)"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/include&gt;</span>
<span class="nt">&lt;/group&gt;</span>

<span class="c">&lt;!-- 3. RealSense相机 --&gt;</span>
<span class="nt">&lt;include</span> <span class="na">file=</span><span class="s">"$(find realsense2_camera)/launch/rs_camera.launch"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"align_depth"</span> <span class="na">value=</span><span class="s">"$(arg main/rs_camera/align_depth)"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/include&gt;</span>

<span class="c">&lt;!-- 4. 语义地图系统 --&gt;</span>
<span class="nt">&lt;group</span> <span class="na">if=</span><span class="s">"$(eval arg('main/semantic_map/semantic_map_mode') == 'simple')"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;include</span> <span class="na">file=</span><span class="s">"$(find semantic_map_pkg)/launch/semantic_map.launch"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"semantic_map/generator/det_seg_mode"</span>
             <span class="na">value=</span><span class="s">"$(arg main/semantic_map/det_seg_mode)"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/include&gt;</span>
<span class="nt">&lt;/group&gt;</span>
</code></pre></div></div> <p><strong>关键参数</strong>:</p> <ul> <li><code class="language-plaintext highlighter-rouge">main/use_rviz</code>: 是否启动RViz可视化</li> <li><code class="language-plaintext highlighter-rouge">main/navi_func</code>: 导航功能选择 (2D/3D)</li> <li><code class="language-plaintext highlighter-rouge">main/semantic_map/semantic_map_mode</code>: 语义地图模式 (simple/distribute)</li> <li><code class="language-plaintext highlighter-rouge">main/semantic_map/det_seg_mode</code>: 检测分割模式 (yoesam/gsam)</li> </ul> <h3 id="22-语音交互测试系统">2.2 语音交互测试系统</h3> <h4 id="a-交互启动文件-test_interactlaunch">A. 交互启动文件 (<code class="language-plaintext highlighter-rouge">test_interact.launch</code>)</h4> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- 依赖：interact (wakeup, stt, tts) --&gt;</span>
<span class="nt">&lt;include</span> <span class="na">file=</span><span class="s">"$(find cerebellum_pkg)/launch/include/interact.launch"</span><span class="nt">/&gt;</span>

<span class="c">&lt;!-- 主交互测试节点 --&gt;</span>
<span class="nt">&lt;node</span> <span class="na">name=</span><span class="s">"test_interact_node"</span>
      <span class="na">pkg=</span><span class="s">"cerebellum_pkg"</span>
      <span class="na">type=</span><span class="s">"test_interact_node.py"</span>
      <span class="na">launch-prefix=</span><span class="s">"$(arg interact_venv)"</span>
      <span class="na">output=</span><span class="s">"screen"</span>
      <span class="na">required=</span><span class="s">"true"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"default_stt_wav_path"</span> <span class="na">type=</span><span class="s">"str"</span>
         <span class="na">value=</span><span class="s">"$(env YANBOT_WS)/last_heard_audios/stt.wav"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/node&gt;</span>
</code></pre></div></div> <h4 id="b-交互包含文件-interactlaunch">B. 交互包含文件 (<code class="language-plaintext highlighter-rouge">interact.launch</code>)</h4> <p>启动三个核心语音服务：</p> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- 1. 唤醒词检测节点 --&gt;</span>
<span class="nt">&lt;node</span> <span class="na">name=</span><span class="s">"wakeup_node"</span> <span class="na">pkg=</span><span class="s">"wakeup_pkg"</span> <span class="na">type=</span><span class="s">"wakeup_node.py"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"asr_model_dir"</span> <span class="na">type=</span><span class="s">"str"</span> <span class="na">value=</span><span class="s">"iic/SenseVoiceSmall"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"similar_threshold"</span> <span class="na">type=</span><span class="s">"double"</span> <span class="na">value=</span><span class="s">"0.8"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/node&gt;</span>

<span class="c">&lt;!-- 2. 语音识别服务(STT) --&gt;</span>
<span class="nt">&lt;node</span> <span class="na">name=</span><span class="s">"stt_node"</span> <span class="na">pkg=</span><span class="s">"stt_pkg"</span> <span class="na">type=</span><span class="s">"stt_node.py"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"asr_model_dir"</span> <span class="na">type=</span><span class="s">"str"</span> <span class="na">value=</span><span class="s">"iic/SenseVoiceSmall"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/node&gt;</span>

<span class="c">&lt;!-- 3. 语音合成服务(TTS) --&gt;</span>
<span class="nt">&lt;node</span> <span class="na">name=</span><span class="s">"tts_node"</span> <span class="na">pkg=</span><span class="s">"tts_pkg"</span> <span class="na">type=</span><span class="s">"tts_node.py"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"temperature"</span> <span class="na">type=</span><span class="s">"double"</span> <span class="na">value=</span><span class="s">"0.5"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"top_p"</span> <span class="na">type=</span><span class="s">"double"</span> <span class="na">value=</span><span class="s">"0.7"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/node&gt;</span>
</code></pre></div></div> <h4 id="c-交互测试节点-test_interact_nodepy">C. 交互测试节点 (<code class="language-plaintext highlighter-rouge">test_interact_node.py</code>)</h4> <p><strong>核心功能</strong>:</p> <ol> <li><strong>唤醒检测</strong>: 监听唤醒话题，检测用户唤醒</li> <li><strong>语音录制</strong>: 录制用户语音指令</li> <li><strong>语音识别</strong>: 调用STT服务进行语音转文字</li> <li><strong>语音合成</strong>: 调用TTS服务进行文字转语音</li> <li><strong>音频播放</strong>: 播放合成的语音响应</li> </ol> <p><strong>工作流程</strong>:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">wakeup_callback</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">msg</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">唤醒消息回调处理</span><span class="sh">"""</span>
    <span class="k">if</span> <span class="n">msg</span><span class="p">.</span><span class="n">wakeup</span><span class="p">:</span>
        <span class="c1"># 1. 关闭语音唤醒功能
</span>        <span class="n">self</span><span class="p">.</span><span class="nf">wakeup_ctrl</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
        <span class="c1"># 2. 开始录制指令
</span>        <span class="n">self</span><span class="p">.</span><span class="nf">start_recording</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">stop_recording</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">event</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">停止并处理录音</span><span class="sh">"""</span>
    <span class="c1"># 1. 保存录音文件
</span>    <span class="n">sf</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">save_path</span><span class="p">,</span> <span class="n">audio_data</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">sample_rate</span><span class="p">)</span>
    <span class="c1"># 2. 调用STT服务
</span>    <span class="n">stt_result</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">handle_stt</span><span class="p">()</span>
    <span class="c1"># 3. 调用TTS服务
</span>    <span class="n">tts_result</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">handle_tts</span><span class="p">(</span><span class="n">stt_result</span><span class="p">[</span><span class="sh">"</span><span class="s">asr_result</span><span class="sh">"</span><span class="p">])</span>
    <span class="c1"># 4. 重新启用唤醒功能
</span>    <span class="n">self</span><span class="p">.</span><span class="nf">wakeup_ctrl</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div> <h3 id="23-语义地图系统测试-test_semantic_map_sys_nodepy">2.3 语义地图系统测试 (<code class="language-plaintext highlighter-rouge">test_semantic_map_sys_node.py</code>)</h3> <p><strong>功能</strong>: 测试语义理解和导航系统的集成</p> <p><strong>核心组件</strong>:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">SemanticMapSysTester</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="c1"># 1. LLM推理服务客户端
</span>        <span class="n">self</span><span class="p">.</span><span class="n">llm_reason_client</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">ServiceProxy</span><span class="p">(</span><span class="sh">"</span><span class="s">llm_reason</span><span class="sh">"</span><span class="p">,</span> <span class="n">LLMChat</span><span class="p">)</span>

        <span class="c1"># 2. 语义地图Guide服务客户端
</span>        <span class="n">self</span><span class="p">.</span><span class="n">guide_client</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">ServiceProxy</span><span class="p">(</span><span class="sh">"</span><span class="s">semantic_map_guide</span><span class="sh">"</span><span class="p">,</span> <span class="n">Guide</span><span class="p">)</span>

        <span class="c1"># 3. 导航action客户端
</span>        <span class="n">self</span><span class="p">.</span><span class="n">move_base_client</span> <span class="o">=</span> <span class="n">actionlib</span><span class="p">.</span><span class="nc">SimpleActionClient</span><span class="p">(</span><span class="sh">"</span><span class="s">move_base</span><span class="sh">"</span><span class="p">,</span> <span class="n">MoveBaseAction</span><span class="p">)</span>

        <span class="c1"># 4. 可视化发布器
</span>        <span class="n">self</span><span class="p">.</span><span class="n">marker_pub</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">Publisher</span><span class="p">(</span><span class="sh">"</span><span class="s">/emo_navi_marker</span><span class="sh">"</span><span class="p">,</span> <span class="n">Marker</span><span class="p">,</span> <span class="n">queue_size</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div></div> <p><strong>任务执行流程</strong>:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">execute_tasks</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">cmd</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">执行任务</span><span class="sh">"""</span>
    <span class="c1"># 1. 获取任务规划列表
</span>    <span class="n">content</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">以下是语义对象列表：</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">semantic_categories</span><span class="si">}</span><span class="s">。用户的指令是：</span><span class="si">{</span><span class="n">cmd</span><span class="si">}</span><span class="sh">"</span>
    <span class="n">llm_reason_res</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">ask_llm_reason</span><span class="p">(</span><span class="sh">"</span><span class="s">task_plan_reason</span><span class="sh">"</span><span class="p">,</span> <span class="n">content</span><span class="p">)</span>
    <span class="n">task_plans</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">llm_analyzer</span><span class="p">.</span><span class="nf">analyze</span><span class="p">(</span><span class="sh">"</span><span class="s">task_plan_reason</span><span class="sh">"</span><span class="p">,</span> <span class="n">llm_reason_res</span><span class="p">.</span><span class="n">response</span><span class="p">)</span>

    <span class="c1"># 2. 执行每个任务规划
</span>    <span class="k">for</span> <span class="n">task_plan</span> <span class="ow">in</span> <span class="n">task_plans</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">execute_task_plan</span><span class="p">(</span><span class="n">task_plan</span><span class="p">,</span> <span class="n">cmd</span><span class="p">)</span>
</code></pre></div></div> <h3 id="24-地图保存节点-first_mapping_saver_nodepy">2.4 地图保存节点 (<code class="language-plaintext highlighter-rouge">first_mapping_saver_node.py</code>)</h3> <p><strong>功能</strong>: 在系统关闭时自动保存SLAM地图</p> <p><strong>实现机制</strong>:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">signal_handler</span><span class="p">(</span><span class="n">sig</span><span class="p">,</span> <span class="n">frame</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">信号处理器，在系统关闭时保存地图</span><span class="sh">"""</span>
    <span class="n">map_path</span> <span class="o">=</span> <span class="sh">"</span><span class="s">/home/yutian/YanBot/src/Cerebellum/wheel_dir/wheeltec_noetic_src/turn_on_wheeltec_robot/map/WHEELTEC</span><span class="sh">"</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="c1"># 运行map_saver命令保存地图
</span>        <span class="n">subprocess</span><span class="p">.</span><span class="nf">call</span><span class="p">([</span><span class="sh">"</span><span class="s">rosrun</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">map_server</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">map_saver</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">-f</span><span class="sh">"</span><span class="p">,</span> <span class="n">map_path</span><span class="p">])</span>
        <span class="n">rospy</span><span class="p">.</span><span class="nf">loginfo</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Map saved successfully to </span><span class="si">{</span><span class="n">map_path</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="n">rospy</span><span class="p">.</span><span class="nf">logerr</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Failed to save map: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <h2 id="3-系统集成特点">3. 系统集成特点</h2> <h3 id="31-模块化设计">3.1 模块化设计</h3> <ul> <li><strong>独立启动</strong>: 每个功能模块可以独立启动和测试</li> <li><strong>参数配置</strong>: 通过launch文件参数灵活配置</li> <li><strong>环境隔离</strong>: 不同模块使用不同的conda环境</li> </ul> <h3 id="32-服务协调">3.2 服务协调</h3> <ul> <li><strong>服务依赖</strong>: 确保服务按正确顺序启动</li> <li><strong>错误处理</strong>: 完善的异常处理和日志记录</li> <li><strong>状态监控</strong>: 实时监控各个模块的运行状态</li> </ul> <h3 id="33-测试验证">3.3 测试验证</h3> <ul> <li><strong>功能测试</strong>: 提供完整的语音交互测试</li> <li><strong>集成测试</strong>: 语义地图和导航系统集成测试</li> <li><strong>性能监控</strong>: 实时监控系统性能指标</li> </ul> <h2 id="4-使用方式">4. 使用方式</h2> <h3 id="41-完整系统启动">4.1 完整系统启动</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 启动完整系统</span>
roslaunch cerebellum_pkg main.launch

<span class="c"># 自定义参数启动</span>
roslaunch cerebellum_pkg main.launch main/use_rviz:<span class="o">=</span><span class="nb">false </span>main/navi_func:<span class="o">=</span>2D
</code></pre></div></div> <h3 id="42-语音交互测试">4.2 语音交互测试</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 启动语音交互测试</span>
roslaunch cerebellum_pkg test_interact.launch
</code></pre></div></div> <h3 id="43-语义地图测试">4.3 语义地图测试</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 启动语义地图系统测试</span>
rosrun cerebellum_pkg test_semantic_map_sys_node.py
</code></pre></div></div> <p>cerebellum_pkg作为YanBot系统的核心控制包，承担着协调各个功能模块、提供测试验证、管理系统启动等重要职责，是整个机器人系统的”大脑中枢”。</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   主控制系统    │    │   测试节点       │    │   工具节点      │
│                 │    │                 │    │                 │
│ • main.launch   │    │ • test_interact │    │ • map_saver     │
│ • 参数管理      │    │ • semantic_test │    │ • 系统监控      │
│ • 模块协调      │    │ • 功能验证      │    │ • 日志记录      │
└─────────────────┘    └─────────────────┘    └─────────────────┘
</code></pre></div></div> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- 1. RViz可视化 --&gt;</span>
<span class="nt">&lt;group</span> <span class="na">if=</span><span class="s">"$(arg main/use_rviz)"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;node</span> <span class="na">pkg=</span><span class="s">"rviz"</span> <span class="na">type=</span><span class="s">"rviz"</span> <span class="na">name=</span><span class="s">"rviz"</span>
          <span class="na">args=</span><span class="s">"-d $(find cerebellum_pkg)/rviz/main.rviz"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/group&gt;</span>

<span class="c">&lt;!-- 2. 导航系统 --&gt;</span>
<span class="nt">&lt;group</span> <span class="na">if=</span><span class="s">"$(eval arg('main/navi_func') == '2D')"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;include</span> <span class="na">file=</span><span class="s">"$(find turn_on_wheeltec_robot)/launch/navigation.launch"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"map_file"</span> <span class="na">value=</span><span class="s">"$(arg main/2D_Navi/map_file)"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/include&gt;</span>
<span class="nt">&lt;/group&gt;</span>

<span class="c">&lt;!-- 3. RealSense相机 --&gt;</span>
<span class="nt">&lt;include</span> <span class="na">file=</span><span class="s">"$(find realsense2_camera)/launch/rs_camera.launch"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"align_depth"</span> <span class="na">value=</span><span class="s">"$(arg main/rs_camera/align_depth)"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/include&gt;</span>

<span class="c">&lt;!-- 4. 语义地图系统 --&gt;</span>
<span class="nt">&lt;group</span> <span class="na">if=</span><span class="s">"$(eval arg('main/semantic_map/semantic_map_mode') == 'simple')"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;include</span> <span class="na">file=</span><span class="s">"$(find semantic_map_pkg)/launch/semantic_map.launch"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"semantic_map/generator/det_seg_mode"</span>
             <span class="na">value=</span><span class="s">"$(arg main/semantic_map/det_seg_mode)"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/include&gt;</span>
<span class="nt">&lt;/group&gt;</span>
</code></pre></div></div> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- 依赖：interact (wakeup, stt, tts) --&gt;</span>
<span class="nt">&lt;include</span> <span class="na">file=</span><span class="s">"$(find cerebellum_pkg)/launch/include/interact.launch"</span><span class="nt">/&gt;</span>

<span class="c">&lt;!-- 主交互测试节点 --&gt;</span>
<span class="nt">&lt;node</span> <span class="na">name=</span><span class="s">"test_interact_node"</span>
      <span class="na">pkg=</span><span class="s">"cerebellum_pkg"</span>
      <span class="na">type=</span><span class="s">"test_interact_node.py"</span>
      <span class="na">launch-prefix=</span><span class="s">"$(arg interact_venv)"</span>
      <span class="na">output=</span><span class="s">"screen"</span>
      <span class="na">required=</span><span class="s">"true"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"default_stt_wav_path"</span> <span class="na">type=</span><span class="s">"str"</span>
         <span class="na">value=</span><span class="s">"$(env YANBOT_WS)/last_heard_audios/stt.wav"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/node&gt;</span>
</code></pre></div></div> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- 1. 唤醒词检测节点 --&gt;</span>
<span class="nt">&lt;node</span> <span class="na">name=</span><span class="s">"wakeup_node"</span> <span class="na">pkg=</span><span class="s">"wakeup_pkg"</span> <span class="na">type=</span><span class="s">"wakeup_node.py"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"asr_model_dir"</span> <span class="na">type=</span><span class="s">"str"</span> <span class="na">value=</span><span class="s">"iic/SenseVoiceSmall"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"similar_threshold"</span> <span class="na">type=</span><span class="s">"double"</span> <span class="na">value=</span><span class="s">"0.8"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/node&gt;</span>

<span class="c">&lt;!-- 2. 语音识别服务(STT) --&gt;</span>
<span class="nt">&lt;node</span> <span class="na">name=</span><span class="s">"stt_node"</span> <span class="na">pkg=</span><span class="s">"stt_pkg"</span> <span class="na">type=</span><span class="s">"stt_node.py"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"asr_model_dir"</span> <span class="na">type=</span><span class="s">"str"</span> <span class="na">value=</span><span class="s">"iic/SenseVoiceSmall"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/node&gt;</span>

<span class="c">&lt;!-- 3. 语音合成服务(TTS) --&gt;</span>
<span class="nt">&lt;node</span> <span class="na">name=</span><span class="s">"tts_node"</span> <span class="na">pkg=</span><span class="s">"tts_pkg"</span> <span class="na">type=</span><span class="s">"tts_node.py"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"temperature"</span> <span class="na">type=</span><span class="s">"double"</span> <span class="na">value=</span><span class="s">"0.5"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"top_p"</span> <span class="na">type=</span><span class="s">"double"</span> <span class="na">value=</span><span class="s">"0.7"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/node&gt;</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">wakeup_callback</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">msg</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">唤醒消息回调处理</span><span class="sh">"""</span>
    <span class="k">if</span> <span class="n">msg</span><span class="p">.</span><span class="n">wakeup</span><span class="p">:</span>
        <span class="c1"># 1. 关闭语音唤醒功能
</span>        <span class="n">self</span><span class="p">.</span><span class="nf">wakeup_ctrl</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
        <span class="c1"># 2. 开始录制指令
</span>        <span class="n">self</span><span class="p">.</span><span class="nf">start_recording</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">stop_recording</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">event</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">停止并处理录音</span><span class="sh">"""</span>
    <span class="c1"># 1. 保存录音文件
</span>    <span class="n">sf</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">save_path</span><span class="p">,</span> <span class="n">audio_data</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">sample_rate</span><span class="p">)</span>
    <span class="c1"># 2. 调用STT服务
</span>    <span class="n">stt_result</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">handle_stt</span><span class="p">()</span>
    <span class="c1"># 3. 调用TTS服务
</span>    <span class="n">tts_result</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">handle_tts</span><span class="p">(</span><span class="n">stt_result</span><span class="p">[</span><span class="sh">"</span><span class="s">asr_result</span><span class="sh">"</span><span class="p">])</span>
    <span class="c1"># 4. 重新启用唤醒功能
</span>    <span class="n">self</span><span class="p">.</span><span class="nf">wakeup_ctrl</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">SemanticMapSysTester</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="c1"># 1. LLM推理服务客户端
</span>        <span class="n">self</span><span class="p">.</span><span class="n">llm_reason_client</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">ServiceProxy</span><span class="p">(</span><span class="sh">"</span><span class="s">llm_reason</span><span class="sh">"</span><span class="p">,</span> <span class="n">LLMChat</span><span class="p">)</span>

        <span class="c1"># 2. 语义地图Guide服务客户端
</span>        <span class="n">self</span><span class="p">.</span><span class="n">guide_client</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">ServiceProxy</span><span class="p">(</span><span class="sh">"</span><span class="s">semantic_map_guide</span><span class="sh">"</span><span class="p">,</span> <span class="n">Guide</span><span class="p">)</span>

        <span class="c1"># 3. 导航action客户端
</span>        <span class="n">self</span><span class="p">.</span><span class="n">move_base_client</span> <span class="o">=</span> <span class="n">actionlib</span><span class="p">.</span><span class="nc">SimpleActionClient</span><span class="p">(</span><span class="sh">"</span><span class="s">move_base</span><span class="sh">"</span><span class="p">,</span> <span class="n">MoveBaseAction</span><span class="p">)</span>

        <span class="c1"># 4. 可视化发布器
</span>        <span class="n">self</span><span class="p">.</span><span class="n">marker_pub</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">Publisher</span><span class="p">(</span><span class="sh">"</span><span class="s">/emo_navi_marker</span><span class="sh">"</span><span class="p">,</span> <span class="n">Marker</span><span class="p">,</span> <span class="n">queue_size</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">execute_tasks</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">cmd</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">执行任务</span><span class="sh">"""</span>
    <span class="c1"># 1. 获取任务规划列表
</span>    <span class="n">content</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">以下是语义对象列表：</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">semantic_categories</span><span class="si">}</span><span class="s">。用户的指令是：</span><span class="si">{</span><span class="n">cmd</span><span class="si">}</span><span class="sh">"</span>
    <span class="n">llm_reason_res</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">ask_llm_reason</span><span class="p">(</span><span class="sh">"</span><span class="s">task_plan_reason</span><span class="sh">"</span><span class="p">,</span> <span class="n">content</span><span class="p">)</span>
    <span class="n">task_plans</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">llm_analyzer</span><span class="p">.</span><span class="nf">analyze</span><span class="p">(</span><span class="sh">"</span><span class="s">task_plan_reason</span><span class="sh">"</span><span class="p">,</span> <span class="n">llm_reason_res</span><span class="p">.</span><span class="n">response</span><span class="p">)</span>

    <span class="c1"># 2. 执行每个任务规划
</span>    <span class="k">for</span> <span class="n">task_plan</span> <span class="ow">in</span> <span class="n">task_plans</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">execute_task_plan</span><span class="p">(</span><span class="n">task_plan</span><span class="p">,</span> <span class="n">cmd</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">signal_handler</span><span class="p">(</span><span class="n">sig</span><span class="p">,</span> <span class="n">frame</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">信号处理器，在系统关闭时保存地图</span><span class="sh">"""</span>
    <span class="n">map_path</span> <span class="o">=</span> <span class="sh">"</span><span class="s">/home/yutian/YanBot/src/Cerebellum/wheel_dir/wheeltec_noetic_src/turn_on_wheeltec_robot/map/WHEELTEC</span><span class="sh">"</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="c1"># 运行map_saver命令保存地图
</span>        <span class="n">subprocess</span><span class="p">.</span><span class="nf">call</span><span class="p">([</span><span class="sh">"</span><span class="s">rosrun</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">map_server</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">map_saver</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">-f</span><span class="sh">"</span><span class="p">,</span> <span class="n">map_path</span><span class="p">])</span>
        <span class="n">rospy</span><span class="p">.</span><span class="nf">loginfo</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Map saved successfully to </span><span class="si">{</span><span class="n">map_path</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="n">rospy</span><span class="p">.</span><span class="nf">logerr</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Failed to save map: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <pre><code class="language-shellscript"># 启动完整系统
roslaunch cerebellum_pkg main.launch

# 自定义参数启动
roslaunch cerebellum_pkg main.launch main/use_rviz:=false main/navi_func:=2D
</code></pre> <pre><code class="language-shellscript"># 启动语音交互测试
roslaunch cerebellum_pkg test_interact.launch
</code></pre> <pre><code class="language-shellscript"># 启动语义地图系统测试
rosrun cerebellum_pkg test_semantic_map_sys_node.py
</code></pre> <hr/> <p><strong>User</strong></p> <p>用一个图为我展示一下cerebellum_pkg 的功能，包含输入、输出、服务、消息</p> <hr/> <p><strong>Cursor</strong></p> <p>基于我对cerebellum_pkg的深入分析，我来为您绘制一个详细的功能架构图：</p> <h2 id="cerebellum-package-功能架构图">Cerebellum Package 功能架构图</h2> <pre><code class="language-mermaid">graph TB
    %% 用户输入层
    subgraph "用户输入层"
        VoiceInput[语音输入&lt;br/&gt;麦克风] --&gt; WakeupDetect[唤醒检测&lt;br/&gt;wakeup_node]
        TextInput[文本输入&lt;br/&gt;/user话题] --&gt; TestNode[测试节点&lt;br/&gt;test_interact_node]
        MapInput[地图输入&lt;br/&gt;SLAM建图] --&gt; MapSaver[地图保存&lt;br/&gt;first_mapping_saver_node]
    end

    %% 核心处理层
    subgraph "核心处理层"
        WakeupDetect --&gt; |wakeup话题| TestNode
        TestNode --&gt; |录音数据| AudioProcessor[音频处理器]
        AudioProcessor --&gt; |WAV文件| STTService[STT服务&lt;br/&gt;stt_node]
        STTService --&gt; |识别结果| TTSService[TTS服务&lt;br/&gt;tts_node]
        TTSService --&gt; |合成音频| AudioPlayer[音频播放器]
    end

    %% 语义理解层
    subgraph "语义理解层"
        TestNode --&gt; |用户指令| LLMService[LLM推理服务&lt;br/&gt;llm_reason]
        LLMService --&gt; |任务规划| TaskPlanner[任务规划器]
        TaskPlanner --&gt; |导航目标| GuideService[语义地图Guide服务&lt;br/&gt;semantic_map_guide]
        GuideService --&gt; |导航点| NavigationAction[导航Action&lt;br/&gt;move_base]
    end

    %% 系统管理层
    subgraph "系统管理层"
        MainLaunch[主启动器&lt;br/&gt;main.launch] --&gt; RVizNode[RViz可视化&lt;br/&gt;rviz]
        MainLaunch --&gt; NaviSystem[导航系统&lt;br/&gt;navigation.launch]
        MainLaunch --&gt; CameraSystem[相机系统&lt;br/&gt;realsense2_camera]
        MainLaunch --&gt; SemanticSystem[语义地图系统&lt;br/&gt;semantic_map.launch]
    end

    %% 输出层
    subgraph "输出层"
        AudioPlayer --&gt; |音频输出| Speaker[扬声器]
        NavigationAction --&gt; |移动控制| RobotBase[机器人底盘]
        RVizNode --&gt; |可视化| Display[显示器]
        MapSaver --&gt; |地图文件| MapFile[地图文件&lt;br/&gt;WHEELTEC.yaml]
    end

    %% 服务接口
    subgraph "ROS服务接口"
        WakeupControl[唤醒控制服务&lt;br/&gt;wakeup_control] -.-&gt;|启用/禁用| WakeupDetect
        STTServiceInterface[STT服务接口&lt;br/&gt;srv_stt] -.-&gt;|语音识别| STTService
        TTSServiceInterface[TTS服务接口&lt;br/&gt;srv_tts] -.-&gt;|语音合成| TTSService
        GuideServiceInterface[Guide服务接口&lt;br/&gt;semantic_map_guide] -.-&gt;|导航指导| GuideService
    end

    %% 话题通信
    subgraph "ROS话题通信"
        WakeupTopic[唤醒话题&lt;br/&gt;/wakeup] --&gt; |唤醒消息| TestNode
        UserTopic[用户指令话题&lt;br/&gt;/user] --&gt; |文本指令| TestNode
        MarkerTopic[导航标记话题&lt;br/&gt;/emo_navi_marker] --&gt; |可视化标记| RVizNode
    end

    %% 连接关系
    TestNode -.-&gt;|调用| WakeupControl
    TestNode -.-&gt;|调用| STTServiceInterface
    TestNode -.-&gt;|调用| TTSServiceInterface
    TestNode -.-&gt;|调用| GuideServiceInterface

    %% 样式定义
    classDef inputStyle fill:#e1f5fe,stroke:#01579b,stroke-width:2px
    classDef processStyle fill:#f3e5f5,stroke:#4a148c,stroke-width:2px
    classDef serviceStyle fill:#fff3e0,stroke:#e65100,stroke-width:2px
    classDef outputStyle fill:#e8f5e8,stroke:#1b5e20,stroke-width:2px
    classDef systemStyle fill:#fce4ec,stroke:#880e4f,stroke-width:2px
    classDef topicStyle fill:#f1f8e9,stroke:#33691e,stroke-width:2px

    %% 应用样式
    class VoiceInput,TextInput,MapInput inputStyle
    class WakeupDetect,TestNode,AudioProcessor,STTService,TTSService,AudioPlayer,LLMService,TaskPlanner,GuideService,NavigationAction processStyle
    class WakeupControl,STTServiceInterface,TTSServiceInterface,GuideServiceInterface serviceStyle
    class Speaker,RobotBase,Display,MapFile outputStyle
    class MainLaunch,RVizNode,NaviSystem,CameraSystem,SemanticSystem systemStyle
    class WakeupTopic,UserTopic,MarkerTopic topicStyle
</code></pre> <h2 id="详细功能说明-1">详细功能说明</h2> <h3 id="1-用户输入层">1. 用户输入层</h3> <ul> <li><strong>语音输入</strong>: 通过麦克风接收用户语音指令</li> <li><strong>文本输入</strong>: 通过ROS话题接收文本指令</li> <li><strong>地图输入</strong>: 从SLAM建图系统接收地图数据</li> </ul> <h3 id="2-核心处理层">2. 核心处理层</h3> <ul> <li><strong>唤醒检测</strong>: 检测用户唤醒词，触发交互流程</li> <li><strong>音频处理</strong>: 录制、处理和转换音频数据</li> <li><strong>语音服务</strong>: STT语音识别和TTS语音合成</li> <li><strong>音频播放</strong>: 播放合成的语音响应</li> </ul> <h3 id="3-语义理解层">3. 语义理解层</h3> <ul> <li><strong>LLM推理</strong>: 调用大语言模型进行任务理解</li> <li><strong>任务规划</strong>: 将用户指令转换为具体任务步骤</li> <li><strong>语义导航</strong>: 通过语义地图服务获取导航目标</li> <li><strong>导航执行</strong>: 控制机器人移动到目标位置</li> </ul> <h3 id="4-系统管理层">4. 系统管理层</h3> <ul> <li><strong>主启动器</strong>: 统一管理所有子系统的启动</li> <li><strong>可视化</strong>: RViz提供实时系统状态可视化</li> <li><strong>导航系统</strong>: 2D/3D导航功能</li> <li><strong>相机系统</strong>: RealSense相机数据采集</li> <li><strong>语义地图</strong>: 语义理解和地图管理</li> </ul> <h3 id="5-输出层">5. 输出层</h3> <ul> <li><strong>音频输出</strong>: 通过扬声器播放语音响应</li> <li><strong>移动控制</strong>: 控制机器人底盘执行移动</li> <li><strong>可视化显示</strong>: 在显示器上显示系统状态</li> <li><strong>地图保存</strong>: 自动保存SLAM建图结果</li> </ul> <h3 id="6-ros服务接口">6. ROS服务接口</h3> <ul> <li><strong>唤醒控制</strong>: 启用/禁用语音唤醒功能</li> <li><strong>STT服务</strong>: 语音转文字服务</li> <li><strong>TTS服务</strong>: 文字转语音服务</li> <li><strong>Guide服务</strong>: 语义导航指导服务</li> </ul> <h3 id="7-ros话题通信">7. ROS话题通信</h3> <ul> <li><strong>唤醒话题</strong>: 发布唤醒检测结果</li> <li><strong>用户指令话题</strong>: 接收用户文本指令</li> <li><strong>导航标记话题</strong>: 发布导航可视化标记</li> </ul> <p>这个架构图展示了cerebellum_pkg从用户输入到系统输出的完整处理流程，以及各个组件之间的服务调用和话题通信关系。</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>graph TB
    %% 用户输入层
    subgraph "用户输入层"
        VoiceInput[语音输入&lt;br/&gt;麦克风] --&gt; WakeupDetect[唤醒检测&lt;br/&gt;wakeup_node]
        TextInput[文本输入&lt;br/&gt;/user话题] --&gt; TestNode[测试节点&lt;br/&gt;test_interact_node]
        MapInput[地图输入&lt;br/&gt;SLAM建图] --&gt; MapSaver[地图保存&lt;br/&gt;first_mapping_saver_node]
    end

    %% 核心处理层
    subgraph "核心处理层"
        WakeupDetect --&gt; |wakeup话题| TestNode
        TestNode --&gt; |录音数据| AudioProcessor[音频处理器]
        AudioProcessor --&gt; |WAV文件| STTService[STT服务&lt;br/&gt;stt_node]
        STTService --&gt; |识别结果| TTSService[TTS服务&lt;br/&gt;tts_node]
        TTSService --&gt; |合成音频| AudioPlayer[音频播放器]
    end

    %% 语义理解层
    subgraph "语义理解层"
        TestNode --&gt; |用户指令| LLMService[LLM推理服务&lt;br/&gt;llm_reason]
        LLMService --&gt; |任务规划| TaskPlanner[任务规划器]
        TaskPlanner --&gt; |导航目标| GuideService[语义地图Guide服务&lt;br/&gt;semantic_map_guide]
        GuideService --&gt; |导航点| NavigationAction[导航Action&lt;br/&gt;move_base]
    end

    %% 系统管理层
    subgraph "系统管理层"
        MainLaunch[主启动器&lt;br/&gt;main.launch] --&gt; RVizNode[RViz可视化&lt;br/&gt;rviz]
        MainLaunch --&gt; NaviSystem[导航系统&lt;br/&gt;navigation.launch]
        MainLaunch --&gt; CameraSystem[相机系统&lt;br/&gt;realsense2_camera]
        MainLaunch --&gt; SemanticSystem[语义地图系统&lt;br/&gt;semantic_map.launch]
    end

    %% 输出层
    subgraph "输出层"
        AudioPlayer --&gt; |音频输出| Speaker[扬声器]
        NavigationAction --&gt; |移动控制| RobotBase[机器人底盘]
        RVizNode --&gt; |可视化| Display[显示器]
        MapSaver --&gt; |地图文件| MapFile[地图文件&lt;br/&gt;WHEELTEC.yaml]
    end

    %% 服务接口
    subgraph "ROS服务接口"
        WakeupControl[唤醒控制服务&lt;br/&gt;wakeup_control] -.-&gt;|启用/禁用| WakeupDetect
        STTServiceInterface[STT服务接口&lt;br/&gt;srv_stt] -.-&gt;|语音识别| STTService
        TTSServiceInterface[TTS服务接口&lt;br/&gt;srv_tts] -.-&gt;|语音合成| TTSService
        GuideServiceInterface[Guide服务接口&lt;br/&gt;semantic_map_guide] -.-&gt;|导航指导| GuideService
    end

    %% 话题通信
    subgraph "ROS话题通信"
        WakeupTopic[唤醒话题&lt;br/&gt;/wakeup] --&gt; |唤醒消息| TestNode
        UserTopic[用户指令话题&lt;br/&gt;/user] --&gt; |文本指令| TestNode
        MarkerTopic[导航标记话题&lt;br/&gt;/emo_navi_marker] --&gt; |可视化标记| RVizNode
    end

    %% 连接关系
    TestNode -.-&gt;|调用| WakeupControl
    TestNode -.-&gt;|调用| STTServiceInterface
    TestNode -.-&gt;|调用| TTSServiceInterface
    TestNode -.-&gt;|调用| GuideServiceInterface

    %% 样式定义
    classDef inputStyle fill:#e1f5fe,stroke:#01579b,stroke-width:2px
    classDef processStyle fill:#f3e5f5,stroke:#4a148c,stroke-width:2px
    classDef serviceStyle fill:#fff3e0,stroke:#e65100,stroke-width:2px
    classDef outputStyle fill:#e8f5e8,stroke:#1b5e20,stroke-width:2px
    classDef systemStyle fill:#fce4ec,stroke:#880e4f,stroke-width:2px
    classDef topicStyle fill:#f1f8e9,stroke:#33691e,stroke-width:2px

    %% 应用样式
    class VoiceInput,TextInput,MapInput inputStyle
    class WakeupDetect,TestNode,AudioProcessor,STTService,TTSService,AudioPlayer,LLMService,TaskPlanner,GuideService,NavigationAction processStyle
    class WakeupControl,STTServiceInterface,TTSServiceInterface,GuideServiceInterface serviceStyle
    class Speaker,RobotBase,Display,MapFile outputStyle
    class MainLaunch,RVizNode,NaviSystem,CameraSystem,SemanticSystem systemStyle
    class WakeupTopic,UserTopic,MarkerTopic topicStyle
</code></pre></div></div> <hr/> <p><strong>User</strong></p> <p>请详细解释一下 Cerebellum 中的 semantic_map 部分</p> <hr/> <p><strong>Cursor</strong></p> <p>让我详细分析Cerebellum模块中的semantic_map部分。首先查看相关的代码文件来了解其完整实现。</p> <p>基于我对代码的深入分析，现在我来详细讲解Cerebellum模块中的semantic_map部分：</p> <h1 id="cerebellum模块---semantic_map-详细讲解">Cerebellum模块 - semantic_map 详细讲解</h1> <h2 id="1-模块概述-3">1. 模块概述</h2> <p><code class="language-plaintext highlighter-rouge">semantic_map</code>是YanBot系统的<strong>语义地图模块</strong>，负责构建、管理和使用环境中的语义信息，使机器人能够理解环境中的物体及其语义含义，实现智能导航和操作。</p> <h3 id="11-核心功能-3">1.1 核心功能</h3> <ul> <li><strong>语义对象检测</strong>: 检测和分割环境中的语义物体</li> <li><strong>语义地图构建</strong>: 构建包含语义信息的3D地图</li> <li><strong>语义地图管理</strong>: 管理语义对象的存储和更新</li> <li><strong>语义导航指导</strong>: 基于语义信息提供导航指导</li> </ul> <h3 id="12-架构设计-3">1.2 架构设计</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   语义生成器    │    │   语义管理器    │    │   语义指导器    │
│                 │    │                 │    │                 │
│ • 对象检测      │    │ • 数据库管理    │    │ • 导航指导      │
│ • 点云生成      │    │ • 对象跟踪      │    │ • 操作规划      │
│ • 特征提取      │    │ • 可视化        │    │ • 语义匹配      │
└─────────────────┘    └─────────────────┘    └─────────────────┘
</code></pre></div></div> <h2 id="2-核心组件详解-3">2. 核心组件详解</h2> <h3 id="21-语义地图生成器-semantic_map_generator_nodepy">2.1 语义地图生成器 (<code class="language-plaintext highlighter-rouge">semantic_map_generator_node.py</code>)</h3> <p><strong>功能</strong>: 从相机数据生成语义对象和点云</p> <p><strong>核心处理流程</strong>:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">SemanticMapGenerator</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="c1"># 1. 订阅RGB+深度图像
</span>        <span class="n">topic_image_sub</span> <span class="o">=</span> <span class="sh">"</span><span class="s">/camera/color/image_raw</span><span class="sh">"</span>
        <span class="n">topic_depth_sub</span> <span class="o">=</span> <span class="sh">"</span><span class="s">/camera/aligned_depth_to_color/image_raw</span><span class="sh">"</span>

        <span class="c1"># 2. 订阅相机参数
</span>        <span class="n">topic_camera_info_sub</span> <span class="o">=</span> <span class="sh">"</span><span class="s">/camera/color/camera_info</span><span class="sh">"</span>

        <span class="c1"># 3. 同步订阅器
</span>        <span class="n">ts</span> <span class="o">=</span> <span class="nc">ApproximateTimeSynchronizer</span><span class="p">([</span><span class="n">image_sub</span><span class="p">,</span> <span class="n">depth_sub</span><span class="p">,</span> <span class="n">camera_info_sub</span><span class="p">],</span>
                                       <span class="n">queue_size</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">slop</span><span class="o">=</span><span class="mf">0.05</span><span class="p">)</span>

        <span class="c1"># 4. 检测分割服务
</span>        <span class="n">self</span><span class="p">.</span><span class="n">detector</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">ServiceProxy</span><span class="p">(</span><span class="sh">"</span><span class="s">/vit_detection</span><span class="sh">"</span><span class="p">,</span> <span class="n">VitDetection</span><span class="p">)</span>

        <span class="c1"># 5. CLIP服务
</span>        <span class="n">self</span><span class="p">.</span><span class="n">clip_client</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">ServiceProxy</span><span class="p">(</span><span class="sh">"</span><span class="s">/clip</span><span class="sh">"</span><span class="p">,</span> <span class="n">Clip</span><span class="p">)</span>
</code></pre></div></div> <p><strong>语义对象检测</strong>:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">semantic_object_detect</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">rgb</span><span class="p">,</span> <span class="n">prompt</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">检测语义对象</span><span class="sh">"""</span>
    <span class="n">rgb_msg</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">bridge</span><span class="p">.</span><span class="nf">cv2_to_imgmsg</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="n">rgb</span><span class="p">))</span>
    <span class="n">results</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">detector</span><span class="p">(</span><span class="n">rgb_msg</span><span class="p">,</span> <span class="n">prompt</span><span class="p">)</span>

    <span class="c1"># 提取检测结果
</span>    <span class="n">labels</span> <span class="o">=</span> <span class="n">results</span><span class="p">.</span><span class="n">labels</span>          <span class="c1"># 标签
</span>    <span class="n">scores</span> <span class="o">=</span> <span class="n">results</span><span class="p">.</span><span class="n">scores</span>          <span class="c1"># 置信度
</span>    <span class="n">boxes</span> <span class="o">=</span> <span class="n">results</span><span class="p">.</span><span class="n">boxes</span>            <span class="c1"># 边界框
</span>    <span class="n">masks</span> <span class="o">=</span> <span class="n">results</span><span class="p">.</span><span class="n">segmasks</span>         <span class="c1"># 分割掩码
</span>
    <span class="k">return</span> <span class="n">annotated_frame</span><span class="p">,</span> <span class="n">boxes</span><span class="p">,</span> <span class="n">masks</span><span class="p">,</span> <span class="n">labels</span><span class="p">,</span> <span class="n">scores</span>
</code></pre></div></div> <p><strong>点云生成</strong>:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">create_semantic_object</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">mask</span><span class="p">,</span> <span class="n">label</span><span class="p">,</span> <span class="n">score</span><span class="p">,</span> <span class="n">annotated</span><span class="p">,</span>
                          <span class="n">latest_image</span><span class="p">,</span> <span class="n">latest_depth</span><span class="p">,</span> <span class="n">camera_info</span><span class="p">,</span>
                          <span class="n">latest_transform</span><span class="p">,</span> <span class="n">crop_feature</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">创建语义对象点云</span><span class="sh">"""</span>
    <span class="c1"># 1. 提取掩码区域
</span>    <span class="c1"># 2. 深度图转点云
</span>    <span class="c1"># 3. 坐标变换到地图坐标系
</span>    <span class="c1"># 4. 点云过滤和聚类
</span>    <span class="c1"># 5. 特征提取
</span>    <span class="c1"># 6. 发布语义对象
</span></code></pre></div></div> <h3 id="22-语义地图管理器-semantic_map_manager_nodepy">2.2 语义地图管理器 (<code class="language-plaintext highlighter-rouge">semantic_map_manager_node.py</code>)</h3> <p><strong>功能</strong>: 管理语义对象的存储、更新和可视化</p> <p><strong>数据库管理</strong>:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">SemanticMapManager</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="c1"># 数据库配置
</span>        <span class="n">self</span><span class="p">.</span><span class="n">db_path</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nf">get_param</span><span class="p">(</span><span class="sh">"</span><span class="s">~db_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">semantic_map.db</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">renew_db</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nf">get_param</span><span class="p">(</span><span class="sh">"</span><span class="s">~renew_db</span><span class="sh">"</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">database</span> <span class="o">=</span> <span class="nc">SemanticMapDatabase</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">db_path</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">last_seen_imgs_dir</span><span class="p">,</span>
                                           <span class="mi">3</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">renew_db</span><span class="p">)</span>
</code></pre></div></div> <p><strong>对象更新策略</strong>:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">update_db</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">category</span><span class="p">,</span> <span class="n">bbox</span><span class="p">,</span> <span class="n">count</span><span class="p">,</span> <span class="n">x_list</span><span class="p">,</span> <span class="n">y_list</span><span class="p">,</span> <span class="n">z_list</span><span class="p">,</span>
              <span class="n">rgb_list</span><span class="p">,</span> <span class="n">cv_image</span><span class="p">,</span> <span class="n">act_list</span><span class="p">,</span> <span class="n">crop_feature</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">更新数据库</span><span class="sh">"""</span>
    <span class="n">entries</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">database</span><span class="p">.</span><span class="nf">_get_entries_by_category</span><span class="p">(</span><span class="n">category</span><span class="p">)</span>

    <span class="k">if</span> <span class="ow">not</span> <span class="n">entries</span><span class="p">:</span>
        <span class="c1"># 新类别 -&gt; 插入
</span>        <span class="n">label</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">category</span><span class="si">}</span><span class="s">@1</span><span class="sh">"</span>
        <span class="n">self</span><span class="p">.</span><span class="n">database</span><span class="p">.</span><span class="nf">_update_entry</span><span class="p">(</span><span class="n">label</span><span class="p">,</span> <span class="n">bbox</span><span class="p">,</span> <span class="n">x_list</span><span class="p">,</span> <span class="n">y_list</span><span class="p">,</span> <span class="n">z_list</span><span class="p">,</span>
                                   <span class="n">rgb_list</span><span class="p">,</span> <span class="n">act_list</span><span class="p">,</span> <span class="n">crop_feature</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="c1"># 检查是否匹配现有对象
</span>        <span class="k">for</span> <span class="n">entry</span> <span class="ow">in</span> <span class="n">entries</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="nf">bbox_match</span><span class="p">(</span><span class="n">bbox</span><span class="p">,</span> <span class="n">entry</span><span class="p">[</span><span class="sh">"</span><span class="s">bbox</span><span class="sh">"</span><span class="p">]):</span>
                <span class="c1"># 同位置 -&gt; 合并
</span>                <span class="n">self</span><span class="p">.</span><span class="nf">merge_objects</span><span class="p">(</span><span class="n">entry</span><span class="p">,</span> <span class="n">x_list</span><span class="p">,</span> <span class="n">y_list</span><span class="p">,</span> <span class="n">z_list</span><span class="p">,</span> <span class="n">rgb_list</span><span class="p">)</span>
            <span class="k">elif</span> <span class="n">self</span><span class="p">.</span><span class="nf">feature_match</span><span class="p">(</span><span class="n">crop_feature</span><span class="p">,</span> <span class="n">entry</span><span class="p">[</span><span class="sh">"</span><span class="s">feature</span><span class="sh">"</span><span class="p">]):</span>
                <span class="c1"># 不同位置，相同特征 -&gt; 物体移动 -&gt; 更新位置
</span>                <span class="n">self</span><span class="p">.</span><span class="nf">update_object_position</span><span class="p">(</span><span class="n">entry</span><span class="p">,</span> <span class="n">bbox</span><span class="p">,</span> <span class="n">x_list</span><span class="p">,</span> <span class="n">y_list</span><span class="p">,</span> <span class="n">z_list</span><span class="p">)</span>
</code></pre></div></div> <p><strong>可视化功能</strong>:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">create_bbox_marker</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">bbox</span><span class="p">,</span> <span class="n">label</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">创建边界框标记</span><span class="sh">"""</span>
    <span class="n">marker</span> <span class="o">=</span> <span class="nc">Marker</span><span class="p">()</span>
    <span class="n">marker</span><span class="p">.</span><span class="nb">type</span> <span class="o">=</span> <span class="n">Marker</span><span class="p">.</span><span class="n">CUBE</span>
    <span class="n">marker</span><span class="p">.</span><span class="n">action</span> <span class="o">=</span> <span class="n">Marker</span><span class="p">.</span><span class="n">ADD</span>
    <span class="n">marker</span><span class="p">.</span><span class="n">scale</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">bbox</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">-</span> <span class="n">bbox</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>  <span class="c1"># 宽度
</span>    <span class="n">marker</span><span class="p">.</span><span class="n">scale</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">bbox</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">-</span> <span class="n">bbox</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>  <span class="c1"># 深度
</span>    <span class="n">marker</span><span class="p">.</span><span class="n">scale</span><span class="p">.</span><span class="n">z</span> <span class="o">=</span> <span class="n">bbox</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">-</span> <span class="n">bbox</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>  <span class="c1"># 高度
</span>    <span class="n">marker</span><span class="p">.</span><span class="n">color</span><span class="p">.</span><span class="n">r</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">bbox_color</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">marker</span><span class="p">.</span><span class="n">color</span><span class="p">.</span><span class="n">g</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">bbox_color</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
    <span class="n">marker</span><span class="p">.</span><span class="n">color</span><span class="p">.</span><span class="n">b</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">bbox_color</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
    <span class="n">marker</span><span class="p">.</span><span class="n">color</span><span class="p">.</span><span class="n">a</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">bbox_alpha</span>
    <span class="k">return</span> <span class="n">marker</span>
</code></pre></div></div> <h3 id="23-语义地图指导器-semantic_map_guide_nodepy">2.3 语义地图指导器 (<code class="language-plaintext highlighter-rouge">semantic_map_guide_node.py</code>)</h3> <p><strong>功能</strong>: 提供基于语义的导航指导和操作规划</p> <p><strong>服务接口</strong>:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Guide服务
</span><span class="n">service_guide_server</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">Service</span><span class="p">(</span><span class="sh">"</span><span class="s">semantic_map_guide</span><span class="sh">"</span><span class="p">,</span> <span class="n">Guide</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">guide_callback</span><span class="p">)</span>

<span class="c1"># 请求参数:
# - category: 导航目标类别
# - op_cmd: 操作命令
# - origin_cmd: 原始用户指令
</span>
<span class="c1"># 响应参数:
# - success: 成功标志
# - message: 响应消息
# - label: 具体语义对象标签
# - nav_goals: 导航点列表
</span></code></pre></div></div> <p><strong>导航指导流程</strong>:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">guide_callback</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">req</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">处理导航指导请求</span><span class="sh">"""</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="c1"># 1. 查找语义对象
</span>        <span class="k">if</span> <span class="n">req</span><span class="p">.</span><span class="n">category</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">semantic_categories</span><span class="p">:</span>
            <span class="c1"># 按类别查找
</span>            <span class="n">label</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">find_semantic_object_by_category</span><span class="p">(</span><span class="n">req</span><span class="p">.</span><span class="n">category</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="c1"># 按语言描述查找
</span>            <span class="n">label</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">find_semantic_object_by_language</span><span class="p">(</span><span class="n">req</span><span class="p">.</span><span class="n">category</span><span class="p">,</span> <span class="n">req</span><span class="p">.</span><span class="n">op_cmd</span><span class="p">)</span>

        <span class="c1"># 2. 获取理想操作方向
</span>        <span class="n">ideal_direction</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">get_ideal_operate_direction</span><span class="p">(</span><span class="n">label</span><span class="p">,</span> <span class="n">req</span><span class="p">.</span><span class="n">op_cmd</span><span class="p">)</span>

        <span class="c1"># 3. 生成导航目标点
</span>        <span class="n">nav_goals</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">get_ideal_navi_goals</span><span class="p">(</span><span class="n">label</span><span class="p">,</span> <span class="n">req</span><span class="p">.</span><span class="n">op_cmd</span><span class="p">)</span>

        <span class="k">return</span> <span class="nc">GuideResponse</span><span class="p">(</span><span class="n">success</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="n">label</span><span class="p">,</span> <span class="n">nav_goals</span><span class="o">=</span><span class="n">nav_goals</span><span class="p">)</span>

    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="k">return</span> <span class="nc">GuideResponse</span><span class="p">(</span><span class="n">success</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">message</span><span class="o">=</span><span class="nf">str</span><span class="p">(</span><span class="n">e</span><span class="p">))</span>
</code></pre></div></div> <p><strong>语义匹配</strong>:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">find_semantic_object_by_language</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">category</span><span class="p">,</span> <span class="n">language</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">通过语言描述查找语义对象</span><span class="sh">"""</span>
    <span class="c1"># 1. 获取所有同类别的对象
</span>    <span class="n">entries</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">database</span><span class="p">.</span><span class="nf">_get_entries_by_category</span><span class="p">(</span><span class="n">category</span><span class="p">)</span>

    <span class="c1"># 2. 获取对象的图像
</span>    <span class="n">img_paths</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">database</span><span class="p">.</span><span class="nf">_get_last_seen_img_path</span><span class="p">(</span><span class="n">entry</span><span class="p">[</span><span class="sh">"</span><span class="s">label</span><span class="sh">"</span><span class="p">])</span>
                 <span class="k">for</span> <span class="n">entry</span> <span class="ow">in</span> <span class="n">entries</span><span class="p">]</span>

    <span class="c1"># 3. 使用CLIP进行语言-图像匹配
</span>    <span class="n">match_pairs</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">lang_imgs_match</span><span class="p">(</span><span class="n">language</span><span class="p">,</span> <span class="n">img_paths</span><span class="p">)</span>

    <span class="c1"># 4. 选择最佳匹配
</span>    <span class="n">best_match</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">match_pairs</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
    <span class="k">return</span> <span class="n">best_match</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</code></pre></div></div> <h2 id="3-语义类别配置">3. 语义类别配置</h2> <h3 id="31-支持的语义类别-semantic_categoriesjson">3.1 支持的语义类别 (<code class="language-plaintext highlighter-rouge">semantic_categories.json</code>)</h3> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"categories"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="s2">"toilet"</span><span class="p">,</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">马桶</span><span class="w">
    </span><span class="s2">"washing-basin"</span><span class="p">,</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">洗手盆</span><span class="w">
    </span><span class="s2">"washing-machine"</span><span class="p">,</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">洗衣机</span><span class="w">
    </span><span class="s2">"microwave-oven"</span><span class="p">,</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">微波炉</span><span class="w">
    </span><span class="s2">"table"</span><span class="p">,</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">桌子</span><span class="w">
    </span><span class="s2">"refrigerator"</span><span class="p">,</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">冰箱</span><span class="w">
    </span><span class="s2">"sofa"</span><span class="p">,</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">沙发</span><span class="w">
    </span><span class="s2">"chair"</span><span class="p">,</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">椅子</span><span class="w">
    </span><span class="s2">"vase"</span><span class="p">,</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">花瓶</span><span class="w">
    </span><span class="s2">"bottled-drinks"</span><span class="p">,</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">瓶装饮料</span><span class="w">
    </span><span class="s2">"bedside-table"</span><span class="p">,</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">床头柜</span><span class="w">
    </span><span class="s2">"bed"</span><span class="p">,</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">床</span><span class="w">
    </span><span class="s2">"television"</span><span class="p">,</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">电视</span><span class="w">
    </span><span class="s2">"human"</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">人</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <h2 id="4-系统集成特点">4. 系统集成特点</h2> <h3 id="41-多模态融合-1">4.1 多模态融合</h3> <ul> <li><strong>视觉感知</strong>: RGB+深度图像处理</li> <li><strong>语义理解</strong>: 对象检测和分割</li> <li><strong>语言理解</strong>: 自然语言指令解析</li> <li><strong>空间定位</strong>: 3D坐标变换和定位</li> </ul> <h3 id="42-智能推理">4.2 智能推理</h3> <ul> <li><strong>对象跟踪</strong>: 基于特征匹配的对象跟踪</li> <li><strong>位置更新</strong>: 动态更新对象位置信息</li> <li><strong>操作规划</strong>: 基于语义的操作方向规划</li> <li><strong>导航指导</strong>: 智能生成导航目标点</li> </ul> <h3 id="43-数据管理">4.3 数据管理</h3> <ul> <li><strong>数据库存储</strong>: SQLite数据库存储语义对象</li> <li><strong>图像缓存</strong>: 保存对象的最后观察图像</li> <li><strong>特征匹配</strong>: 基于图像特征的物体识别</li> <li><strong>可视化</strong>: RViz实时可视化语义地图</li> </ul> <h2 id="5-使用方式">5. 使用方式</h2> <h3 id="51-启动语义地图系统">5.1 启动语义地图系统</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 启动完整语义地图系统</span>
roslaunch semantic_map_pkg semantic_map.launch

<span class="c"># 自定义参数启动</span>
roslaunch semantic_map_pkg semantic_map.launch <span class="se">\</span>
    semantic_map/generator/det_seg_mode:<span class="o">=</span>yoesam <span class="se">\</span>
    semantic_map/manager/renew_db:<span class="o">=</span><span class="nb">false</span>
</code></pre></div></div> <h3 id="52-调用导航指导服务">5.2 调用导航指导服务</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">rospy</span>
<span class="kn">from</span> <span class="n">semantic_map_pkg.srv</span> <span class="kn">import</span> <span class="n">Guide</span>

<span class="c1"># 等待服务可用
</span><span class="n">rospy</span><span class="p">.</span><span class="nf">wait_for_service</span><span class="p">(</span><span class="sh">'</span><span class="s">semantic_map_guide</span><span class="sh">'</span><span class="p">)</span>
<span class="n">guide_service</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">ServiceProxy</span><span class="p">(</span><span class="sh">'</span><span class="s">semantic_map_guide</span><span class="sh">'</span><span class="p">,</span> <span class="n">Guide</span><span class="p">)</span>

<span class="c1"># 调用服务
</span><span class="n">response</span> <span class="o">=</span> <span class="nf">guide_service</span><span class="p">(</span>
    <span class="n">category</span><span class="o">=</span><span class="sh">"</span><span class="s">washing-machine</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">op_cmd</span><span class="o">=</span><span class="sh">"</span><span class="s">打开洗衣机门</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">origin_cmd</span><span class="o">=</span><span class="sh">"</span><span class="s">帮我打开洗衣机</span><span class="sh">"</span>
<span class="p">)</span>

<span class="k">if</span> <span class="n">response</span><span class="p">.</span><span class="n">success</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">找到对象: </span><span class="si">{</span><span class="n">response</span><span class="p">.</span><span class="n">label</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">导航目标数量: </span><span class="si">{</span><span class="nf">len</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">nav_goals</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">查找失败: </span><span class="si">{</span><span class="n">response</span><span class="p">.</span><span class="n">message</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <p>semantic_map模块为YanBot系统提供了强大的语义理解能力，使机器人能够理解环境中的物体含义，实现智能导航和操作。</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   语义生成器    │    │   语义管理器    │    │   语义指导器    │
│                 │    │                 │    │                 │
│ • 对象检测      │    │ • 数据库管理    │    │ • 导航指导      │
│ • 点云生成      │    │ • 对象跟踪      │    │ • 操作规划      │
│ • 特征提取      │    │ • 可视化        │    │ • 语义匹配      │
└─────────────────┘    └─────────────────┘    └─────────────────┘
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">SemanticMapGenerator</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="c1"># 1. 订阅RGB+深度图像
</span>        <span class="n">topic_image_sub</span> <span class="o">=</span> <span class="sh">"</span><span class="s">/camera/color/image_raw</span><span class="sh">"</span>
        <span class="n">topic_depth_sub</span> <span class="o">=</span> <span class="sh">"</span><span class="s">/camera/aligned_depth_to_color/image_raw</span><span class="sh">"</span>

        <span class="c1"># 2. 订阅相机参数
</span>        <span class="n">topic_camera_info_sub</span> <span class="o">=</span> <span class="sh">"</span><span class="s">/camera/color/camera_info</span><span class="sh">"</span>

        <span class="c1"># 3. 同步订阅器
</span>        <span class="n">ts</span> <span class="o">=</span> <span class="nc">ApproximateTimeSynchronizer</span><span class="p">([</span><span class="n">image_sub</span><span class="p">,</span> <span class="n">depth_sub</span><span class="p">,</span> <span class="n">camera_info_sub</span><span class="p">],</span>
                                       <span class="n">queue_size</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">slop</span><span class="o">=</span><span class="mf">0.05</span><span class="p">)</span>

        <span class="c1"># 4. 检测分割服务
</span>        <span class="n">self</span><span class="p">.</span><span class="n">detector</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">ServiceProxy</span><span class="p">(</span><span class="sh">"</span><span class="s">/vit_detection</span><span class="sh">"</span><span class="p">,</span> <span class="n">VitDetection</span><span class="p">)</span>

        <span class="c1"># 5. CLIP服务
</span>        <span class="n">self</span><span class="p">.</span><span class="n">clip_client</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">ServiceProxy</span><span class="p">(</span><span class="sh">"</span><span class="s">/clip</span><span class="sh">"</span><span class="p">,</span> <span class="n">Clip</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">semantic_object_detect</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">rgb</span><span class="p">,</span> <span class="n">prompt</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">检测语义对象</span><span class="sh">"""</span>
    <span class="n">rgb_msg</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">bridge</span><span class="p">.</span><span class="nf">cv2_to_imgmsg</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="n">rgb</span><span class="p">))</span>
    <span class="n">results</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">detector</span><span class="p">(</span><span class="n">rgb_msg</span><span class="p">,</span> <span class="n">prompt</span><span class="p">)</span>

    <span class="c1"># 提取检测结果
</span>    <span class="n">labels</span> <span class="o">=</span> <span class="n">results</span><span class="p">.</span><span class="n">labels</span>          <span class="c1"># 标签
</span>    <span class="n">scores</span> <span class="o">=</span> <span class="n">results</span><span class="p">.</span><span class="n">scores</span>          <span class="c1"># 置信度
</span>    <span class="n">boxes</span> <span class="o">=</span> <span class="n">results</span><span class="p">.</span><span class="n">boxes</span>            <span class="c1"># 边界框
</span>    <span class="n">masks</span> <span class="o">=</span> <span class="n">results</span><span class="p">.</span><span class="n">segmasks</span>         <span class="c1"># 分割掩码
</span>
    <span class="k">return</span> <span class="n">annotated_frame</span><span class="p">,</span> <span class="n">boxes</span><span class="p">,</span> <span class="n">masks</span><span class="p">,</span> <span class="n">labels</span><span class="p">,</span> <span class="n">scores</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">create_semantic_object</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">mask</span><span class="p">,</span> <span class="n">label</span><span class="p">,</span> <span class="n">score</span><span class="p">,</span> <span class="n">annotated</span><span class="p">,</span>
                          <span class="n">latest_image</span><span class="p">,</span> <span class="n">latest_depth</span><span class="p">,</span> <span class="n">camera_info</span><span class="p">,</span>
                          <span class="n">latest_transform</span><span class="p">,</span> <span class="n">crop_feature</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">创建语义对象点云</span><span class="sh">"""</span>
    <span class="c1"># 1. 提取掩码区域
</span>    <span class="c1"># 2. 深度图转点云
</span>    <span class="c1"># 3. 坐标变换到地图坐标系
</span>    <span class="c1"># 4. 点云过滤和聚类
</span>    <span class="c1"># 5. 特征提取
</span>    <span class="c1"># 6. 发布语义对象
</span></code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">SemanticMapManager</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="c1"># 数据库配置
</span>        <span class="n">self</span><span class="p">.</span><span class="n">db_path</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nf">get_param</span><span class="p">(</span><span class="sh">"</span><span class="s">~db_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">semantic_map.db</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">renew_db</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nf">get_param</span><span class="p">(</span><span class="sh">"</span><span class="s">~renew_db</span><span class="sh">"</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">database</span> <span class="o">=</span> <span class="nc">SemanticMapDatabase</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">db_path</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">last_seen_imgs_dir</span><span class="p">,</span>
                                           <span class="mi">3</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">renew_db</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">update_db</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">category</span><span class="p">,</span> <span class="n">bbox</span><span class="p">,</span> <span class="n">count</span><span class="p">,</span> <span class="n">x_list</span><span class="p">,</span> <span class="n">y_list</span><span class="p">,</span> <span class="n">z_list</span><span class="p">,</span>
              <span class="n">rgb_list</span><span class="p">,</span> <span class="n">cv_image</span><span class="p">,</span> <span class="n">act_list</span><span class="p">,</span> <span class="n">crop_feature</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">更新数据库</span><span class="sh">"""</span>
    <span class="n">entries</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">database</span><span class="p">.</span><span class="nf">_get_entries_by_category</span><span class="p">(</span><span class="n">category</span><span class="p">)</span>

    <span class="k">if</span> <span class="ow">not</span> <span class="n">entries</span><span class="p">:</span>
        <span class="c1"># 新类别 -&gt; 插入
</span>        <span class="n">label</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">category</span><span class="si">}</span><span class="s">@1</span><span class="sh">"</span>
        <span class="n">self</span><span class="p">.</span><span class="n">database</span><span class="p">.</span><span class="nf">_update_entry</span><span class="p">(</span><span class="n">label</span><span class="p">,</span> <span class="n">bbox</span><span class="p">,</span> <span class="n">x_list</span><span class="p">,</span> <span class="n">y_list</span><span class="p">,</span> <span class="n">z_list</span><span class="p">,</span>
                                   <span class="n">rgb_list</span><span class="p">,</span> <span class="n">act_list</span><span class="p">,</span> <span class="n">crop_feature</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="c1"># 检查是否匹配现有对象
</span>        <span class="k">for</span> <span class="n">entry</span> <span class="ow">in</span> <span class="n">entries</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="nf">bbox_match</span><span class="p">(</span><span class="n">bbox</span><span class="p">,</span> <span class="n">entry</span><span class="p">[</span><span class="sh">"</span><span class="s">bbox</span><span class="sh">"</span><span class="p">]):</span>
                <span class="c1"># 同位置 -&gt; 合并
</span>                <span class="n">self</span><span class="p">.</span><span class="nf">merge_objects</span><span class="p">(</span><span class="n">entry</span><span class="p">,</span> <span class="n">x_list</span><span class="p">,</span> <span class="n">y_list</span><span class="p">,</span> <span class="n">z_list</span><span class="p">,</span> <span class="n">rgb_list</span><span class="p">)</span>
            <span class="k">elif</span> <span class="n">self</span><span class="p">.</span><span class="nf">feature_match</span><span class="p">(</span><span class="n">crop_feature</span><span class="p">,</span> <span class="n">entry</span><span class="p">[</span><span class="sh">"</span><span class="s">feature</span><span class="sh">"</span><span class="p">]):</span>
                <span class="c1"># 不同位置，相同特征 -&gt; 物体移动 -&gt; 更新位置
</span>                <span class="n">self</span><span class="p">.</span><span class="nf">update_object_position</span><span class="p">(</span><span class="n">entry</span><span class="p">,</span> <span class="n">bbox</span><span class="p">,</span> <span class="n">x_list</span><span class="p">,</span> <span class="n">y_list</span><span class="p">,</span> <span class="n">z_list</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">create_bbox_marker</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">bbox</span><span class="p">,</span> <span class="n">label</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">创建边界框标记</span><span class="sh">"""</span>
    <span class="n">marker</span> <span class="o">=</span> <span class="nc">Marker</span><span class="p">()</span>
    <span class="n">marker</span><span class="p">.</span><span class="nb">type</span> <span class="o">=</span> <span class="n">Marker</span><span class="p">.</span><span class="n">CUBE</span>
    <span class="n">marker</span><span class="p">.</span><span class="n">action</span> <span class="o">=</span> <span class="n">Marker</span><span class="p">.</span><span class="n">ADD</span>
    <span class="n">marker</span><span class="p">.</span><span class="n">scale</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">bbox</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">-</span> <span class="n">bbox</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>  <span class="c1"># 宽度
</span>    <span class="n">marker</span><span class="p">.</span><span class="n">scale</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">bbox</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">-</span> <span class="n">bbox</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>  <span class="c1"># 深度
</span>    <span class="n">marker</span><span class="p">.</span><span class="n">scale</span><span class="p">.</span><span class="n">z</span> <span class="o">=</span> <span class="n">bbox</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">-</span> <span class="n">bbox</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>  <span class="c1"># 高度
</span>    <span class="n">marker</span><span class="p">.</span><span class="n">color</span><span class="p">.</span><span class="n">r</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">bbox_color</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">marker</span><span class="p">.</span><span class="n">color</span><span class="p">.</span><span class="n">g</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">bbox_color</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
    <span class="n">marker</span><span class="p">.</span><span class="n">color</span><span class="p">.</span><span class="n">b</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">bbox_color</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
    <span class="n">marker</span><span class="p">.</span><span class="n">color</span><span class="p">.</span><span class="n">a</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">bbox_alpha</span>
    <span class="k">return</span> <span class="n">marker</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Guide服务
</span><span class="n">service_guide_server</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">Service</span><span class="p">(</span><span class="sh">"</span><span class="s">semantic_map_guide</span><span class="sh">"</span><span class="p">,</span> <span class="n">Guide</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">guide_callback</span><span class="p">)</span>

<span class="c1"># 请求参数:
# - category: 导航目标类别
# - op_cmd: 操作命令
# - origin_cmd: 原始用户指令
</span>
<span class="c1"># 响应参数:
# - success: 成功标志
# - message: 响应消息
# - label: 具体语义对象标签
# - nav_goals: 导航点列表
</span></code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">guide_callback</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">req</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">处理导航指导请求</span><span class="sh">"""</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="c1"># 1. 查找语义对象
</span>        <span class="k">if</span> <span class="n">req</span><span class="p">.</span><span class="n">category</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">semantic_categories</span><span class="p">:</span>
            <span class="c1"># 按类别查找
</span>            <span class="n">label</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">find_semantic_object_by_category</span><span class="p">(</span><span class="n">req</span><span class="p">.</span><span class="n">category</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="c1"># 按语言描述查找
</span>            <span class="n">label</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">find_semantic_object_by_language</span><span class="p">(</span><span class="n">req</span><span class="p">.</span><span class="n">category</span><span class="p">,</span> <span class="n">req</span><span class="p">.</span><span class="n">op_cmd</span><span class="p">)</span>

        <span class="c1"># 2. 获取理想操作方向
</span>        <span class="n">ideal_direction</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">get_ideal_operate_direction</span><span class="p">(</span><span class="n">label</span><span class="p">,</span> <span class="n">req</span><span class="p">.</span><span class="n">op_cmd</span><span class="p">)</span>

        <span class="c1"># 3. 生成导航目标点
</span>        <span class="n">nav_goals</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">get_ideal_navi_goals</span><span class="p">(</span><span class="n">label</span><span class="p">,</span> <span class="n">req</span><span class="p">.</span><span class="n">op_cmd</span><span class="p">)</span>

        <span class="k">return</span> <span class="nc">GuideResponse</span><span class="p">(</span><span class="n">success</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="n">label</span><span class="p">,</span> <span class="n">nav_goals</span><span class="o">=</span><span class="n">nav_goals</span><span class="p">)</span>

    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="k">return</span> <span class="nc">GuideResponse</span><span class="p">(</span><span class="n">success</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">message</span><span class="o">=</span><span class="nf">str</span><span class="p">(</span><span class="n">e</span><span class="p">))</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">find_semantic_object_by_language</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">category</span><span class="p">,</span> <span class="n">language</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">通过语言描述查找语义对象</span><span class="sh">"""</span>
    <span class="c1"># 1. 获取所有同类别的对象
</span>    <span class="n">entries</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">database</span><span class="p">.</span><span class="nf">_get_entries_by_category</span><span class="p">(</span><span class="n">category</span><span class="p">)</span>

    <span class="c1"># 2. 获取对象的图像
</span>    <span class="n">img_paths</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">database</span><span class="p">.</span><span class="nf">_get_last_seen_img_path</span><span class="p">(</span><span class="n">entry</span><span class="p">[</span><span class="sh">"</span><span class="s">label</span><span class="sh">"</span><span class="p">])</span>
                 <span class="k">for</span> <span class="n">entry</span> <span class="ow">in</span> <span class="n">entries</span><span class="p">]</span>

    <span class="c1"># 3. 使用CLIP进行语言-图像匹配
</span>    <span class="n">match_pairs</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">lang_imgs_match</span><span class="p">(</span><span class="n">language</span><span class="p">,</span> <span class="n">img_paths</span><span class="p">)</span>

    <span class="c1"># 4. 选择最佳匹配
</span>    <span class="n">best_match</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">match_pairs</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
    <span class="k">return</span> <span class="n">best_match</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</code></pre></div></div> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"categories"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="s2">"toilet"</span><span class="p">,</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">马桶</span><span class="w">
    </span><span class="s2">"washing-basin"</span><span class="p">,</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">洗手盆</span><span class="w">
    </span><span class="s2">"washing-machine"</span><span class="p">,</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">洗衣机</span><span class="w">
    </span><span class="s2">"microwave-oven"</span><span class="p">,</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">微波炉</span><span class="w">
    </span><span class="s2">"table"</span><span class="p">,</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">桌子</span><span class="w">
    </span><span class="s2">"refrigerator"</span><span class="p">,</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">冰箱</span><span class="w">
    </span><span class="s2">"sofa"</span><span class="p">,</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">沙发</span><span class="w">
    </span><span class="s2">"chair"</span><span class="p">,</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">椅子</span><span class="w">
    </span><span class="s2">"vase"</span><span class="p">,</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">花瓶</span><span class="w">
    </span><span class="s2">"bottled-drinks"</span><span class="p">,</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">瓶装饮料</span><span class="w">
    </span><span class="s2">"bedside-table"</span><span class="p">,</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">床头柜</span><span class="w">
    </span><span class="s2">"bed"</span><span class="p">,</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">床</span><span class="w">
    </span><span class="s2">"television"</span><span class="p">,</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">电视</span><span class="w">
    </span><span class="s2">"human"</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">人</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <pre><code class="language-shellscript"># 启动完整语义地图系统
roslaunch semantic_map_pkg semantic_map.launch

# 自定义参数启动
roslaunch semantic_map_pkg semantic_map.launch \
    semantic_map/generator/det_seg_mode:=yoesam \
    semantic_map/manager/renew_db:=false
</code></pre> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">rospy</span>
<span class="kn">from</span> <span class="n">semantic_map_pkg.srv</span> <span class="kn">import</span> <span class="n">Guide</span>

<span class="c1"># 等待服务可用
</span><span class="n">rospy</span><span class="p">.</span><span class="nf">wait_for_service</span><span class="p">(</span><span class="sh">'</span><span class="s">semantic_map_guide</span><span class="sh">'</span><span class="p">)</span>
<span class="n">guide_service</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">ServiceProxy</span><span class="p">(</span><span class="sh">'</span><span class="s">semantic_map_guide</span><span class="sh">'</span><span class="p">,</span> <span class="n">Guide</span><span class="p">)</span>

<span class="c1"># 调用服务
</span><span class="n">response</span> <span class="o">=</span> <span class="nf">guide_service</span><span class="p">(</span>
    <span class="n">category</span><span class="o">=</span><span class="sh">"</span><span class="s">washing-machine</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">op_cmd</span><span class="o">=</span><span class="sh">"</span><span class="s">打开洗衣机门</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">origin_cmd</span><span class="o">=</span><span class="sh">"</span><span class="s">帮我打开洗衣机</span><span class="sh">"</span>
<span class="p">)</span>

<span class="k">if</span> <span class="n">response</span><span class="p">.</span><span class="n">success</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">找到对象: </span><span class="si">{</span><span class="n">response</span><span class="p">.</span><span class="n">label</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">导航目标数量: </span><span class="si">{</span><span class="nf">len</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">nav_goals</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">查找失败: </span><span class="si">{</span><span class="n">response</span><span class="p">.</span><span class="n">message</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <hr/> <p><strong>User</strong></p> <p>用一个图为我展示一下semantic_map 的功能，包含输入、输出、服务、消息</p> <hr/> <p><strong>Cursor</strong></p> <p>基于我对semantic_map的深入分析，我来为您绘制一个详细的功能架构图：</p> <h2 id="semantic-map-功能架构图">Semantic Map 功能架构图</h2> <pre><code class="language-mermaid">graph TB
    %% 传感器输入层
    subgraph "传感器输入层"
        RGBImage[RGB图像&lt;br/&gt;/camera/color/image_raw] --&gt; ImageSync[图像同步器&lt;br/&gt;ApproximateTimeSynchronizer]
        DepthImage[深度图像&lt;br/&gt;/camera/aligned_depth_to_color/image_raw] --&gt; ImageSync
        CameraInfo[相机参数&lt;br/&gt;/camera/color/camera_info] --&gt; ImageSync
        RobotPose[机器人位姿&lt;br/&gt;/robot_pose_ekf/odom_combined] --&gt; TFTransform[TF坐标变换]
        OccupancyMap[占用栅格地图&lt;br/&gt;/map] --&gt; MapTransformer[地图坐标转换器]
    end

    %% 语义生成器
    subgraph "语义地图生成器 (semantic_map_generator_node)"
        ImageSync --&gt; |同步数据| SemanticDetector[语义检测器&lt;br/&gt;VitDetection服务]
        SemanticDetector --&gt; |检测结果| ObjectProcessor[对象处理器]
        ObjectProcessor --&gt; |掩码+深度| PointCloudGenerator[点云生成器]
        PointCloudGenerator --&gt; |3D点云| FeatureExtractor[特征提取器]
        FeatureExtractor --&gt; |语义对象| SemanticObjectPub[语义对象发布器&lt;br/&gt;/semantic_object]

        %% 内部处理
        ObjectProcessor --&gt; |标注图像| AnnotatedPub[标注图像发布器&lt;br/&gt;/semantic_annotated]
        ObjectProcessor --&gt; |掩码图像| MasksPub[掩码图像发布器&lt;br/&gt;/semantic_masks]
    end

    %% 语义管理器
    subgraph "语义地图管理器 (semantic_map_manager_node)"
        SemanticObjectPub --&gt; |语义对象| DatabaseManager[数据库管理器&lt;br/&gt;SemanticMapDatabase]
        DatabaseManager --&gt; |存储数据| SQLiteDB[(SQLite数据库&lt;br/&gt;semantic_map.db)]
        DatabaseManager --&gt; |图像缓存| ImageCache[图像缓存&lt;br/&gt;last_seen_imgs]

        %% 可视化
        DatabaseManager --&gt; |点云数据| PointCloudPub[点云发布器&lt;br/&gt;/semantic_map]
        DatabaseManager --&gt; |可视化数据| MarkerPub[标记发布器&lt;br/&gt;/semantic_map_bbox]

        %% 服务接口
        DatabaseManager -.-&gt;|显示请求| ShowService[显示服务&lt;br/&gt;/semantic_map_show]
    end

    %% 语义指导器
    subgraph "语义地图指导器 (semantic_map_guide_node)"
        GuideService[导航指导服务&lt;br/&gt;/semantic_map_guide] -.-&gt;|指导请求| GuideProcessor[指导处理器]

        %% 外部服务依赖
        GuideProcessor -.-&gt;|推理请求| LLMService[LLM服务&lt;br/&gt;llm_reason]
        GuideProcessor -.-&gt;|视觉请求| VLMService[VLM服务&lt;br/&gt;vlm_chat]
        GuideProcessor -.-&gt;|语义匹配| CLIPService[CLIP服务&lt;br/&gt;clip]

        %% 内部处理
        GuideProcessor --&gt; |类别查找| CategoryMatcher[类别匹配器]
        GuideProcessor --&gt; |语言匹配| LanguageMatcher[语言匹配器]
        GuideProcessor --&gt; |导航规划| NavigationPlanner[导航规划器]

        %% 输出
        NavigationPlanner --&gt; |导航目标| GuideResponse[指导响应&lt;br/&gt;nav_goals]
    end

    %% 外部服务层
    subgraph "外部AI服务"
        YOESAMService[YOESAM检测分割&lt;br/&gt;/vit_detection] -.-&gt;|检测结果| SemanticDetector
        LLMService -.-&gt;|推理结果| GuideProcessor
        VLMService -.-&gt;|视觉理解| GuideProcessor
        CLIPService -.-&gt;|语义匹配| LanguageMatcher
    end

    %% 输出层
    subgraph "输出层"
        PointCloudPub --&gt; |语义点云| RVizVisualization[RViz可视化]
        MarkerPub --&gt; |边界框标记| RVizVisualization
        AnnotatedPub --&gt; |标注图像| ImageDisplay[图像显示]
        MasksPub --&gt; |分割掩码| ImageDisplay
        GuideResponse --&gt; |导航目标| NavigationSystem[导航系统&lt;br/&gt;move_base]
    end

    %% 配置管理
    subgraph "配置管理"
        SemanticCategories[semantic_categories.json] --&gt; |类别配置| SemanticDetector
        SemanticCategories --&gt; |类别配置| CategoryMatcher
        MapCache[map_cache.pkl] --&gt; |地图缓存| MapTransformer
    end

    %% 连接关系
    TFTransform --&gt; |坐标变换| PointCloudGenerator
    MapTransformer --&gt; |坐标转换| NavigationPlanner

    %% 样式定义
    classDef inputStyle fill:#e1f5fe,stroke:#01579b,stroke-width:2px
    classDef processStyle fill:#f3e5f5,stroke:#4a148c,stroke-width:2px
    classDef serviceStyle fill:#fff3e0,stroke:#e65100,stroke-width:2px
    classDef outputStyle fill:#e8f5e8,stroke:#1b5e20,stroke-width:2px
    classDef databaseStyle fill:#fce4ec,stroke:#880e4f,stroke-width:2px
    classDef configStyle fill:#f1f8e9,stroke:#33691e,stroke-width:2px

    %% 应用样式
    class RGBImage,DepthImage,CameraInfo,RobotPose,OccupancyMap inputStyle
    class ImageSync,SemanticDetector,ObjectProcessor,PointCloudGenerator,FeatureExtractor,DatabaseManager,GuideProcessor,CategoryMatcher,LanguageMatcher,NavigationPlanner processStyle
    class YOESAMService,LLMService,VLMService,CLIPService,ShowService,GuideService serviceStyle
    class RVizVisualization,ImageDisplay,NavigationSystem outputStyle
    class SQLiteDB,ImageCache,MapCache databaseStyle
    class SemanticCategories configStyle
</code></pre> <h2 id="详细功能说明-2">详细功能说明</h2> <h3 id="1-传感器输入层">1. 传感器输入层</h3> <ul> <li><strong>RGB图像</strong>: 彩色图像数据，用于对象检测和语义理解</li> <li><strong>深度图像</strong>: 深度信息，用于3D点云生成</li> <li><strong>相机参数</strong>: 相机内参，用于坐标变换</li> <li><strong>机器人位姿</strong>: 机器人当前位置和姿态</li> <li><strong>占用栅格地图</strong>: 2D导航地图</li> </ul> <h3 id="2-语义地图生成器">2. 语义地图生成器</h3> <ul> <li><strong>图像同步器</strong>: 同步RGB、深度和相机参数数据</li> <li><strong>语义检测器</strong>: 调用YOESAM服务进行对象检测和分割</li> <li><strong>对象处理器</strong>: 处理检测结果，生成掩码和标注图像</li> <li><strong>点云生成器</strong>: 将深度图转换为3D点云</li> <li><strong>特征提取器</strong>: 提取对象的图像特征</li> <li><strong>语义对象发布器</strong>: 发布语义对象消息</li> </ul> <h3 id="3-语义地图管理器">3. 语义地图管理器</h3> <ul> <li><strong>数据库管理器</strong>: 管理SQLite数据库中的语义对象</li> <li><strong>SQLite数据库</strong>: 存储语义对象的3D坐标、特征等信息</li> <li><strong>图像缓存</strong>: 保存对象的最后观察图像</li> <li><strong>点云发布器</strong>: 发布语义点云数据</li> <li><strong>标记发布器</strong>: 发布可视化标记（边界框、标签等）</li> <li><strong>显示服务</strong>: 提供语义地图显示服务</li> </ul> <h3 id="4-语义地图指导器">4. 语义地图指导器</h3> <ul> <li><strong>导航指导服务</strong>: 主要的服务接口</li> <li><strong>指导处理器</strong>: 处理导航指导请求</li> <li><strong>类别匹配器</strong>: 按类别查找语义对象</li> <li><strong>语言匹配器</strong>: 通过语言描述查找对象</li> <li><strong>导航规划器</strong>: 生成导航目标点</li> <li><strong>外部AI服务</strong>: 依赖LLM、VLM、CLIP等服务</li> </ul> <h3 id="5-外部ai服务">5. 外部AI服务</h3> <ul> <li><strong>YOESAM服务</strong>: 对象检测和实例分割</li> <li><strong>LLM服务</strong>: 语言理解和推理</li> <li><strong>VLM服务</strong>: 视觉语言理解</li> <li><strong>CLIP服务</strong>: 语义匹配</li> </ul> <h3 id="6-输出层">6. 输出层</h3> <ul> <li><strong>RViz可视化</strong>: 实时显示语义地图和标记</li> <li><strong>图像显示</strong>: 显示标注图像和分割掩码</li> <li><strong>导航系统</strong>: 接收导航目标并执行移动</li> </ul> <h3 id="7-配置管理">7. 配置管理</h3> <ul> <li><strong>语义类别配置</strong>: 定义支持的语义对象类别</li> <li><strong>地图缓存</strong>: 缓存地图坐标转换信息</li> </ul> <h3 id="8-关键消息和服务">8. 关键消息和服务</h3> <h4 id="消息类型">消息类型:</h4> <ul> <li><code class="language-plaintext highlighter-rouge">/semantic_object</code>: 语义对象消息</li> <li><code class="language-plaintext highlighter-rouge">/semantic_map</code>: 语义点云消息</li> <li><code class="language-plaintext highlighter-rouge">/semantic_map_bbox</code>: 可视化标记消息</li> <li><code class="language-plaintext highlighter-rouge">/semantic_annotated</code>: 标注图像消息</li> <li><code class="language-plaintext highlighter-rouge">/semantic_masks</code>: 分割掩码消息</li> </ul> <h4 id="服务接口">服务接口:</h4> <ul> <li><code class="language-plaintext highlighter-rouge">/semantic_map_guide</code>: 导航指导服务</li> <li><code class="language-plaintext highlighter-rouge">/semantic_map_show</code>: 显示服务</li> <li><code class="language-plaintext highlighter-rouge">/vit_detection</code>: 检测分割服务</li> <li><code class="language-plaintext highlighter-rouge">/clip</code>: 语义匹配服务</li> </ul> <p>这个架构图展示了semantic_map从传感器输入到导航输出的完整处理流程，以及各个组件之间的数据流和服务调用关系。</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>graph TB
    %% 传感器输入层
    subgraph "传感器输入层"
        RGBImage[RGB图像&lt;br/&gt;/camera/color/image_raw] --&gt; ImageSync[图像同步器&lt;br/&gt;ApproximateTimeSynchronizer]
        DepthImage[深度图像&lt;br/&gt;/camera/aligned_depth_to_color/image_raw] --&gt; ImageSync
        CameraInfo[相机参数&lt;br/&gt;/camera/color/camera_info] --&gt; ImageSync
        RobotPose[机器人位姿&lt;br/&gt;/robot_pose_ekf/odom_combined] --&gt; TFTransform[TF坐标变换]
        OccupancyMap[占用栅格地图&lt;br/&gt;/map] --&gt; MapTransformer[地图坐标转换器]
    end

    %% 语义生成器
    subgraph "语义地图生成器 (semantic_map_generator_node)"
        ImageSync --&gt; |同步数据| SemanticDetector[语义检测器&lt;br/&gt;VitDetection服务]
        SemanticDetector --&gt; |检测结果| ObjectProcessor[对象处理器]
        ObjectProcessor --&gt; |掩码+深度| PointCloudGenerator[点云生成器]
        PointCloudGenerator --&gt; |3D点云| FeatureExtractor[特征提取器]
        FeatureExtractor --&gt; |语义对象| SemanticObjectPub[语义对象发布器&lt;br/&gt;/semantic_object]

        %% 内部处理
        ObjectProcessor --&gt; |标注图像| AnnotatedPub[标注图像发布器&lt;br/&gt;/semantic_annotated]
        ObjectProcessor --&gt; |掩码图像| MasksPub[掩码图像发布器&lt;br/&gt;/semantic_masks]
    end

    %% 语义管理器
    subgraph "语义地图管理器 (semantic_map_manager_node)"
        SemanticObjectPub --&gt; |语义对象| DatabaseManager[数据库管理器&lt;br/&gt;SemanticMapDatabase]
        DatabaseManager --&gt; |存储数据| SQLiteDB[(SQLite数据库&lt;br/&gt;semantic_map.db)]
        DatabaseManager --&gt; |图像缓存| ImageCache[图像缓存&lt;br/&gt;last_seen_imgs]

        %% 可视化
        DatabaseManager --&gt; |点云数据| PointCloudPub[点云发布器&lt;br/&gt;/semantic_map]
        DatabaseManager --&gt; |可视化数据| MarkerPub[标记发布器&lt;br/&gt;/semantic_map_bbox]

        %% 服务接口
        DatabaseManager -.-&gt;|显示请求| ShowService[显示服务&lt;br/&gt;/semantic_map_show]
    end

    %% 语义指导器
    subgraph "语义地图指导器 (semantic_map_guide_node)"
        GuideService[导航指导服务&lt;br/&gt;/semantic_map_guide] -.-&gt;|指导请求| GuideProcessor[指导处理器]

        %% 外部服务依赖
        GuideProcessor -.-&gt;|推理请求| LLMService[LLM服务&lt;br/&gt;llm_reason]
        GuideProcessor -.-&gt;|视觉请求| VLMService[VLM服务&lt;br/&gt;vlm_chat]
        GuideProcessor -.-&gt;|语义匹配| CLIPService[CLIP服务&lt;br/&gt;clip]

        %% 内部处理
        GuideProcessor --&gt; |类别查找| CategoryMatcher[类别匹配器]
        GuideProcessor --&gt; |语言匹配| LanguageMatcher[语言匹配器]
        GuideProcessor --&gt; |导航规划| NavigationPlanner[导航规划器]

        %% 输出
        NavigationPlanner --&gt; |导航目标| GuideResponse[指导响应&lt;br/&gt;nav_goals]
    end

    %% 外部服务层
    subgraph "外部AI服务"
        YOESAMService[YOESAM检测分割&lt;br/&gt;/vit_detection] -.-&gt;|检测结果| SemanticDetector
        LLMService -.-&gt;|推理结果| GuideProcessor
        VLMService -.-&gt;|视觉理解| GuideProcessor
        CLIPService -.-&gt;|语义匹配| LanguageMatcher
    end

    %% 输出层
    subgraph "输出层"
        PointCloudPub --&gt; |语义点云| RVizVisualization[RViz可视化]
        MarkerPub --&gt; |边界框标记| RVizVisualization
        AnnotatedPub --&gt; |标注图像| ImageDisplay[图像显示]
        MasksPub --&gt; |分割掩码| ImageDisplay
        GuideResponse --&gt; |导航目标| NavigationSystem[导航系统&lt;br/&gt;move_base]
    end

    %% 配置管理
    subgraph "配置管理"
        SemanticCategories[semantic_categories.json] --&gt; |类别配置| SemanticDetector
        SemanticCategories --&gt; |类别配置| CategoryMatcher
        MapCache[map_cache.pkl] --&gt; |地图缓存| MapTransformer
    end

    %% 连接关系
    TFTransform --&gt; |坐标变换| PointCloudGenerator
    MapTransformer --&gt; |坐标转换| NavigationPlanner

    %% 样式定义
    classDef inputStyle fill:#e1f5fe,stroke:#01579b,stroke-width:2px
    classDef processStyle fill:#f3e5f5,stroke:#4a148c,stroke-width:2px
    classDef serviceStyle fill:#fff3e0,stroke:#e65100,stroke-width:2px
    classDef outputStyle fill:#e8f5e8,stroke:#1b5e20,stroke-width:2px
    classDef databaseStyle fill:#fce4ec,stroke:#880e4f,stroke-width:2px
    classDef configStyle fill:#f1f8e9,stroke:#33691e,stroke-width:2px

    %% 应用样式
    class RGBImage,DepthImage,CameraInfo,RobotPose,OccupancyMap inputStyle
    class ImageSync,SemanticDetector,ObjectProcessor,PointCloudGenerator,FeatureExtractor,DatabaseManager,GuideProcessor,CategoryMatcher,LanguageMatcher,NavigationPlanner processStyle
    class YOESAMService,LLMService,VLMService,CLIPService,ShowService,GuideService serviceStyle
    class RVizVisualization,ImageDisplay,NavigationSystem outputStyle
    class SQLiteDB,ImageCache,MapCache databaseStyle
    class SemanticCategories configStyle
</code></pre></div></div> <hr/> <p><strong>User</strong></p> <p>请详细解释一下 Cerebellum 中的 wheel_dir 部分</p> <hr/> <p><strong>Cursor</strong></p> <p>让我详细分析Cerebellum模块中的wheel_dir部分。首先查看相关的代码文件来了解其完整实现。</p> <p>基于我对代码的深入分析，现在我来详细讲解Cerebellum模块中的wheel_dir部分：</p> <h1 id="cerebellum模块---wheel_dir-详细讲解">Cerebellum模块 - wheel_dir 详细讲解</h1> <h2 id="1-模块概述-4">1. 模块概述</h2> <p><code class="language-plaintext highlighter-rouge">wheel_dir</code>是YanBot系统的<strong>轮式机器人底盘控制模块</strong>，基于Wheeltec机器人平台，提供完整的导航、定位、建图等功能。这是机器人的”运动系统”，负责机器人的移动控制。</p> <h3 id="11-核心功能-4">1.1 核心功能</h3> <ul> <li><strong>底盘控制</strong>: 控制机器人轮式底盘的运动</li> <li><strong>导航系统</strong>: 2D/3D路径规划和导航</li> <li><strong>定位系统</strong>: 基于激光雷达的定位</li> <li><strong>建图系统</strong>: SLAM建图和地图管理</li> <li><strong>探索系统</strong>: 自主探索未知环境</li> </ul> <h3 id="12-架构设计-4">1.2 架构设计</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   底盘控制层    │    │   导航规划层    │    │   感知定位层    │
│                 │    │                 │    │                 │
│ • 串口通信      │    │ • move_base     │    │ • 激光雷达      │
│ • 运动控制      │    │ • TEB规划器     │    │ • AMCL定位      │
│ • 里程计        │    │ • 代价地图      │    │ • 地图服务器    │
└─────────────────┘    └─────────────────┘    └─────────────────┘
</code></pre></div></div> <h2 id="2-核心组件详解-4">2. 核心组件详解</h2> <h3 id="21-底盘控制系统">2.1 底盘控制系统</h3> <h4 id="a-主启动文件-turn_on_wheeltec_robotlaunch">A. 主启动文件 (<code class="language-plaintext highlighter-rouge">turn_on_wheeltec_robot.launch</code>)</h4> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;launch&gt;</span>
  <span class="c">&lt;!-- 车型参数 --&gt;</span>
  <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"car_mode"</span> <span class="na">default=</span><span class="s">"brushless_senior_diff"</span><span class="nt">/&gt;</span>

  <span class="c">&lt;!-- 导航功能开关 --&gt;</span>
  <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"navigation"</span> <span class="na">default=</span><span class="s">"false"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"pure3d_nav"</span> <span class="na">default=</span><span class="s">"false"</span><span class="nt">/&gt;</span>

  <span class="c">&lt;!-- 底层串口控制 --&gt;</span>
  <span class="nt">&lt;include</span> <span class="na">file=</span><span class="s">"$(find turn_on_wheeltec_robot)/launch/include/base_serial.launch"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"odom_frame_id"</span> <span class="na">value=</span><span class="s">"$(arg odom_frame_id)"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;/include&gt;</span>

  <span class="c">&lt;!-- 导航规划器 --&gt;</span>
  <span class="nt">&lt;include</span> <span class="na">file=</span><span class="s">"$(find turn_on_wheeltec_robot)/launch/include/teb_local_planner.launch"</span>
           <span class="na">if=</span><span class="s">"$(arg navigation)"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"car_mode"</span> <span class="na">value=</span><span class="s">"$(arg car_mode)"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;/include&gt;</span>

  <span class="c">&lt;!-- 机器人模型可视化 --&gt;</span>
  <span class="nt">&lt;include</span> <span class="na">file=</span><span class="s">"$(find turn_on_wheeltec_robot)/launch/robot_model_visualization.launch"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"car_mode"</span> <span class="na">value=</span><span class="s">"$(arg car_mode)"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;/include&gt;</span>

  <span class="c">&lt;!-- 扩展卡尔曼滤波 --&gt;</span>
  <span class="nt">&lt;include</span> <span class="na">file=</span><span class="s">"$(find turn_on_wheeltec_robot)/launch/include/robot_pose_ekf.launch"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/launch&gt;</span>
</code></pre></div></div> <h4 id="b-串口控制-base_seriallaunch">B. 串口控制 (<code class="language-plaintext highlighter-rouge">base_serial.launch</code>)</h4> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;launch&gt;</span>
  <span class="nt">&lt;node</span> <span class="na">pkg=</span><span class="s">"turn_on_wheeltec_robot"</span> <span class="na">type=</span><span class="s">"wheeltec_robot_node"</span>
        <span class="na">name=</span><span class="s">"wheeltec_robot"</span> <span class="na">output=</span><span class="s">"screen"</span><span class="nt">&gt;</span>
    <span class="c">&lt;!-- 串口配置 --&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"usart_port_name"</span> <span class="na">type=</span><span class="s">"string"</span> <span class="na">value=</span><span class="s">"/dev/wheeltec_controller"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"serial_baud_rate"</span> <span class="na">type=</span><span class="s">"int"</span> <span class="na">value=</span><span class="s">"115200"</span><span class="nt">/&gt;</span>

    <span class="c">&lt;!-- 坐标系配置 --&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"odom_frame_id"</span> <span class="na">type=</span><span class="s">"string"</span> <span class="na">value=</span><span class="s">"odom_combined"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"robot_frame_id"</span> <span class="na">type=</span><span class="s">"string"</span> <span class="na">value=</span><span class="s">"base_footprint"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"gyro_frame_id"</span> <span class="na">type=</span><span class="s">"string"</span> <span class="na">value=</span><span class="s">"gyro_link"</span><span class="nt">/&gt;</span>

    <span class="c">&lt;!-- 车型配置 --&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"car_mode"</span> <span class="na">type=</span><span class="s">"string"</span> <span class="na">value=</span><span class="s">"$(arg car_mode)"</span><span class="nt">/&gt;</span>

    <span class="c">&lt;!-- 里程计修正参数 --&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"odom_x_scale"</span> <span class="na">type=</span><span class="s">"double"</span> <span class="na">value=</span><span class="s">"1.0"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"odom_y_scale"</span> <span class="na">type=</span><span class="s">"double"</span> <span class="na">value=</span><span class="s">"1.0"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;/node&gt;</span>
<span class="nt">&lt;/launch&gt;</span>
</code></pre></div></div> <h3 id="22-导航系统">2.2 导航系统</h3> <h4 id="a-导航启动文件-navigationlaunch">A. 导航启动文件 (<code class="language-plaintext highlighter-rouge">navigation.launch</code>)</h4> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;launch&gt;</span>
  <span class="c">&lt;!-- 开启机器人底层和导航功能 --&gt;</span>
  <span class="nt">&lt;include</span> <span class="na">file=</span><span class="s">"$(find turn_on_wheeltec_robot)/launch/turn_on_wheeltec_robot.launch"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"navigation"</span> <span class="na">default=</span><span class="s">"true"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;/include&gt;</span>

  <span class="c">&lt;!-- 激光雷达 --&gt;</span>
  <span class="nt">&lt;include</span> <span class="na">file=</span><span class="s">"$(find turn_on_wheeltec_robot)/launch/mid360_laserscan.launch"</span><span class="nt">/&gt;</span>

  <span class="c">&lt;!-- 地图服务器 --&gt;</span>
  <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"map_file"</span> <span class="na">default=</span><span class="s">"$(find turn_on_wheeltec_robot)/map/WHEELTEC.yaml"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;node</span> <span class="na">name=</span><span class="s">"map_server_for_test"</span> <span class="na">pkg=</span><span class="s">"map_server"</span> <span class="na">type=</span><span class="s">"map_server"</span>
        <span class="na">args=</span><span class="s">"$(arg map_file)"</span><span class="nt">/&gt;</span>

  <span class="c">&lt;!-- AMCL定位 --&gt;</span>
  <span class="nt">&lt;include</span> <span class="na">file=</span><span class="s">"$(find turn_on_wheeltec_robot)/launch/include/amcl.launch"</span><span class="nt">/&gt;</span>

  <span class="c">&lt;!-- 标记功能节点 --&gt;</span>
  <span class="nt">&lt;node</span> <span class="na">name=</span><span class="s">"send_mark"</span> <span class="na">pkg=</span><span class="s">"turn_on_wheeltec_robot"</span> <span class="na">type=</span><span class="s">"send_mark.py"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/launch&gt;</span>
</code></pre></div></div> <h4 id="b-teb局部规划器-teb_local_plannerlaunch">B. TEB局部规划器 (<code class="language-plaintext highlighter-rouge">teb_local_planner.launch</code>)</h4> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;launch&gt;</span>
  <span class="c">&lt;!-- 导航公共参数 --&gt;</span>
  <span class="nt">&lt;rosparam</span> <span class="na">file=</span><span class="s">"$(find turn_on_wheeltec_robot)/params_nav_common/move_base_params.yaml"</span>
            <span class="na">command=</span><span class="s">"load"</span> <span class="na">ns=</span><span class="s">"move_base"</span><span class="nt">/&gt;</span>

  <span class="c">&lt;!-- TEB局部规划器参数 --&gt;</span>
  <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"move_base/base_local_planner"</span> <span class="na">type=</span><span class="s">"string"</span>
         <span class="na">value=</span><span class="s">"teb_local_planner/TebLocalPlannerROS"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;rosparam</span> <span class="na">file=</span><span class="s">"$(find turn_on_wheeltec_robot)/params_nav_common/teb_local_planner_params.yaml"</span>
            <span class="na">command=</span><span class="s">"load"</span> <span class="na">ns=</span><span class="s">"move_base"</span><span class="nt">/&gt;</span>

  <span class="c">&lt;!-- 代价地图参数 --&gt;</span>
  <span class="nt">&lt;rosparam</span> <span class="na">file=</span><span class="s">"$(find turn_on_wheeltec_robot)/params_costmap_common/costmap_common_params.yaml"</span>
            <span class="na">command=</span><span class="s">"load"</span> <span class="na">ns=</span><span class="s">"move_base/global_costmap"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;rosparam</span> <span class="na">file=</span><span class="s">"$(find turn_on_wheeltec_robot)/params_costmap_common/costmap_common_params.yaml"</span>
            <span class="na">command=</span><span class="s">"load"</span> <span class="na">ns=</span><span class="s">"move_base/local_costmap"</span><span class="nt">/&gt;</span>

  <span class="c">&lt;!-- 启动move_base节点 --&gt;</span>
  <span class="nt">&lt;node</span> <span class="na">pkg=</span><span class="s">"move_base"</span> <span class="na">type=</span><span class="s">"move_base"</span> <span class="na">respawn=</span><span class="s">"false"</span> <span class="na">name=</span><span class="s">"move_base"</span> <span class="na">output=</span><span class="s">"screen"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;rosparam</span> <span class="na">file=</span><span class="s">"$(find turn_on_wheeltec_robot)/params_costmap_car/param_$(arg car_mode)/teb_local_planner_params.yaml"</span>
              <span class="na">command=</span><span class="s">"load"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;/node&gt;</span>
<span class="nt">&lt;/launch&gt;</span>
</code></pre></div></div> <h3 id="23-定位系统">2.3 定位系统</h3> <h4 id="a-amcl定位-amcllaunch">A. AMCL定位 (<code class="language-plaintext highlighter-rouge">amcl.launch</code>)</h4> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;launch&gt;</span>
  <span class="nt">&lt;node</span> <span class="na">pkg=</span><span class="s">"amcl"</span> <span class="na">type=</span><span class="s">"amcl"</span> <span class="na">name=</span><span class="s">"amcl"</span> <span class="na">clear_params=</span><span class="s">"true"</span><span class="nt">&gt;</span>
    <span class="c">&lt;!-- 基本参数 --&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"use_map_topic"</span> <span class="na">value=</span><span class="s">"$(arg use_map_topic)"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"scan_topic"</span> <span class="na">value=</span><span class="s">"$(arg scan_topic)"</span><span class="nt">/&gt;</span>

    <span class="c">&lt;!-- 里程计模型 --&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"odom_model_type"</span> <span class="na">value=</span><span class="s">"omni-corrected"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"odom_alpha1"</span> <span class="na">value=</span><span class="s">"0.2"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"odom_alpha2"</span> <span class="na">value=</span><span class="s">"0.2"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"odom_alpha3"</span> <span class="na">value=</span><span class="s">"0.2"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"odom_alpha4"</span> <span class="na">value=</span><span class="s">"0.2"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"odom_alpha5"</span> <span class="na">value=</span><span class="s">"0.1"</span><span class="nt">/&gt;</span>

    <span class="c">&lt;!-- 激光雷达模型 --&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"laser_model_type"</span> <span class="na">value=</span><span class="s">"likelihood_field"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"laser_z_hit"</span> <span class="na">value=</span><span class="s">"0.5"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"laser_z_short"</span> <span class="na">value=</span><span class="s">"0.05"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"laser_z_max"</span> <span class="na">value=</span><span class="s">"0.05"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"laser_z_rand"</span> <span class="na">value=</span><span class="s">"0.5"</span><span class="nt">/&gt;</span>

    <span class="c">&lt;!-- 粒子滤波器参数 --&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"min_particles"</span> <span class="na">value=</span><span class="s">"500"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"max_particles"</span> <span class="na">value=</span><span class="s">"2000"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"kld_err"</span> <span class="na">value=</span><span class="s">"0.05"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"kld_z"</span> <span class="na">value=</span><span class="s">"0.99"</span><span class="nt">/&gt;</span>

    <span class="c">&lt;!-- 更新参数 --&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"update_min_d"</span> <span class="na">value=</span><span class="s">"0.25"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"update_min_a"</span> <span class="na">value=</span><span class="s">"0.2"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"odom_frame_id"</span> <span class="na">value=</span><span class="s">"odom_combined"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;/node&gt;</span>
<span class="nt">&lt;/launch&gt;</span>
</code></pre></div></div> <h3 id="24-激光雷达系统">2.4 激光雷达系统</h3> <h4 id="a-mid360激光雷达-mid360_laserscanlaunch">A. MID360激光雷达 (<code class="language-plaintext highlighter-rouge">mid360_laserscan.launch</code>)</h4> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;launch&gt;</span>
  <span class="c">&lt;!-- Livox MID360激光雷达驱动 --&gt;</span>
  <span class="nt">&lt;include</span> <span class="na">file=</span><span class="s">"$(find livox_ros_driver2)/launch_ROS1/msg_MID360.launch"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"xfer_format"</span> <span class="na">value=</span><span class="s">"0"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;/include&gt;</span>

  <span class="c">&lt;!-- 点云转激光扫描 --&gt;</span>
  <span class="nt">&lt;include</span> <span class="na">file=</span><span class="s">"$(find turn_on_wheeltec_robot)/launch/include/PointsCloud2toLaserscan.launch"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/launch&gt;</span>
</code></pre></div></div> <h3 id="25-标记系统-send_markpy">2.5 标记系统 (<code class="language-plaintext highlighter-rouge">send_mark.py</code>)</h3> <p><strong>功能</strong>: 提供RViz中的导航标记功能，支持多点巡航</p> <p><strong>核心功能</strong>:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">navGoal_callback</span><span class="p">(</span><span class="n">msg</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">RViz中NavGoal标记的回调函数</span><span class="sh">"""</span>
    <span class="k">global</span> <span class="n">index</span><span class="p">,</span> <span class="n">count</span>

    <span class="c1"># 创建箭头标记
</span>    <span class="n">marker</span> <span class="o">=</span> <span class="nc">Marker</span><span class="p">()</span>
    <span class="n">marker</span><span class="p">.</span><span class="n">header</span><span class="p">.</span><span class="n">frame_id</span> <span class="o">=</span> <span class="sh">"</span><span class="s">map</span><span class="sh">"</span>
    <span class="n">marker</span><span class="p">.</span><span class="nb">type</span> <span class="o">=</span> <span class="n">marker</span><span class="p">.</span><span class="n">ARROW</span>
    <span class="n">marker</span><span class="p">.</span><span class="n">action</span> <span class="o">=</span> <span class="n">marker</span><span class="p">.</span><span class="n">ADD</span>
    <span class="n">marker</span><span class="p">.</span><span class="n">scale</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mf">0.5</span>
    <span class="n">marker</span><span class="p">.</span><span class="n">scale</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="mf">0.05</span>
    <span class="n">marker</span><span class="p">.</span><span class="n">scale</span><span class="p">.</span><span class="n">z</span> <span class="o">=</span> <span class="mf">0.05</span>
    <span class="n">marker</span><span class="p">.</span><span class="n">color</span><span class="p">.</span><span class="n">a</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="n">marker</span><span class="p">.</span><span class="n">color</span><span class="p">.</span><span class="n">r</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="n">marker</span><span class="p">.</span><span class="n">color</span><span class="p">.</span><span class="n">g</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">marker</span><span class="p">.</span><span class="n">color</span><span class="p">.</span><span class="n">b</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">marker</span><span class="p">.</span><span class="n">pose</span> <span class="o">=</span> <span class="n">msg</span><span class="p">.</span><span class="n">pose</span>
    <span class="n">markerArray</span><span class="p">.</span><span class="n">markers</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">marker</span><span class="p">)</span>

    <span class="c1"># 创建数字标记
</span>    <span class="n">marker_number</span> <span class="o">=</span> <span class="nc">Marker</span><span class="p">()</span>
    <span class="n">marker_number</span><span class="p">.</span><span class="nb">type</span> <span class="o">=</span> <span class="n">marker_number</span><span class="p">.</span><span class="n">TEXT_VIEW_FACING</span>
    <span class="n">marker_number</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">count</span><span class="p">)</span>
    <span class="n">markerArray_number</span><span class="p">.</span><span class="n">markers</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">marker_number</span><span class="p">)</span>
</code></pre></div></div> <p><strong>巡航功能</strong>:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">pose_callback</span><span class="p">(</span><span class="n">msg</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">到达目标点的回调函数</span><span class="sh">"""</span>
    <span class="k">if</span> <span class="n">msg</span><span class="p">.</span><span class="n">status</span><span class="p">.</span><span class="n">status</span> <span class="o">==</span> <span class="mi">3</span> <span class="ow">and</span> <span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>  <span class="c1"># 成功到达
</span>        <span class="k">if</span> <span class="n">index</span> <span class="o">==</span> <span class="n">count</span><span class="p">:</span>  <span class="c1"># 所有目标点完成，重新开始
</span>            <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">elif</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="n">count</span><span class="p">:</span>  <span class="c1"># 前往下一个目标点
</span>            <span class="n">pose</span> <span class="o">=</span> <span class="nc">PoseStamped</span><span class="p">()</span>
            <span class="n">pose</span><span class="p">.</span><span class="n">pose</span> <span class="o">=</span> <span class="n">markerArray</span><span class="p">.</span><span class="n">markers</span><span class="p">[</span><span class="n">index</span><span class="p">].</span><span class="n">pose</span>
            <span class="n">goal_pub</span><span class="p">.</span><span class="nf">publish</span><span class="p">(</span><span class="n">pose</span><span class="p">)</span>
            <span class="n">index</span> <span class="o">+=</span> <span class="mi">1</span>
</code></pre></div></div> <h2 id="3-支持的车型配置">3. 支持的车型配置</h2> <h3 id="31-车型类型">3.1 车型类型</h3> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- 支持的车型模式 --&gt;</span>
<span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"car_mode"</span> <span class="na">default=</span><span class="s">"brushless_senior_diff"</span>
     <span class="na">doc=</span><span class="s">"opt: mini_akm,senior_akm,top_akm_bs,top_akm_dl,
                 mini_mec,senior_mec_bs,senior_mec_dl,top_mec_bs,top_mec_dl,
                 mini_omni,senior_omni,top_omni,
                 mini_4wd,senior_4wd_bs,senior_4wd_dl,top_4wd_bs,top_4wd_dl,
                 mini_tank,mini_diff,senior_diff,four_wheel_diff_bs,
                 brushless_senior_diff"</span><span class="nt">/&gt;</span>
</code></pre></div></div> <h3 id="32-车型分类">3.2 车型分类</h3> <ul> <li><strong>AKM系列</strong>: 阿克曼转向车型</li> <li><strong>MEC系列</strong>: 麦克纳姆轮车型</li> <li><strong>OMNI系列</strong>: 全向轮车型</li> <li><strong>4WD系列</strong>: 四轮驱动车型</li> <li><strong>TANK系列</strong>: 履带车型</li> <li><strong>DIFF系列</strong>: 差速转向车型</li> </ul> <h2 id="4-系统集成特点-1">4. 系统集成特点</h2> <h3 id="41-模块化设计">4.1 模块化设计</h3> <ul> <li><strong>独立启动</strong>: 每个功能模块可以独立启动</li> <li><strong>参数配置</strong>: 通过launch文件灵活配置参数</li> <li><strong>车型适配</strong>: 支持多种车型的自动适配</li> </ul> <h3 id="42-导航算法">4.2 导航算法</h3> <ul> <li><strong>TEB规划器</strong>: 时间弹性带局部规划器</li> <li><strong>DWA规划器</strong>: 动态窗口局部规划器</li> <li><strong>全局规划</strong>: A*、Dijkstra等全局路径规划</li> <li><strong>代价地图</strong>: 动态构建局部和全局代价地图</li> </ul> <h3 id="43-定位算法">4.3 定位算法</h3> <ul> <li><strong>AMCL</strong>: 自适应蒙特卡洛定位</li> <li><strong>EKF</strong>: 扩展卡尔曼滤波融合</li> <li><strong>里程计</strong>: 轮式里程计和IMU融合</li> </ul> <h3 id="44-传感器支持">4.4 传感器支持</h3> <ul> <li><strong>激光雷达</strong>: Livox MID360、LSX10等</li> <li><strong>IMU</strong>: 板载IMU和外部IMU</li> <li><strong>GPS</strong>: 可选GPS定位</li> <li><strong>相机</strong>: USB相机支持</li> </ul> <h2 id="5-使用方式-1">5. 使用方式</h2> <h3 id="51-基础启动">5.1 基础启动</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 启动基础底盘控制</span>
roslaunch turn_on_wheeltec_robot turn_on_wheeltec_robot.launch

<span class="c"># 启动完整导航系统</span>
roslaunch turn_on_wheeltec_robot navigation.launch
</code></pre></div></div> <h3 id="52-自定义启动">5.2 自定义启动</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 指定车型和功能</span>
roslaunch turn_on_wheeltec_robot turn_on_wheeltec_robot.launch <span class="se">\</span>
    car_mode:<span class="o">=</span>brushless_senior_diff <span class="se">\</span>
    navigation:<span class="o">=</span><span class="nb">true</span> <span class="se">\</span>
    pure3d_nav:<span class="o">=</span><span class="nb">false</span>
</code></pre></div></div> <h3 id="53-导航控制">5.3 导航控制</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">rospy</span>
<span class="kn">from</span> <span class="n">geometry_msgs.msg</span> <span class="kn">import</span> <span class="n">PoseStamped</span>
<span class="kn">import</span> <span class="n">actionlib</span>
<span class="kn">from</span> <span class="n">move_base_msgs.msg</span> <span class="kn">import</span> <span class="n">MoveBaseAction</span><span class="p">,</span> <span class="n">MoveBaseGoal</span>

<span class="c1"># 发送导航目标
</span><span class="n">goal</span> <span class="o">=</span> <span class="nc">MoveBaseGoal</span><span class="p">()</span>
<span class="n">goal</span><span class="p">.</span><span class="n">target_pose</span><span class="p">.</span><span class="n">header</span><span class="p">.</span><span class="n">frame_id</span> <span class="o">=</span> <span class="sh">"</span><span class="s">map</span><span class="sh">"</span>
<span class="n">goal</span><span class="p">.</span><span class="n">target_pose</span><span class="p">.</span><span class="n">header</span><span class="p">.</span><span class="n">stamp</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="n">Time</span><span class="p">.</span><span class="nf">now</span><span class="p">()</span>
<span class="n">goal</span><span class="p">.</span><span class="n">target_pose</span><span class="p">.</span><span class="n">pose</span><span class="p">.</span><span class="n">position</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mf">1.0</span>
<span class="n">goal</span><span class="p">.</span><span class="n">target_pose</span><span class="p">.</span><span class="n">pose</span><span class="p">.</span><span class="n">position</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="mf">2.0</span>
<span class="n">goal</span><span class="p">.</span><span class="n">target_pose</span><span class="p">.</span><span class="n">pose</span><span class="p">.</span><span class="n">orientation</span><span class="p">.</span><span class="n">w</span> <span class="o">=</span> <span class="mf">1.0</span>

<span class="n">client</span> <span class="o">=</span> <span class="n">actionlib</span><span class="p">.</span><span class="nc">SimpleActionClient</span><span class="p">(</span><span class="sh">'</span><span class="s">move_base</span><span class="sh">'</span><span class="p">,</span> <span class="n">MoveBaseAction</span><span class="p">)</span>
<span class="n">client</span><span class="p">.</span><span class="nf">send_goal</span><span class="p">(</span><span class="n">goal</span><span class="p">)</span>
</code></pre></div></div> <p>wheel_dir模块为YanBot系统提供了完整的轮式机器人运动控制能力，包括底盘控制、导航规划、定位建图等核心功能，是整个机器人系统的”运动基础”。</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   底盘控制层    │    │   导航规划层    │    │   感知定位层    │
│                 │    │                 │    │                 │
│ • 串口通信      │    │ • move_base     │    │ • 激光雷达      │
│ • 运动控制      │    │ • TEB规划器     │    │ • AMCL定位      │
│ • 里程计        │    │ • 代价地图      │    │ • 地图服务器    │
└─────────────────┘    └─────────────────┘    └─────────────────┘
</code></pre></div></div> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;launch&gt;</span>
  <span class="c">&lt;!-- 车型参数 --&gt;</span>
  <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"car_mode"</span> <span class="na">default=</span><span class="s">"brushless_senior_diff"</span><span class="nt">/&gt;</span>

  <span class="c">&lt;!-- 导航功能开关 --&gt;</span>
  <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"navigation"</span> <span class="na">default=</span><span class="s">"false"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"pure3d_nav"</span> <span class="na">default=</span><span class="s">"false"</span><span class="nt">/&gt;</span>

  <span class="c">&lt;!-- 底层串口控制 --&gt;</span>
  <span class="nt">&lt;include</span> <span class="na">file=</span><span class="s">"$(find turn_on_wheeltec_robot)/launch/include/base_serial.launch"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"odom_frame_id"</span> <span class="na">value=</span><span class="s">"$(arg odom_frame_id)"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;/include&gt;</span>

  <span class="c">&lt;!-- 导航规划器 --&gt;</span>
  <span class="nt">&lt;include</span> <span class="na">file=</span><span class="s">"$(find turn_on_wheeltec_robot)/launch/include/teb_local_planner.launch"</span>
           <span class="na">if=</span><span class="s">"$(arg navigation)"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"car_mode"</span> <span class="na">value=</span><span class="s">"$(arg car_mode)"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;/include&gt;</span>

  <span class="c">&lt;!-- 机器人模型可视化 --&gt;</span>
  <span class="nt">&lt;include</span> <span class="na">file=</span><span class="s">"$(find turn_on_wheeltec_robot)/launch/robot_model_visualization.launch"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"car_mode"</span> <span class="na">value=</span><span class="s">"$(arg car_mode)"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;/include&gt;</span>

  <span class="c">&lt;!-- 扩展卡尔曼滤波 --&gt;</span>
  <span class="nt">&lt;include</span> <span class="na">file=</span><span class="s">"$(find turn_on_wheeltec_robot)/launch/include/robot_pose_ekf.launch"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/launch&gt;</span>
</code></pre></div></div> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;launch&gt;</span>
  <span class="nt">&lt;node</span> <span class="na">pkg=</span><span class="s">"turn_on_wheeltec_robot"</span> <span class="na">type=</span><span class="s">"wheeltec_robot_node"</span>
        <span class="na">name=</span><span class="s">"wheeltec_robot"</span> <span class="na">output=</span><span class="s">"screen"</span><span class="nt">&gt;</span>
    <span class="c">&lt;!-- 串口配置 --&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"usart_port_name"</span> <span class="na">type=</span><span class="s">"string"</span> <span class="na">value=</span><span class="s">"/dev/wheeltec_controller"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"serial_baud_rate"</span> <span class="na">type=</span><span class="s">"int"</span> <span class="na">value=</span><span class="s">"115200"</span><span class="nt">/&gt;</span>

    <span class="c">&lt;!-- 坐标系配置 --&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"odom_frame_id"</span> <span class="na">type=</span><span class="s">"string"</span> <span class="na">value=</span><span class="s">"odom_combined"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"robot_frame_id"</span> <span class="na">type=</span><span class="s">"string"</span> <span class="na">value=</span><span class="s">"base_footprint"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"gyro_frame_id"</span> <span class="na">type=</span><span class="s">"string"</span> <span class="na">value=</span><span class="s">"gyro_link"</span><span class="nt">/&gt;</span>

    <span class="c">&lt;!-- 车型配置 --&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"car_mode"</span> <span class="na">type=</span><span class="s">"string"</span> <span class="na">value=</span><span class="s">"$(arg car_mode)"</span><span class="nt">/&gt;</span>

    <span class="c">&lt;!-- 里程计修正参数 --&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"odom_x_scale"</span> <span class="na">type=</span><span class="s">"double"</span> <span class="na">value=</span><span class="s">"1.0"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"odom_y_scale"</span> <span class="na">type=</span><span class="s">"double"</span> <span class="na">value=</span><span class="s">"1.0"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;/node&gt;</span>
<span class="nt">&lt;/launch&gt;</span>
</code></pre></div></div> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;launch&gt;</span>
  <span class="c">&lt;!-- 开启机器人底层和导航功能 --&gt;</span>
  <span class="nt">&lt;include</span> <span class="na">file=</span><span class="s">"$(find turn_on_wheeltec_robot)/launch/turn_on_wheeltec_robot.launch"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"navigation"</span> <span class="na">default=</span><span class="s">"true"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;/include&gt;</span>

  <span class="c">&lt;!-- 激光雷达 --&gt;</span>
  <span class="nt">&lt;include</span> <span class="na">file=</span><span class="s">"$(find turn_on_wheeltec_robot)/launch/mid360_laserscan.launch"</span><span class="nt">/&gt;</span>

  <span class="c">&lt;!-- 地图服务器 --&gt;</span>
  <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"map_file"</span> <span class="na">default=</span><span class="s">"$(find turn_on_wheeltec_robot)/map/WHEELTEC.yaml"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;node</span> <span class="na">name=</span><span class="s">"map_server_for_test"</span> <span class="na">pkg=</span><span class="s">"map_server"</span> <span class="na">type=</span><span class="s">"map_server"</span>
        <span class="na">args=</span><span class="s">"$(arg map_file)"</span><span class="nt">/&gt;</span>

  <span class="c">&lt;!-- AMCL定位 --&gt;</span>
  <span class="nt">&lt;include</span> <span class="na">file=</span><span class="s">"$(find turn_on_wheeltec_robot)/launch/include/amcl.launch"</span><span class="nt">/&gt;</span>

  <span class="c">&lt;!-- 标记功能节点 --&gt;</span>
  <span class="nt">&lt;node</span> <span class="na">name=</span><span class="s">"send_mark"</span> <span class="na">pkg=</span><span class="s">"turn_on_wheeltec_robot"</span> <span class="na">type=</span><span class="s">"send_mark.py"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/launch&gt;</span>
</code></pre></div></div> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;launch&gt;</span>
  <span class="c">&lt;!-- 导航公共参数 --&gt;</span>
  <span class="nt">&lt;rosparam</span> <span class="na">file=</span><span class="s">"$(find turn_on_wheeltec_robot)/params_nav_common/move_base_params.yaml"</span>
            <span class="na">command=</span><span class="s">"load"</span> <span class="na">ns=</span><span class="s">"move_base"</span><span class="nt">/&gt;</span>

  <span class="c">&lt;!-- TEB局部规划器参数 --&gt;</span>
  <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"move_base/base_local_planner"</span> <span class="na">type=</span><span class="s">"string"</span>
         <span class="na">value=</span><span class="s">"teb_local_planner/TebLocalPlannerROS"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;rosparam</span> <span class="na">file=</span><span class="s">"$(find turn_on_wheeltec_robot)/params_nav_common/teb_local_planner_params.yaml"</span>
            <span class="na">command=</span><span class="s">"load"</span> <span class="na">ns=</span><span class="s">"move_base"</span><span class="nt">/&gt;</span>

  <span class="c">&lt;!-- 代价地图参数 --&gt;</span>
  <span class="nt">&lt;rosparam</span> <span class="na">file=</span><span class="s">"$(find turn_on_wheeltec_robot)/params_costmap_common/costmap_common_params.yaml"</span>
            <span class="na">command=</span><span class="s">"load"</span> <span class="na">ns=</span><span class="s">"move_base/global_costmap"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;rosparam</span> <span class="na">file=</span><span class="s">"$(find turn_on_wheeltec_robot)/params_costmap_common/costmap_common_params.yaml"</span>
            <span class="na">command=</span><span class="s">"load"</span> <span class="na">ns=</span><span class="s">"move_base/local_costmap"</span><span class="nt">/&gt;</span>

  <span class="c">&lt;!-- 启动move_base节点 --&gt;</span>
  <span class="nt">&lt;node</span> <span class="na">pkg=</span><span class="s">"move_base"</span> <span class="na">type=</span><span class="s">"move_base"</span> <span class="na">respawn=</span><span class="s">"false"</span> <span class="na">name=</span><span class="s">"move_base"</span> <span class="na">output=</span><span class="s">"screen"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;rosparam</span> <span class="na">file=</span><span class="s">"$(find turn_on_wheeltec_robot)/params_costmap_car/param_$(arg car_mode)/teb_local_planner_params.yaml"</span>
              <span class="na">command=</span><span class="s">"load"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;/node&gt;</span>
<span class="nt">&lt;/launch&gt;</span>
</code></pre></div></div> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;launch&gt;</span>
  <span class="nt">&lt;node</span> <span class="na">pkg=</span><span class="s">"amcl"</span> <span class="na">type=</span><span class="s">"amcl"</span> <span class="na">name=</span><span class="s">"amcl"</span> <span class="na">clear_params=</span><span class="s">"true"</span><span class="nt">&gt;</span>
    <span class="c">&lt;!-- 基本参数 --&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"use_map_topic"</span> <span class="na">value=</span><span class="s">"$(arg use_map_topic)"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"scan_topic"</span> <span class="na">value=</span><span class="s">"$(arg scan_topic)"</span><span class="nt">/&gt;</span>

    <span class="c">&lt;!-- 里程计模型 --&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"odom_model_type"</span> <span class="na">value=</span><span class="s">"omni-corrected"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"odom_alpha1"</span> <span class="na">value=</span><span class="s">"0.2"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"odom_alpha2"</span> <span class="na">value=</span><span class="s">"0.2"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"odom_alpha3"</span> <span class="na">value=</span><span class="s">"0.2"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"odom_alpha4"</span> <span class="na">value=</span><span class="s">"0.2"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"odom_alpha5"</span> <span class="na">value=</span><span class="s">"0.1"</span><span class="nt">/&gt;</span>

    <span class="c">&lt;!-- 激光雷达模型 --&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"laser_model_type"</span> <span class="na">value=</span><span class="s">"likelihood_field"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"laser_z_hit"</span> <span class="na">value=</span><span class="s">"0.5"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"laser_z_short"</span> <span class="na">value=</span><span class="s">"0.05"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"laser_z_max"</span> <span class="na">value=</span><span class="s">"0.05"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"laser_z_rand"</span> <span class="na">value=</span><span class="s">"0.5"</span><span class="nt">/&gt;</span>

    <span class="c">&lt;!-- 粒子滤波器参数 --&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"min_particles"</span> <span class="na">value=</span><span class="s">"500"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"max_particles"</span> <span class="na">value=</span><span class="s">"2000"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"kld_err"</span> <span class="na">value=</span><span class="s">"0.05"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"kld_z"</span> <span class="na">value=</span><span class="s">"0.99"</span><span class="nt">/&gt;</span>

    <span class="c">&lt;!-- 更新参数 --&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"update_min_d"</span> <span class="na">value=</span><span class="s">"0.25"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"update_min_a"</span> <span class="na">value=</span><span class="s">"0.2"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"odom_frame_id"</span> <span class="na">value=</span><span class="s">"odom_combined"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;/node&gt;</span>
<span class="nt">&lt;/launch&gt;</span>
</code></pre></div></div> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;launch&gt;</span>
  <span class="c">&lt;!-- Livox MID360激光雷达驱动 --&gt;</span>
  <span class="nt">&lt;include</span> <span class="na">file=</span><span class="s">"$(find livox_ros_driver2)/launch_ROS1/msg_MID360.launch"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"xfer_format"</span> <span class="na">value=</span><span class="s">"0"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;/include&gt;</span>

  <span class="c">&lt;!-- 点云转激光扫描 --&gt;</span>
  <span class="nt">&lt;include</span> <span class="na">file=</span><span class="s">"$(find turn_on_wheeltec_robot)/launch/include/PointsCloud2toLaserscan.launch"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/launch&gt;</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">navGoal_callback</span><span class="p">(</span><span class="n">msg</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">RViz中NavGoal标记的回调函数</span><span class="sh">"""</span>
    <span class="k">global</span> <span class="n">index</span><span class="p">,</span> <span class="n">count</span>

    <span class="c1"># 创建箭头标记
</span>    <span class="n">marker</span> <span class="o">=</span> <span class="nc">Marker</span><span class="p">()</span>
    <span class="n">marker</span><span class="p">.</span><span class="n">header</span><span class="p">.</span><span class="n">frame_id</span> <span class="o">=</span> <span class="sh">"</span><span class="s">map</span><span class="sh">"</span>
    <span class="n">marker</span><span class="p">.</span><span class="nb">type</span> <span class="o">=</span> <span class="n">marker</span><span class="p">.</span><span class="n">ARROW</span>
    <span class="n">marker</span><span class="p">.</span><span class="n">action</span> <span class="o">=</span> <span class="n">marker</span><span class="p">.</span><span class="n">ADD</span>
    <span class="n">marker</span><span class="p">.</span><span class="n">scale</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mf">0.5</span>
    <span class="n">marker</span><span class="p">.</span><span class="n">scale</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="mf">0.05</span>
    <span class="n">marker</span><span class="p">.</span><span class="n">scale</span><span class="p">.</span><span class="n">z</span> <span class="o">=</span> <span class="mf">0.05</span>
    <span class="n">marker</span><span class="p">.</span><span class="n">color</span><span class="p">.</span><span class="n">a</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="n">marker</span><span class="p">.</span><span class="n">color</span><span class="p">.</span><span class="n">r</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="n">marker</span><span class="p">.</span><span class="n">color</span><span class="p">.</span><span class="n">g</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">marker</span><span class="p">.</span><span class="n">color</span><span class="p">.</span><span class="n">b</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">marker</span><span class="p">.</span><span class="n">pose</span> <span class="o">=</span> <span class="n">msg</span><span class="p">.</span><span class="n">pose</span>
    <span class="n">markerArray</span><span class="p">.</span><span class="n">markers</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">marker</span><span class="p">)</span>

    <span class="c1"># 创建数字标记
</span>    <span class="n">marker_number</span> <span class="o">=</span> <span class="nc">Marker</span><span class="p">()</span>
    <span class="n">marker_number</span><span class="p">.</span><span class="nb">type</span> <span class="o">=</span> <span class="n">marker_number</span><span class="p">.</span><span class="n">TEXT_VIEW_FACING</span>
    <span class="n">marker_number</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">count</span><span class="p">)</span>
    <span class="n">markerArray_number</span><span class="p">.</span><span class="n">markers</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">marker_number</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">pose_callback</span><span class="p">(</span><span class="n">msg</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">到达目标点的回调函数</span><span class="sh">"""</span>
    <span class="k">if</span> <span class="n">msg</span><span class="p">.</span><span class="n">status</span><span class="p">.</span><span class="n">status</span> <span class="o">==</span> <span class="mi">3</span> <span class="ow">and</span> <span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>  <span class="c1"># 成功到达
</span>        <span class="k">if</span> <span class="n">index</span> <span class="o">==</span> <span class="n">count</span><span class="p">:</span>  <span class="c1"># 所有目标点完成，重新开始
</span>            <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">elif</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="n">count</span><span class="p">:</span>  <span class="c1"># 前往下一个目标点
</span>            <span class="n">pose</span> <span class="o">=</span> <span class="nc">PoseStamped</span><span class="p">()</span>
            <span class="n">pose</span><span class="p">.</span><span class="n">pose</span> <span class="o">=</span> <span class="n">markerArray</span><span class="p">.</span><span class="n">markers</span><span class="p">[</span><span class="n">index</span><span class="p">].</span><span class="n">pose</span>
            <span class="n">goal_pub</span><span class="p">.</span><span class="nf">publish</span><span class="p">(</span><span class="n">pose</span><span class="p">)</span>
            <span class="n">index</span> <span class="o">+=</span> <span class="mi">1</span>
</code></pre></div></div> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- 支持的车型模式 --&gt;</span>
<span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">"car_mode"</span> <span class="na">default=</span><span class="s">"brushless_senior_diff"</span>
     <span class="na">doc=</span><span class="s">"opt: mini_akm,senior_akm,top_akm_bs,top_akm_dl,
                 mini_mec,senior_mec_bs,senior_mec_dl,top_mec_bs,top_mec_dl,
                 mini_omni,senior_omni,top_omni,
                 mini_4wd,senior_4wd_bs,senior_4wd_dl,top_4wd_bs,top_4wd_dl,
                 mini_tank,mini_diff,senior_diff,four_wheel_diff_bs,
                 brushless_senior_diff"</span><span class="nt">/&gt;</span>
</code></pre></div></div> <pre><code class="language-shellscript"># 启动基础底盘控制
roslaunch turn_on_wheeltec_robot turn_on_wheeltec_robot.launch

# 启动完整导航系统
roslaunch turn_on_wheeltec_robot navigation.launch
</code></pre> <pre><code class="language-shellscript"># 指定车型和功能
roslaunch turn_on_wheeltec_robot turn_on_wheeltec_robot.launch \
    car_mode:=brushless_senior_diff \
    navigation:=true \
    pure3d_nav:=false
</code></pre> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">rospy</span>
<span class="kn">from</span> <span class="n">geometry_msgs.msg</span> <span class="kn">import</span> <span class="n">PoseStamped</span>
<span class="kn">import</span> <span class="n">actionlib</span>
<span class="kn">from</span> <span class="n">move_base_msgs.msg</span> <span class="kn">import</span> <span class="n">MoveBaseAction</span><span class="p">,</span> <span class="n">MoveBaseGoal</span>

<span class="c1"># 发送导航目标
</span><span class="n">goal</span> <span class="o">=</span> <span class="nc">MoveBaseGoal</span><span class="p">()</span>
<span class="n">goal</span><span class="p">.</span><span class="n">target_pose</span><span class="p">.</span><span class="n">header</span><span class="p">.</span><span class="n">frame_id</span> <span class="o">=</span> <span class="sh">"</span><span class="s">map</span><span class="sh">"</span>
<span class="n">goal</span><span class="p">.</span><span class="n">target_pose</span><span class="p">.</span><span class="n">header</span><span class="p">.</span><span class="n">stamp</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="n">Time</span><span class="p">.</span><span class="nf">now</span><span class="p">()</span>
<span class="n">goal</span><span class="p">.</span><span class="n">target_pose</span><span class="p">.</span><span class="n">pose</span><span class="p">.</span><span class="n">position</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mf">1.0</span>
<span class="n">goal</span><span class="p">.</span><span class="n">target_pose</span><span class="p">.</span><span class="n">pose</span><span class="p">.</span><span class="n">position</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="mf">2.0</span>
<span class="n">goal</span><span class="p">.</span><span class="n">target_pose</span><span class="p">.</span><span class="n">pose</span><span class="p">.</span><span class="n">orientation</span><span class="p">.</span><span class="n">w</span> <span class="o">=</span> <span class="mf">1.0</span>

<span class="n">client</span> <span class="o">=</span> <span class="n">actionlib</span><span class="p">.</span><span class="nc">SimpleActionClient</span><span class="p">(</span><span class="sh">'</span><span class="s">move_base</span><span class="sh">'</span><span class="p">,</span> <span class="n">MoveBaseAction</span><span class="p">)</span>
<span class="n">client</span><span class="p">.</span><span class="nf">send_goal</span><span class="p">(</span><span class="n">goal</span><span class="p">)</span>
</code></pre></div></div> <hr/> <p><strong>User</strong></p> <p>用一个图为我展示一下wheel_dir 的功能，包含输入、输出、服务、消息</p> <hr/> <p><strong>Cursor</strong></p> <p>基于我对wheel_dir的深入分析，我来为您绘制一个详细的功能架构图：</p> <h2 id="wheel-directory-功能架构图">Wheel Directory 功能架构图</h2> <pre><code class="language-mermaid">graph TB
    %% 硬件输入层
    subgraph "硬件输入层"
        SerialPort[串口设备&lt;br/&gt;/dev/wheeltec_controller] --&gt; SerialNode[串口节点&lt;br/&gt;wheeltec_robot_node]
        IMUData[IMU数据&lt;br/&gt;/imu] --&gt; EKFNode[扩展卡尔曼滤波&lt;br/&gt;robot_pose_ekf]
        GPSData[GPS数据&lt;br/&gt;/gps] --&gt; GPSNode[GPS驱动&lt;br/&gt;wheeltec_gps_driver]
        LidarData[激光雷达数据&lt;br/&gt;Livox MID360] --&gt; LidarDriver[激光雷达驱动&lt;br/&gt;livox_ros_driver2]
    end

    %% 底盘控制层
    subgraph "底盘控制层 (turn_on_wheeltec_robot)"
        SerialNode --&gt; |串口通信| BaseController[底盘控制器]
        BaseController --&gt; |速度控制| MotorDriver[电机驱动器]
        BaseController --&gt; |里程计| OdometryPub[里程计发布器&lt;br/&gt;/odom]
        BaseController --&gt; |电池状态| BatteryPub[电池状态发布器&lt;br/&gt;/battery]

        %% 内部处理
        BaseController --&gt; |TF变换| TFPublisher[TF发布器&lt;br/&gt;odom_combined → base_footprint]
    end

    %% 感知定位层
    subgraph "感知定位层"
        LidarDriver --&gt; |点云数据| PointCloudConverter[点云转换器&lt;br/&gt;PointsCloud2toLaserscan]
        PointCloudConverter --&gt; |激光扫描| LaserScanPub[激光扫描发布器&lt;br/&gt;/scan]

        LaserScanPub --&gt; |激光数据| AMCLNode[AMCL定位&lt;br/&gt;amcl]
        OdometryPub --&gt; |里程计| AMCLNode
        EKFNode --&gt; |融合位姿| RobotPosePub[机器人位姿发布器&lt;br/&gt;/robot_pose_ekf/odom_combined]

        %% 地图服务
        MapFile[地图文件&lt;br/&gt;WHEELTEC.yaml] --&gt; MapServer[地图服务器&lt;br/&gt;map_server]
        MapServer --&gt; |占用栅格地图| MapPub[地图发布器&lt;br/&gt;/map]
    end

    %% 导航规划层
    subgraph "导航规划层 (move_base)"
        MapPub --&gt; |地图数据| GlobalCostmap[全局代价地图]
        LaserScanPub --&gt; |激光数据| LocalCostmap[局部代价地图]
        RobotPosePub --&gt; |机器人位姿| GlobalPlanner[全局规划器&lt;br/&gt;navfn]

        GlobalPlanner --&gt; |全局路径| TEBPlanner[TEB局部规划器&lt;br/&gt;teb_local_planner]
        LocalCostmap --&gt; |局部障碍| TEBPlanner
        TEBPlanner --&gt; |速度指令| CmdVelPub[速度指令发布器&lt;br/&gt;/cmd_vel]

        %% 导航Action
        NavigationAction[导航Action&lt;br/&gt;move_base] -.-&gt;|目标请求| GlobalPlanner
        NavigationAction -.-&gt;|执行状态| NavigationFeedback[导航反馈]
    end

    %% 探索系统
    subgraph "探索系统 (rrt_exploration)"
        MapPub --&gt; |地图数据| FrontierDetector[前沿检测器]
        RobotPosePub --&gt; |机器人位姿| FrontierDetector
        FrontierDetector --&gt; |前沿点| RRTPathPlanner[RRT路径规划器]
        RRTPathPlanner --&gt; |探索目标| ExplorationAction[探索Action&lt;br/&gt;explore]
    end

    %% 标记系统
    subgraph "标记系统 (send_mark)"
        RVizNavGoal[RViz导航目标&lt;br/&gt;/move_base_simple/goal] --&gt; MarkProcessor[标记处理器&lt;br/&gt;send_mark.py]
        MarkProcessor --&gt; |标记数组| MarkerArrayPub[标记数组发布器&lt;br/&gt;/marker_array]
        MarkProcessor --&gt; |数字标记| NumberMarkerPub[数字标记发布器&lt;br/&gt;/marker_array_number]
        MarkProcessor --&gt; |巡航目标| PatrolGoalPub[巡航目标发布器&lt;br/&gt;/move_base_simple/goal]
    end

    %% 可视化层
    subgraph "可视化层"
        RobotModel[机器人模型&lt;br/&gt;robot_model_visualization] --&gt; URDFPublisher[URDF发布器&lt;br/&gt;robot_state_publisher]
        URDFPublisher --&gt; |TF树| TFVisualization[TF可视化]
        MarkerArrayPub --&gt; |标记显示| RVizVisualization[RViz可视化]
        NumberMarkerPub --&gt; |数字显示| RVizVisualization
    end

    %% 输出层
    subgraph "输出层"
        CmdVelPub --&gt; |速度指令| MotorDriver
        PatrolGoalPub --&gt; |巡航目标| NavigationAction
        ExplorationAction --&gt; |探索指令| NavigationAction
    end

    %% 服务接口
    subgraph "ROS服务接口"
        MapServerService[地图服务&lt;br/&gt;/static_map] -.-&gt;|地图请求| MapServer
        GlobalLocalizationService[全局定位服务&lt;br/&gt;/global_localization] -.-&gt;|定位请求| AMCLNode
        SetPoseService[设置位姿服务&lt;br/&gt;/set_pose] -.-&gt;|位姿设置| AMCLNode
    end

    %% 话题通信
    subgraph "ROS话题通信"
        CmdVelTopic[速度话题&lt;br/&gt;/cmd_vel] --&gt; |速度指令| BaseController
        OdomTopic[里程计话题&lt;br/&gt;/odom] --&gt; |里程计数据| EKFNode
        ScanTopic[激光扫描话题&lt;br/&gt;/scan] --&gt; |激光数据| AMCLNode
        MapTopic[地图话题&lt;br/&gt;/map] --&gt; |地图数据| GlobalCostmap
        RobotPoseTopic[机器人位姿话题&lt;br/&gt;/robot_pose_ekf/odom_combined] --&gt; |位姿数据| GlobalPlanner
    end

    %% 连接关系
    CmdVelPub --&gt; CmdVelTopic
    OdometryPub --&gt; OdomTopic
    LaserScanPub --&gt; ScanTopic
    MapPub --&gt; MapTopic
    RobotPosePub --&gt; RobotPoseTopic

    %% 样式定义
    classDef inputStyle fill:#e1f5fe,stroke:#01579b,stroke-width:2px
    classDef processStyle fill:#f3e5f5,stroke:#4a148c,stroke-width:2px
    classDef serviceStyle fill:#fff3e0,stroke:#e65100,stroke-width:2px
    classDef outputStyle fill:#e8f5e8,stroke:#1b5e20,stroke-width:2px
    classDef hardwareStyle fill:#fce4ec,stroke:#880e4f,stroke-width:2px
    classDef topicStyle fill:#f1f8e9,stroke:#33691e,stroke-width:2px

    %% 应用样式
    class SerialPort,IMUData,GPSData,LidarData inputStyle
    class SerialNode,BaseController,MotorDriver,OdometryPub,BatteryPub,TFPublisher,LidarDriver,PointCloudConverter,LaserScanPub,AMCLNode,EKFNode,RobotPosePub,MapServer,MapPub,GlobalCostmap,LocalCostmap,GlobalPlanner,TEBPlanner,CmdVelPub,NavigationAction,FrontierDetector,RRTPathPlanner,MarkProcessor,MarkerArrayPub,NumberMarkerPub,PatrolGoalPub,URDFPublisher processStyle
    class MapServerService,GlobalLocalizationService,SetPoseService,ExplorationAction serviceStyle
    class MotorDriver,NavigationAction outputStyle
    class SerialPort,IMUData,GPSData,LidarData hardwareStyle
    class CmdVelTopic,OdomTopic,ScanTopic,MapTopic,RobotPoseTopic topicStyle
</code></pre> <h2 id="详细功能说明-3">详细功能说明</h2> <h3 id="1-硬件输入层">1. 硬件输入层</h3> <ul> <li><strong>串口设备</strong>: 与底盘控制器的串口通信</li> <li><strong>IMU数据</strong>: 惯性测量单元数据</li> <li><strong>GPS数据</strong>: 全球定位系统数据</li> <li><strong>激光雷达数据</strong>: Livox MID360激光雷达点云数据</li> </ul> <h3 id="2-底盘控制层">2. 底盘控制层</h3> <ul> <li><strong>串口节点</strong>: 处理串口通信，解析控制指令</li> <li><strong>底盘控制器</strong>: 控制机器人底盘运动</li> <li><strong>电机驱动器</strong>: 驱动轮式电机</li> <li><strong>里程计发布器</strong>: 发布轮式里程计数据</li> <li><strong>电池状态发布器</strong>: 发布电池电量信息</li> <li><strong>TF发布器</strong>: 发布坐标系变换关系</li> </ul> <h3 id="3-感知定位层">3. 感知定位层</h3> <ul> <li><strong>激光雷达驱动</strong>: 驱动Livox MID360激光雷达</li> <li><strong>点云转换器</strong>: 将点云数据转换为激光扫描数据</li> <li><strong>AMCL定位</strong>: 自适应蒙特卡洛定位算法</li> <li><strong>扩展卡尔曼滤波</strong>: 融合里程计和IMU数据</li> <li><strong>地图服务器</strong>: 提供占用栅格地图服务</li> </ul> <h3 id="4-导航规划层">4. 导航规划层</h3> <ul> <li><strong>全局代价地图</strong>: 构建全局环境代价地图</li> <li><strong>局部代价地图</strong>: 构建局部环境代价地图</li> <li><strong>全局规划器</strong>: 使用A*等算法进行全局路径规划</li> <li><strong>TEB局部规划器</strong>: 时间弹性带局部路径规划</li> <li><strong>速度指令发布器</strong>: 发布机器人速度控制指令</li> </ul> <h3 id="5-探索系统">5. 探索系统</h3> <ul> <li><strong>前沿检测器</strong>: 检测环境中的前沿区域</li> <li><strong>RRT路径规划器</strong>: 使用RRT算法进行探索路径规划</li> <li><strong>探索Action</strong>: 提供探索功能的服务接口</li> </ul> <h3 id="6-标记系统">6. 标记系统</h3> <ul> <li><strong>标记处理器</strong>: 处理RViz中的导航标记</li> <li><strong>标记数组发布器</strong>: 发布可视化标记</li> <li><strong>数字标记发布器</strong>: 发布标记序号</li> <li><strong>巡航目标发布器</strong>: 发布多点巡航目标</li> </ul> <h3 id="7-可视化层">7. 可视化层</h3> <ul> <li><strong>机器人模型</strong>: 机器人URDF模型</li> <li><strong>URDF发布器</strong>: 发布机器人状态</li> <li><strong>TF可视化</strong>: 显示坐标系变换</li> <li><strong>RViz可视化</strong>: 显示各种可视化元素</li> </ul> <h3 id="8-关键消息和服务-1">8. 关键消息和服务</h3> <h4 id="消息类型-1">消息类型:</h4> <ul> <li><code class="language-plaintext highlighter-rouge">/cmd_vel</code>: 速度控制消息</li> <li><code class="language-plaintext highlighter-rouge">/odom</code>: 里程计消息</li> <li><code class="language-plaintext highlighter-rouge">/scan</code>: 激光扫描消息</li> <li><code class="language-plaintext highlighter-rouge">/map</code>: 占用栅格地图消息</li> <li><code class="language-plaintext highlighter-rouge">/robot_pose_ekf/odom_combined</code>: 机器人位姿消息</li> <li><code class="language-plaintext highlighter-rouge">/marker_array</code>: 标记数组消息</li> <li><code class="language-plaintext highlighter-rouge">/marker_array_number</code>: 数字标记消息</li> </ul> <h4 id="服务接口-1">服务接口:</h4> <ul> <li><code class="language-plaintext highlighter-rouge">/static_map</code>: 地图服务</li> <li><code class="language-plaintext highlighter-rouge">/global_localization</code>: 全局定位服务</li> <li><code class="language-plaintext highlighter-rouge">/set_pose</code>: 设置位姿服务</li> <li><code class="language-plaintext highlighter-rouge">/move_base</code>: 导航Action服务</li> <li><code class="language-plaintext highlighter-rouge">/explore</code>: 探索Action服务</li> </ul> <h3 id="9-系统特点">9. 系统特点</h3> <h4 id="模块化设计">模块化设计:</h4> <ul> <li>每个功能模块独立运行</li> <li>通过ROS话题和服务通信</li> <li>支持参数化配置</li> </ul> <h4 id="多传感器融合">多传感器融合:</h4> <ul> <li>激光雷达SLAM定位</li> <li>IMU和里程计融合</li> <li>可选GPS定位</li> </ul> <h4 id="智能导航">智能导航:</h4> <ul> <li>全局路径规划</li> <li>局部避障规划</li> <li>动态路径调整</li> </ul> <h4 id="自主探索">自主探索:</h4> <ul> <li>前沿检测</li> <li>RRT路径规划</li> <li>未知环境探索</li> </ul> <p>这个架构图展示了wheel_dir从硬件输入到运动输出的完整处理流程，以及各个组件之间的数据流和服务调用关系。</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>graph TB
    %% 硬件输入层
    subgraph "硬件输入层"
        SerialPort[串口设备&lt;br/&gt;/dev/wheeltec_controller] --&gt; SerialNode[串口节点&lt;br/&gt;wheeltec_robot_node]
        IMUData[IMU数据&lt;br/&gt;/imu] --&gt; EKFNode[扩展卡尔曼滤波&lt;br/&gt;robot_pose_ekf]
        GPSData[GPS数据&lt;br/&gt;/gps] --&gt; GPSNode[GPS驱动&lt;br/&gt;wheeltec_gps_driver]
        LidarData[激光雷达数据&lt;br/&gt;Livox MID360] --&gt; LidarDriver[激光雷达驱动&lt;br/&gt;livox_ros_driver2]
    end

    %% 底盘控制层
    subgraph "底盘控制层 (turn_on_wheeltec_robot)"
        SerialNode --&gt; |串口通信| BaseController[底盘控制器]
        BaseController --&gt; |速度控制| MotorDriver[电机驱动器]
        BaseController --&gt; |里程计| OdometryPub[里程计发布器&lt;br/&gt;/odom]
        BaseController --&gt; |电池状态| BatteryPub[电池状态发布器&lt;br/&gt;/battery]

        %% 内部处理
        BaseController --&gt; |TF变换| TFPublisher[TF发布器&lt;br/&gt;odom_combined → base_footprint]
    end

    %% 感知定位层
    subgraph "感知定位层"
        LidarDriver --&gt; |点云数据| PointCloudConverter[点云转换器&lt;br/&gt;PointsCloud2toLaserscan]
        PointCloudConverter --&gt; |激光扫描| LaserScanPub[激光扫描发布器&lt;br/&gt;/scan]

        LaserScanPub --&gt; |激光数据| AMCLNode[AMCL定位&lt;br/&gt;amcl]
        OdometryPub --&gt; |里程计| AMCLNode
        EKFNode --&gt; |融合位姿| RobotPosePub[机器人位姿发布器&lt;br/&gt;/robot_pose_ekf/odom_combined]

        %% 地图服务
        MapFile[地图文件&lt;br/&gt;WHEELTEC.yaml] --&gt; MapServer[地图服务器&lt;br/&gt;map_server]
        MapServer --&gt; |占用栅格地图| MapPub[地图发布器&lt;br/&gt;/map]
    end

    %% 导航规划层
    subgraph "导航规划层 (move_base)"
        MapPub --&gt; |地图数据| GlobalCostmap[全局代价地图]
        LaserScanPub --&gt; |激光数据| LocalCostmap[局部代价地图]
        RobotPosePub --&gt; |机器人位姿| GlobalPlanner[全局规划器&lt;br/&gt;navfn]

        GlobalPlanner --&gt; |全局路径| TEBPlanner[TEB局部规划器&lt;br/&gt;teb_local_planner]
        LocalCostmap --&gt; |局部障碍| TEBPlanner
        TEBPlanner --&gt; |速度指令| CmdVelPub[速度指令发布器&lt;br/&gt;/cmd_vel]

        %% 导航Action
        NavigationAction[导航Action&lt;br/&gt;move_base] -.-&gt;|目标请求| GlobalPlanner
        NavigationAction -.-&gt;|执行状态| NavigationFeedback[导航反馈]
    end

    %% 探索系统
    subgraph "探索系统 (rrt_exploration)"
        MapPub --&gt; |地图数据| FrontierDetector[前沿检测器]
        RobotPosePub --&gt; |机器人位姿| FrontierDetector
        FrontierDetector --&gt; |前沿点| RRTPathPlanner[RRT路径规划器]
        RRTPathPlanner --&gt; |探索目标| ExplorationAction[探索Action&lt;br/&gt;explore]
    end

    %% 标记系统
    subgraph "标记系统 (send_mark)"
        RVizNavGoal[RViz导航目标&lt;br/&gt;/move_base_simple/goal] --&gt; MarkProcessor[标记处理器&lt;br/&gt;send_mark.py]
        MarkProcessor --&gt; |标记数组| MarkerArrayPub[标记数组发布器&lt;br/&gt;/marker_array]
        MarkProcessor --&gt; |数字标记| NumberMarkerPub[数字标记发布器&lt;br/&gt;/marker_array_number]
        MarkProcessor --&gt; |巡航目标| PatrolGoalPub[巡航目标发布器&lt;br/&gt;/move_base_simple/goal]
    end

    %% 可视化层
    subgraph "可视化层"
        RobotModel[机器人模型&lt;br/&gt;robot_model_visualization] --&gt; URDFPublisher[URDF发布器&lt;br/&gt;robot_state_publisher]
        URDFPublisher --&gt; |TF树| TFVisualization[TF可视化]
        MarkerArrayPub --&gt; |标记显示| RVizVisualization[RViz可视化]
        NumberMarkerPub --&gt; |数字显示| RVizVisualization
    end

    %% 输出层
    subgraph "输出层"
        CmdVelPub --&gt; |速度指令| MotorDriver
        PatrolGoalPub --&gt; |巡航目标| NavigationAction
        ExplorationAction --&gt; |探索指令| NavigationAction
    end

    %% 服务接口
    subgraph "ROS服务接口"
        MapServerService[地图服务&lt;br/&gt;/static_map] -.-&gt;|地图请求| MapServer
        GlobalLocalizationService[全局定位服务&lt;br/&gt;/global_localization] -.-&gt;|定位请求| AMCLNode
        SetPoseService[设置位姿服务&lt;br/&gt;/set_pose] -.-&gt;|位姿设置| AMCLNode
    end

    %% 话题通信
    subgraph "ROS话题通信"
        CmdVelTopic[速度话题&lt;br/&gt;/cmd_vel] --&gt; |速度指令| BaseController
        OdomTopic[里程计话题&lt;br/&gt;/odom] --&gt; |里程计数据| EKFNode
        ScanTopic[激光扫描话题&lt;br/&gt;/scan] --&gt; |激光数据| AMCLNode
        MapTopic[地图话题&lt;br/&gt;/map] --&gt; |地图数据| GlobalCostmap
        RobotPoseTopic[机器人位姿话题&lt;br/&gt;/robot_pose_ekf/odom_combined] --&gt; |位姿数据| GlobalPlanner
    end

    %% 连接关系
    CmdVelPub --&gt; CmdVelTopic
    OdometryPub --&gt; OdomTopic
    LaserScanPub --&gt; ScanTopic
    MapPub --&gt; MapTopic
    RobotPosePub --&gt; RobotPoseTopic

    %% 样式定义
    classDef inputStyle fill:#e1f5fe,stroke:#01579b,stroke-width:2px
    classDef processStyle fill:#f3e5f5,stroke:#4a148c,stroke-width:2px
    classDef serviceStyle fill:#fff3e0,stroke:#e65100,stroke-width:2px
    classDef outputStyle fill:#e8f5e8,stroke:#1b5e20,stroke-width:2px
    classDef hardwareStyle fill:#fce4ec,stroke:#880e4f,stroke-width:2px
    classDef topicStyle fill:#f1f8e9,stroke:#33691e,stroke-width:2px

    %% 应用样式
    class SerialPort,IMUData,GPSData,LidarData inputStyle
    class SerialNode,BaseController,MotorDriver,OdometryPub,BatteryPub,TFPublisher,LidarDriver,PointCloudConverter,LaserScanPub,AMCLNode,EKFNode,RobotPosePub,MapServer,MapPub,GlobalCostmap,LocalCostmap,GlobalPlanner,TEBPlanner,CmdVelPub,NavigationAction,FrontierDetector,RRTPathPlanner,MarkProcessor,MarkerArrayPub,NumberMarkerPub,PatrolGoalPub,URDFPublisher processStyle
    class MapServerService,GlobalLocalizationService,SetPoseService,ExplorationAction serviceStyle
    class MotorDriver,NavigationAction outputStyle
    class SerialPort,IMUData,GPSData,LidarData hardwareStyle
    class CmdVelTopic,OdomTopic,ScanTopic,MapTopic,RobotPoseTopic topicStyle
</code></pre></div></div> <hr/> <p><strong>User</strong></p> <p>请详细解释一下 Cerebellum 中的 interact 部分</p> <hr/> <p><strong>Cursor</strong></p> <p>让我详细分析Cerebellum模块中的interact部分。首先查看相关的代码文件来了解其完整实现。</p> <p>基于我对代码的深入分析，现在我来详细讲解Cerebellum模块中的interact部分：</p> <h1 id="cerebellum模块---interact-详细讲解">Cerebellum模块 - interact 详细讲解</h1> <h2 id="1-模块概述-5">1. 模块概述</h2> <p><code class="language-plaintext highlighter-rouge">interact</code>是YanBot系统的<strong>语音交互模块</strong>，提供完整的语音交互功能，包括语音唤醒、语音识别(STT)和语音合成(TTS)。这是机器人的”语音系统”，负责与用户的语音交互。</p> <h3 id="11-核心功能-5">1.1 核心功能</h3> <ul> <li><strong>语音唤醒</strong>: 检测用户唤醒词，激活语音交互</li> <li><strong>语音识别</strong>: 将用户语音转换为文本</li> <li><strong>语音合成</strong>: 将文本转换为语音输出</li> <li><strong>交互控制</strong>: 管理语音交互的状态和流程</li> </ul> <h3 id="12-架构设计-5">1.2 架构设计</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   语音唤醒      │    │   语音识别      │    │   语音合成      │
│                 │    │                 │    │                 │
│ • VAD检测       │    │ • ASR模型       │    │ • TTS引擎       │
│ • 唤醒词检测    │    │ • 音频处理      │    │ • 音色控制      │
│ • 状态管理      │    │ • 文本输出      │    │ • 音频输出      │
└─────────────────┘    └─────────────────┘    └─────────────────┘
</code></pre></div></div> <h2 id="2-核心组件详解-5">2. 核心组件详解</h2> <h3 id="21-语音唤醒系统-wakeup_pkg">2.1 语音唤醒系统 (wakeup_pkg)</h3> <h4 id="a-唤醒节点-wakeup_nodepy">A. 唤醒节点 (<code class="language-plaintext highlighter-rouge">wakeup_node.py</code>)</h4> <p><strong>功能</strong>: 检测用户唤醒词，激活语音交互系统</p> <p><strong>核心特性</strong>:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">WakeUpNode</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="c1"># 音频处理参数
</span>        <span class="n">self</span><span class="p">.</span><span class="n">sample_rate</span> <span class="o">=</span> <span class="mi">16000</span>
        <span class="n">self</span><span class="p">.</span><span class="n">chunk_size</span> <span class="o">=</span> <span class="mi">300</span>  <span class="c1"># ms
</span>        <span class="n">self</span><span class="p">.</span><span class="n">chunk_samples</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">sample_rate</span> <span class="o">*</span> <span class="n">self</span><span class="p">.</span><span class="n">chunk_size</span> <span class="o">/</span> <span class="mi">1000</span><span class="p">)</span>

        <span class="c1"># VAD模型 - 语音活动检测
</span>        <span class="n">self</span><span class="p">.</span><span class="n">vad_model</span> <span class="o">=</span> <span class="nc">AutoModel</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="n">vad_model_dir</span><span class="p">,</span> <span class="n">disable_pbar</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

        <span class="c1"># ASR模型 - 语音识别
</span>        <span class="n">self</span><span class="p">.</span><span class="n">asr_pipeline</span> <span class="o">=</span> <span class="nf">pipeline</span><span class="p">(</span>
            <span class="n">task</span><span class="o">=</span><span class="n">Tasks</span><span class="p">.</span><span class="n">auto_speech_recognition</span><span class="p">,</span>
            <span class="n">model</span><span class="o">=</span><span class="n">asr_model_dir</span><span class="p">,</span>
            <span class="n">device</span><span class="o">=</span><span class="sh">"</span><span class="s">cuda:0</span><span class="sh">"</span>
        <span class="p">)</span>

        <span class="c1"># 唤醒词检测阈值
</span>        <span class="n">self</span><span class="p">.</span><span class="n">similar_threshold</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nf">get_param</span><span class="p">(</span><span class="sh">"</span><span class="s">~similar_threshold</span><span class="sh">"</span><span class="p">,</span> <span class="mf">0.8</span><span class="p">)</span>
</code></pre></div></div> <p><strong>唤醒词检测</strong>:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">process_recording</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">处理录音数据，检测唤醒词</span><span class="sh">"""</span>
    <span class="c1"># 进行ASR识别
</span>    <span class="n">ret</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">asr_pipeline</span><span class="p">(</span><span class="n">audio_data_float</span><span class="p">)</span>
    <span class="n">cleaned_text</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">sub</span><span class="p">(</span><span class="sh">"</span><span class="s">&lt;\|[^|]+\|&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">,</span> <span class="n">ret</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">])</span>

    <span class="c1"># 转换为拼音进行匹配
</span>    <span class="n">pinyin</span> <span class="o">=</span> <span class="n">pypinyin</span><span class="p">.</span><span class="nf">lazy_pinyin</span><span class="p">(</span><span class="n">ret</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">],</span> <span class="n">style</span><span class="o">=</span><span class="n">pypinyin</span><span class="p">.</span><span class="n">TONE3</span><span class="p">)</span>
    <span class="n">pinyin_str</span> <span class="o">=</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">pinyin</span><span class="p">)</span>

    <span class="c1"># 检测多种唤醒词变体
</span>    <span class="n">ret1</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">find_similar_substrings</span><span class="p">(</span><span class="sh">"</span><span class="s">ni3hao3yan4yan4</span><span class="sh">"</span><span class="p">,</span> <span class="n">pinyin_str</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">similar_threshold</span><span class="p">)</span>
    <span class="n">ret2</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">find_similar_substrings</span><span class="p">(</span><span class="sh">"</span><span class="s">nihaoyanyan</span><span class="sh">"</span><span class="p">,</span> <span class="n">pinyin_str2</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">similar_threshold</span><span class="p">)</span>
    <span class="n">ret3</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">find_similar_substrings</span><span class="p">(</span><span class="sh">"</span><span class="s">xiao3yan4xiao3yan4</span><span class="sh">"</span><span class="p">,</span> <span class="n">pinyin_str</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">similar_threshold</span><span class="p">)</span>

    <span class="c1"># 发布唤醒消息
</span>    <span class="n">wakeup_msg</span> <span class="o">=</span> <span class="nc">WakeUp</span><span class="p">()</span>
    <span class="n">wakeup_msg</span><span class="p">.</span><span class="n">wakeup</span> <span class="o">=</span> <span class="nf">any</span><span class="p">([</span><span class="n">ret1</span><span class="p">,</span> <span class="n">ret2</span><span class="p">,</span> <span class="n">ret3</span><span class="p">,</span> <span class="n">ret4</span><span class="p">,</span> <span class="n">ret5</span><span class="p">,</span> <span class="n">ret6</span><span class="p">])</span>
    <span class="n">wakeup_msg</span><span class="p">.</span><span class="n">asr_result</span> <span class="o">=</span> <span class="n">asr_result</span>
    <span class="n">self</span><span class="p">.</span><span class="n">wakeup_pub</span><span class="p">.</span><span class="nf">publish</span><span class="p">(</span><span class="n">wakeup_msg</span><span class="p">)</span>
</code></pre></div></div> <p><strong>支持的唤醒词</strong>:</p> <ul> <li>“你好燕燕” (ni3hao3yan4yan4)</li> <li>“你好燕” (ni3hao3yan4)</li> <li>“小燕小燕” (xiao3yan4xiao3yan4)</li> <li>支持带声调和不带声调的拼音匹配</li> </ul> <h4 id="b-唤醒消息-wakeupmsg">B. 唤醒消息 (<code class="language-plaintext highlighter-rouge">WakeUp.msg</code>)</h4> <pre><code class="language-msg">bool wakeup          # 是否检测到唤醒
string asr_result    # ASR识别结果
float32 angle        # 声源角度（预留）
</code></pre> <h4 id="c-唤醒控制服务">C. 唤醒控制服务</h4> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 服务接口: /wakeup_control
# 请求: SetBool (启用/禁用唤醒功能)
# 响应: SetBoolResponse (操作结果)
</span></code></pre></div></div> <h3 id="22-语音识别系统-stt_pkg">2.2 语音识别系统 (stt_pkg)</h3> <h4 id="a-stt节点-stt_nodepy">A. STT节点 (<code class="language-plaintext highlighter-rouge">stt_node.py</code>)</h4> <p><strong>功能</strong>: 提供语音转文字服务</p> <p><strong>核心实现</strong>:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">STTNode</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="c1"># 初始化ASR处理器
</span>        <span class="n">asr_model_dir</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nf">get_param</span><span class="p">(</span><span class="sh">"</span><span class="s">~asr_model_dir</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">iic/SenseVoiceSmall</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">asr</span> <span class="o">=</span> <span class="nc">ASR</span><span class="p">(</span><span class="n">asr_model_dir</span><span class="p">)</span>

        <span class="c1"># 创建STT服务
</span>        <span class="n">self</span><span class="p">.</span><span class="n">service</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">Service</span><span class="p">(</span><span class="sh">"</span><span class="s">srv_stt</span><span class="sh">"</span><span class="p">,</span> <span class="n">STT</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">handle_stt_request</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">handle_stt_request</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">req</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">处理STT请求</span><span class="sh">"""</span>
        <span class="n">input_data</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">req</span><span class="p">.</span><span class="n">input_json</span><span class="p">)</span>
        <span class="n">audio_path</span> <span class="o">=</span> <span class="n">input_data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">default_stt_wav_path</span><span class="p">)</span>

        <span class="c1"># 执行语音识别
</span>        <span class="n">result_txt</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">asr</span><span class="p">.</span><span class="nf">transcribe</span><span class="p">(</span><span class="n">audio_path</span><span class="p">)</span>

        <span class="k">return</span> <span class="nc">STTResponse</span><span class="p">(</span>
            <span class="n">output_json</span><span class="o">=</span><span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">({</span>
                <span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">success</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">asr_result</span><span class="sh">"</span><span class="p">:</span> <span class="n">result_txt</span>
            <span class="p">})</span>
        <span class="p">)</span>
</code></pre></div></div> <h4 id="b-asr引擎-asrpy">B. ASR引擎 (<code class="language-plaintext highlighter-rouge">asr.py</code>)</h4> <p><strong>功能</strong>: 封装FunASR语音识别模型</p> <p><strong>核心方法</strong>:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ASR</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">model_dir</span><span class="o">=</span><span class="sh">"</span><span class="s">iic/SenseVoiceSmall</span><span class="sh">"</span><span class="p">,</span> <span class="n">device</span><span class="o">=</span><span class="sh">"</span><span class="s">cuda:0</span><span class="sh">"</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">model</span> <span class="o">=</span> <span class="nc">AutoModel</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">model_dir</span><span class="p">,</span>
            <span class="n">vad_model</span><span class="o">=</span><span class="sh">"</span><span class="s">fsmn-vad</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">vad_kwargs</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">max_single_segment_time</span><span class="sh">"</span><span class="p">:</span> <span class="mi">30000</span><span class="p">},</span>
            <span class="n">device</span><span class="o">=</span><span class="n">device</span><span class="p">,</span>
        <span class="p">)</span>

    <span class="k">def</span> <span class="nf">transcribe</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">audio_path</span><span class="p">,</span> <span class="n">language</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">核心识别方法</span><span class="sh">"""</span>
        <span class="n">res</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="nf">generate</span><span class="p">(</span>
            <span class="nb">input</span><span class="o">=</span><span class="nf">str</span><span class="p">(</span><span class="n">audio_path</span><span class="p">),</span>
            <span class="n">cache</span><span class="o">=</span><span class="p">{},</span>
            <span class="n">language</span><span class="o">=</span><span class="n">language</span><span class="p">,</span>
            <span class="n">use_itn</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
            <span class="n">batch_size_s</span><span class="o">=</span><span class="mi">60</span><span class="p">,</span>
            <span class="n">merge_vad</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
            <span class="n">merge_length_s</span><span class="o">=</span><span class="mi">15</span><span class="p">,</span>
        <span class="p">)</span>

        <span class="n">text</span> <span class="o">=</span> <span class="nf">rich_transcription_postprocess</span><span class="p">(</span><span class="n">res</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">])</span>
        <span class="k">return</span> <span class="n">text</span>
</code></pre></div></div> <h4 id="c-stt服务接口-sttsrv">C. STT服务接口 (<code class="language-plaintext highlighter-rouge">STT.srv</code>)</h4> <pre><code class="language-srv"># 请求
string input_json    # {"file_path": "xxx/stt.wav"}

---
# 响应
string output_json   # {"status": "success", "asr_result": txt}
                     # {"status": "error", "message": "xxx"}
</code></pre> <h3 id="23-语音合成系统-tts_pkg">2.3 语音合成系统 (tts_pkg)</h3> <h4 id="a-tts节点-tts_nodepy">A. TTS节点 (<code class="language-plaintext highlighter-rouge">tts_node.py</code>)</h4> <p><strong>功能</strong>: 提供文字转语音服务</p> <p><strong>核心实现</strong>:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TTSNode</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="c1"># 初始化TTS引擎
</span>        <span class="n">self</span><span class="p">.</span><span class="n">tts_engine</span> <span class="o">=</span> <span class="nc">TTS_ENGINE</span><span class="p">(</span>
            <span class="n">random_voice</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">random_voice</span><span class="p">,</span>
            <span class="n">compile_model</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">compile_model</span>
        <span class="p">)</span>

        <span class="c1"># 创建TTS服务
</span>        <span class="n">self</span><span class="p">.</span><span class="n">service</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">Service</span><span class="p">(</span><span class="sh">"</span><span class="s">srv_tts</span><span class="sh">"</span><span class="p">,</span> <span class="n">TTS</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">handle_tts_request</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">handle_tts_request</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">req</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">处理TTS请求</span><span class="sh">"""</span>
        <span class="n">input_data</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">req</span><span class="p">.</span><span class="n">input_json</span><span class="p">)</span>
        <span class="n">text</span> <span class="o">=</span> <span class="n">input_data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>

        <span class="c1"># 文本预处理
</span>        <span class="n">text</span> <span class="o">=</span> <span class="n">text</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">.[uv_break] </span><span class="sh">"</span><span class="p">)</span>
        <span class="c1"># 数字转中文
</span>        <span class="n">convert_couple</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">1</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">一</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">2</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">二</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">3</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">三</span><span class="sh">"</span><span class="p">,</span> <span class="p">...}</span>
        <span class="n">text</span> <span class="o">=</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">convert_couple</span><span class="p">[</span><span class="n">char</span><span class="p">]</span> <span class="k">if</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">convert_couple</span> <span class="k">else</span> <span class="n">char</span>
                       <span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">text</span><span class="p">])</span>

        <span class="c1"># 生成语音
</span>        <span class="n">self</span><span class="p">.</span><span class="n">tts_engine</span><span class="p">.</span><span class="nf">text_to_speech</span><span class="p">(</span>
            <span class="n">texts</span><span class="o">=</span><span class="p">[</span><span class="n">text</span><span class="p">],</span>
            <span class="n">output_file</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">default_tts_wav_path</span><span class="p">,</span>
            <span class="n">temperature</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">temperature</span><span class="p">,</span>
            <span class="n">top_p</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">top_p</span><span class="p">,</span>
            <span class="n">top_k</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">top_k</span><span class="p">,</span>
        <span class="p">)</span>

        <span class="k">return</span> <span class="nc">TTSResponse</span><span class="p">(</span>
            <span class="n">output_json</span><span class="o">=</span><span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">({</span>
                <span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">success</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">default_tts_wav_path</span>
            <span class="p">})</span>
        <span class="p">)</span>
</code></pre></div></div> <h4 id="b-tts引擎-ttspy">B. TTS引擎 (<code class="language-plaintext highlighter-rouge">tts.py</code>)</h4> <p><strong>功能</strong>: 封装ChatTTS语音合成模型</p> <p><strong>核心方法</strong>:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TTS</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">random_voice</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">compile_model</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
        <span class="c1"># 加载ChatTTS模型
</span>        <span class="n">self</span><span class="p">.</span><span class="n">chat</span> <span class="o">=</span> <span class="n">ChatTTS</span><span class="p">.</span><span class="nc">Chat</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="nb">compile</span><span class="o">=</span><span class="n">compile_model</span><span class="p">)</span>

        <span class="c1"># 设置语音音色
</span>        <span class="k">if</span> <span class="n">random_voice</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">speaker</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="nf">sample_random_speaker</span><span class="p">()</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="c1"># 使用默认音色
</span>            <span class="n">default_voice_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">dirname</span><span class="p">(</span><span class="n">__file__</span><span class="p">),</span> <span class="sh">"</span><span class="s">default_voice.pt</span><span class="sh">"</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="n">speaker</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">default_voice_path</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">text_to_speech</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">texts</span><span class="p">,</span> <span class="n">output_file</span><span class="o">=</span><span class="sh">"</span><span class="s">output.wav</span><span class="sh">"</span><span class="p">,</span>
                      <span class="n">temperature</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">top_p</span><span class="o">=</span><span class="mf">0.7</span><span class="p">,</span> <span class="n">top_k</span><span class="o">=</span><span class="mi">20</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">将文本转换为语音</span><span class="sh">"""</span>
        <span class="n">params_infer_code</span> <span class="o">=</span> <span class="n">ChatTTS</span><span class="p">.</span><span class="n">Chat</span><span class="p">.</span><span class="nc">InferCodeParams</span><span class="p">(</span>
            <span class="n">spk_emb</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">speaker</span><span class="p">,</span>
            <span class="n">temperature</span><span class="o">=</span><span class="n">temperature</span><span class="p">,</span>
            <span class="n">top_P</span><span class="o">=</span><span class="n">top_p</span><span class="p">,</span>
            <span class="n">top_K</span><span class="o">=</span><span class="n">top_k</span><span class="p">,</span>
        <span class="p">)</span>

        <span class="n">wavs</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="nf">infer</span><span class="p">(</span><span class="n">texts</span><span class="p">,</span> <span class="n">params_infer_code</span><span class="o">=</span><span class="n">params_infer_code</span><span class="p">)</span>
        <span class="n">torchaudio</span><span class="p">.</span><span class="nf">save</span><span class="p">(</span><span class="n">output_file</span><span class="p">,</span> <span class="n">torch</span><span class="p">.</span><span class="nf">from_numpy</span><span class="p">(</span><span class="n">wavs</span><span class="p">[</span><span class="mi">0</span><span class="p">]).</span><span class="nf">unsqueeze</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="mi">24000</span><span class="p">)</span>
</code></pre></div></div> <h4 id="c-tts服务接口-ttssrv">C. TTS服务接口 (<code class="language-plaintext highlighter-rouge">TTS.srv</code>)</h4> <pre><code class="language-srv"># 请求
string input_json    # {"text": txt}

---
# 响应
string output_json   # {"status": "success", "file_path": "xxx/tts.wav"}
                     # {"status": "error", "message": "xxx"}
</code></pre> <h2 id="3-系统集成特点-1">3. 系统集成特点</h2> <h3 id="31-环境管理">3.1 环境管理</h3> <ul> <li><strong>Conda环境</strong>: 使用<code class="language-plaintext highlighter-rouge">interact</code>环境运行所有语音模块</li> <li><strong>模型管理</strong>: 统一的模型加载和配置</li> <li><strong>参数配置</strong>: 通过ROS参数服务器灵活配置</li> </ul> <h3 id="32-音频处理">3.2 音频处理</h3> <ul> <li><strong>采样率</strong>: 16kHz标准采样率</li> <li><strong>格式支持</strong>: WAV格式音频文件</li> <li><strong>实时处理</strong>: 支持实时音频流处理</li> </ul> <h3 id="33-模型选择">3.3 模型选择</h3> <ul> <li><strong>VAD模型</strong>: FSMN-VAD语音活动检测</li> <li><strong>ASR模型</strong>: SenseVoiceSmall语音识别</li> <li><strong>TTS模型</strong>: ChatTTS语音合成</li> </ul> <h3 id="34-交互流程">3.4 交互流程</h3> <ol> <li><strong>唤醒检测</strong>: VAD + ASR检测唤醒词</li> <li><strong>语音录制</strong>: 录制用户指令</li> <li><strong>语音识别</strong>: STT服务转换语音为文本</li> <li><strong>语音合成</strong>: TTS服务转换文本为语音</li> <li><strong>音频播放</strong>: 播放合成的语音响应</li> </ol> <h2 id="4-使用方式-1">4. 使用方式</h2> <h3 id="41-启动语音交互系统">4.1 启动语音交互系统</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 启动完整语音交互系统</span>
roslaunch cerebellum_pkg test_interact.launch

<span class="c"># 或分别启动各个模块</span>
roslaunch wakeup_pkg wakeup.launch
roslaunch stt_pkg stt.launch
roslaunch tts_pkg tts.launch
</code></pre></div></div> <h3 id="42-调用语音服务">4.2 调用语音服务</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">rospy</span>
<span class="kn">from</span> <span class="n">stt_pkg.srv</span> <span class="kn">import</span> <span class="n">STT</span>
<span class="kn">from</span> <span class="n">tts_pkg.srv</span> <span class="kn">import</span> <span class="n">TTS</span>

<span class="c1"># STT服务调用
</span><span class="n">rospy</span><span class="p">.</span><span class="nf">wait_for_service</span><span class="p">(</span><span class="sh">'</span><span class="s">srv_stt</span><span class="sh">'</span><span class="p">)</span>
<span class="n">stt_service</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">ServiceProxy</span><span class="p">(</span><span class="sh">'</span><span class="s">srv_stt</span><span class="sh">'</span><span class="p">,</span> <span class="n">STT</span><span class="p">)</span>
<span class="n">response</span> <span class="o">=</span> <span class="nf">stt_service</span><span class="p">(</span><span class="sh">'</span><span class="s">{</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="s">: </span><span class="sh">"</span><span class="s">/path/to/audio.wav</span><span class="sh">"</span><span class="s">}</span><span class="sh">'</span><span class="p">)</span>
<span class="n">result</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">output_json</span><span class="p">)</span>

<span class="c1"># TTS服务调用
</span><span class="n">rospy</span><span class="p">.</span><span class="nf">wait_for_service</span><span class="p">(</span><span class="sh">'</span><span class="s">srv_tts</span><span class="sh">'</span><span class="p">)</span>
<span class="n">tts_service</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">ServiceProxy</span><span class="p">(</span><span class="sh">'</span><span class="s">srv_tts</span><span class="sh">'</span><span class="p">,</span> <span class="n">TTS</span><span class="p">)</span>
<span class="n">response</span> <span class="o">=</span> <span class="nf">tts_service</span><span class="p">(</span><span class="sh">'</span><span class="s">{</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="s">: </span><span class="sh">"</span><span class="s">你好，我是燕燕</span><span class="sh">"</span><span class="s">}</span><span class="sh">'</span><span class="p">)</span>
<span class="n">result</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">output_json</span><span class="p">)</span>
</code></pre></div></div> <h3 id="43-唤醒词使用">4.3 唤醒词使用</h3> <ul> <li>说出”你好燕燕”或”小燕小燕”激活系统</li> <li>系统会自动开始录制用户指令</li> <li>完成指令后自动播放响应</li> </ul> <p>interact模块为YanBot系统提供了完整的语音交互能力，使机器人能够通过自然语言与用户进行交互，是机器人”听觉”和”发声”的核心系统。</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   语音唤醒      │    │   语音识别      │    │   语音合成      │
│                 │    │                 │    │                 │
│ • VAD检测       │    │ • ASR模型       │    │ • TTS引擎       │
│ • 唤醒词检测    │    │ • 音频处理      │    │ • 音色控制      │
│ • 状态管理      │    │ • 文本输出      │    │ • 音频输出      │
└─────────────────┘    └─────────────────┘    └─────────────────┘
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">WakeUpNode</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="c1"># 音频处理参数
</span>        <span class="n">self</span><span class="p">.</span><span class="n">sample_rate</span> <span class="o">=</span> <span class="mi">16000</span>
        <span class="n">self</span><span class="p">.</span><span class="n">chunk_size</span> <span class="o">=</span> <span class="mi">300</span>  <span class="c1"># ms
</span>        <span class="n">self</span><span class="p">.</span><span class="n">chunk_samples</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">sample_rate</span> <span class="o">*</span> <span class="n">self</span><span class="p">.</span><span class="n">chunk_size</span> <span class="o">/</span> <span class="mi">1000</span><span class="p">)</span>

        <span class="c1"># VAD模型 - 语音活动检测
</span>        <span class="n">self</span><span class="p">.</span><span class="n">vad_model</span> <span class="o">=</span> <span class="nc">AutoModel</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="n">vad_model_dir</span><span class="p">,</span> <span class="n">disable_pbar</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

        <span class="c1"># ASR模型 - 语音识别
</span>        <span class="n">self</span><span class="p">.</span><span class="n">asr_pipeline</span> <span class="o">=</span> <span class="nf">pipeline</span><span class="p">(</span>
            <span class="n">task</span><span class="o">=</span><span class="n">Tasks</span><span class="p">.</span><span class="n">auto_speech_recognition</span><span class="p">,</span>
            <span class="n">model</span><span class="o">=</span><span class="n">asr_model_dir</span><span class="p">,</span>
            <span class="n">device</span><span class="o">=</span><span class="sh">"</span><span class="s">cuda:0</span><span class="sh">"</span>
        <span class="p">)</span>

        <span class="c1"># 唤醒词检测阈值
</span>        <span class="n">self</span><span class="p">.</span><span class="n">similar_threshold</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nf">get_param</span><span class="p">(</span><span class="sh">"</span><span class="s">~similar_threshold</span><span class="sh">"</span><span class="p">,</span> <span class="mf">0.8</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">process_recording</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">处理录音数据，检测唤醒词</span><span class="sh">"""</span>
    <span class="c1"># 进行ASR识别
</span>    <span class="n">ret</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">asr_pipeline</span><span class="p">(</span><span class="n">audio_data_float</span><span class="p">)</span>
    <span class="n">cleaned_text</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">sub</span><span class="p">(</span><span class="sh">"</span><span class="s">&lt;\|[^|]+\|&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">,</span> <span class="n">ret</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">])</span>

    <span class="c1"># 转换为拼音进行匹配
</span>    <span class="n">pinyin</span> <span class="o">=</span> <span class="n">pypinyin</span><span class="p">.</span><span class="nf">lazy_pinyin</span><span class="p">(</span><span class="n">ret</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">],</span> <span class="n">style</span><span class="o">=</span><span class="n">pypinyin</span><span class="p">.</span><span class="n">TONE3</span><span class="p">)</span>
    <span class="n">pinyin_str</span> <span class="o">=</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">pinyin</span><span class="p">)</span>

    <span class="c1"># 检测多种唤醒词变体
</span>    <span class="n">ret1</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">find_similar_substrings</span><span class="p">(</span><span class="sh">"</span><span class="s">ni3hao3yan4yan4</span><span class="sh">"</span><span class="p">,</span> <span class="n">pinyin_str</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">similar_threshold</span><span class="p">)</span>
    <span class="n">ret2</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">find_similar_substrings</span><span class="p">(</span><span class="sh">"</span><span class="s">nihaoyanyan</span><span class="sh">"</span><span class="p">,</span> <span class="n">pinyin_str2</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">similar_threshold</span><span class="p">)</span>
    <span class="n">ret3</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">find_similar_substrings</span><span class="p">(</span><span class="sh">"</span><span class="s">xiao3yan4xiao3yan4</span><span class="sh">"</span><span class="p">,</span> <span class="n">pinyin_str</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">similar_threshold</span><span class="p">)</span>

    <span class="c1"># 发布唤醒消息
</span>    <span class="n">wakeup_msg</span> <span class="o">=</span> <span class="nc">WakeUp</span><span class="p">()</span>
    <span class="n">wakeup_msg</span><span class="p">.</span><span class="n">wakeup</span> <span class="o">=</span> <span class="nf">any</span><span class="p">([</span><span class="n">ret1</span><span class="p">,</span> <span class="n">ret2</span><span class="p">,</span> <span class="n">ret3</span><span class="p">,</span> <span class="n">ret4</span><span class="p">,</span> <span class="n">ret5</span><span class="p">,</span> <span class="n">ret6</span><span class="p">])</span>
    <span class="n">wakeup_msg</span><span class="p">.</span><span class="n">asr_result</span> <span class="o">=</span> <span class="n">asr_result</span>
    <span class="n">self</span><span class="p">.</span><span class="n">wakeup_pub</span><span class="p">.</span><span class="nf">publish</span><span class="p">(</span><span class="n">wakeup_msg</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bool wakeup          # 是否检测到唤醒
string asr_result    # ASR识别结果
float32 angle        # 声源角度（预留）
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 服务接口: /wakeup_control
# 请求: SetBool (启用/禁用唤醒功能)
# 响应: SetBoolResponse (操作结果)
</span></code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">STTNode</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="c1"># 初始化ASR处理器
</span>        <span class="n">asr_model_dir</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nf">get_param</span><span class="p">(</span><span class="sh">"</span><span class="s">~asr_model_dir</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">iic/SenseVoiceSmall</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">asr</span> <span class="o">=</span> <span class="nc">ASR</span><span class="p">(</span><span class="n">asr_model_dir</span><span class="p">)</span>

        <span class="c1"># 创建STT服务
</span>        <span class="n">self</span><span class="p">.</span><span class="n">service</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">Service</span><span class="p">(</span><span class="sh">"</span><span class="s">srv_stt</span><span class="sh">"</span><span class="p">,</span> <span class="n">STT</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">handle_stt_request</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">handle_stt_request</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">req</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">处理STT请求</span><span class="sh">"""</span>
        <span class="n">input_data</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">req</span><span class="p">.</span><span class="n">input_json</span><span class="p">)</span>
        <span class="n">audio_path</span> <span class="o">=</span> <span class="n">input_data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">default_stt_wav_path</span><span class="p">)</span>

        <span class="c1"># 执行语音识别
</span>        <span class="n">result_txt</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">asr</span><span class="p">.</span><span class="nf">transcribe</span><span class="p">(</span><span class="n">audio_path</span><span class="p">)</span>

        <span class="k">return</span> <span class="nc">STTResponse</span><span class="p">(</span>
            <span class="n">output_json</span><span class="o">=</span><span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">({</span>
                <span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">success</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">asr_result</span><span class="sh">"</span><span class="p">:</span> <span class="n">result_txt</span>
            <span class="p">})</span>
        <span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ASR</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">model_dir</span><span class="o">=</span><span class="sh">"</span><span class="s">iic/SenseVoiceSmall</span><span class="sh">"</span><span class="p">,</span> <span class="n">device</span><span class="o">=</span><span class="sh">"</span><span class="s">cuda:0</span><span class="sh">"</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">model</span> <span class="o">=</span> <span class="nc">AutoModel</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">model_dir</span><span class="p">,</span>
            <span class="n">vad_model</span><span class="o">=</span><span class="sh">"</span><span class="s">fsmn-vad</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">vad_kwargs</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">max_single_segment_time</span><span class="sh">"</span><span class="p">:</span> <span class="mi">30000</span><span class="p">},</span>
            <span class="n">device</span><span class="o">=</span><span class="n">device</span><span class="p">,</span>
        <span class="p">)</span>

    <span class="k">def</span> <span class="nf">transcribe</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">audio_path</span><span class="p">,</span> <span class="n">language</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">核心识别方法</span><span class="sh">"""</span>
        <span class="n">res</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="nf">generate</span><span class="p">(</span>
            <span class="nb">input</span><span class="o">=</span><span class="nf">str</span><span class="p">(</span><span class="n">audio_path</span><span class="p">),</span>
            <span class="n">cache</span><span class="o">=</span><span class="p">{},</span>
            <span class="n">language</span><span class="o">=</span><span class="n">language</span><span class="p">,</span>
            <span class="n">use_itn</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
            <span class="n">batch_size_s</span><span class="o">=</span><span class="mi">60</span><span class="p">,</span>
            <span class="n">merge_vad</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
            <span class="n">merge_length_s</span><span class="o">=</span><span class="mi">15</span><span class="p">,</span>
        <span class="p">)</span>

        <span class="n">text</span> <span class="o">=</span> <span class="nf">rich_transcription_postprocess</span><span class="p">(</span><span class="n">res</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">])</span>
        <span class="k">return</span> <span class="n">text</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 请求
string input_json    # {"file_path": "xxx/stt.wav"}

---
# 响应
string output_json   # {"status": "success", "asr_result": txt}
                     # {"status": "error", "message": "xxx"}
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TTSNode</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="c1"># 初始化TTS引擎
</span>        <span class="n">self</span><span class="p">.</span><span class="n">tts_engine</span> <span class="o">=</span> <span class="nc">TTS_ENGINE</span><span class="p">(</span>
            <span class="n">random_voice</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">random_voice</span><span class="p">,</span>
            <span class="n">compile_model</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">compile_model</span>
        <span class="p">)</span>

        <span class="c1"># 创建TTS服务
</span>        <span class="n">self</span><span class="p">.</span><span class="n">service</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">Service</span><span class="p">(</span><span class="sh">"</span><span class="s">srv_tts</span><span class="sh">"</span><span class="p">,</span> <span class="n">TTS</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">handle_tts_request</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">handle_tts_request</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">req</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">处理TTS请求</span><span class="sh">"""</span>
        <span class="n">input_data</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">req</span><span class="p">.</span><span class="n">input_json</span><span class="p">)</span>
        <span class="n">text</span> <span class="o">=</span> <span class="n">input_data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>

        <span class="c1"># 文本预处理
</span>        <span class="n">text</span> <span class="o">=</span> <span class="n">text</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">.[uv_break] </span><span class="sh">"</span><span class="p">)</span>
        <span class="c1"># 数字转中文
</span>        <span class="n">convert_couple</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">1</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">一</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">2</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">二</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">3</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">三</span><span class="sh">"</span><span class="p">,</span> <span class="p">...}</span>
        <span class="n">text</span> <span class="o">=</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">convert_couple</span><span class="p">[</span><span class="n">char</span><span class="p">]</span> <span class="k">if</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">convert_couple</span> <span class="k">else</span> <span class="n">char</span>
                       <span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">text</span><span class="p">])</span>

        <span class="c1"># 生成语音
</span>        <span class="n">self</span><span class="p">.</span><span class="n">tts_engine</span><span class="p">.</span><span class="nf">text_to_speech</span><span class="p">(</span>
            <span class="n">texts</span><span class="o">=</span><span class="p">[</span><span class="n">text</span><span class="p">],</span>
            <span class="n">output_file</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">default_tts_wav_path</span><span class="p">,</span>
            <span class="n">temperature</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">temperature</span><span class="p">,</span>
            <span class="n">top_p</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">top_p</span><span class="p">,</span>
            <span class="n">top_k</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">top_k</span><span class="p">,</span>
        <span class="p">)</span>

        <span class="k">return</span> <span class="nc">TTSResponse</span><span class="p">(</span>
            <span class="n">output_json</span><span class="o">=</span><span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">({</span>
                <span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">success</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">default_tts_wav_path</span>
            <span class="p">})</span>
        <span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TTS</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">random_voice</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">compile_model</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
        <span class="c1"># 加载ChatTTS模型
</span>        <span class="n">self</span><span class="p">.</span><span class="n">chat</span> <span class="o">=</span> <span class="n">ChatTTS</span><span class="p">.</span><span class="nc">Chat</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="nb">compile</span><span class="o">=</span><span class="n">compile_model</span><span class="p">)</span>

        <span class="c1"># 设置语音音色
</span>        <span class="k">if</span> <span class="n">random_voice</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">speaker</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="nf">sample_random_speaker</span><span class="p">()</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="c1"># 使用默认音色
</span>            <span class="n">default_voice_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">dirname</span><span class="p">(</span><span class="n">__file__</span><span class="p">),</span> <span class="sh">"</span><span class="s">default_voice.pt</span><span class="sh">"</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="n">speaker</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">default_voice_path</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">text_to_speech</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">texts</span><span class="p">,</span> <span class="n">output_file</span><span class="o">=</span><span class="sh">"</span><span class="s">output.wav</span><span class="sh">"</span><span class="p">,</span>
                      <span class="n">temperature</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">top_p</span><span class="o">=</span><span class="mf">0.7</span><span class="p">,</span> <span class="n">top_k</span><span class="o">=</span><span class="mi">20</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">将文本转换为语音</span><span class="sh">"""</span>
        <span class="n">params_infer_code</span> <span class="o">=</span> <span class="n">ChatTTS</span><span class="p">.</span><span class="n">Chat</span><span class="p">.</span><span class="nc">InferCodeParams</span><span class="p">(</span>
            <span class="n">spk_emb</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">speaker</span><span class="p">,</span>
            <span class="n">temperature</span><span class="o">=</span><span class="n">temperature</span><span class="p">,</span>
            <span class="n">top_P</span><span class="o">=</span><span class="n">top_p</span><span class="p">,</span>
            <span class="n">top_K</span><span class="o">=</span><span class="n">top_k</span><span class="p">,</span>
        <span class="p">)</span>

        <span class="n">wavs</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="nf">infer</span><span class="p">(</span><span class="n">texts</span><span class="p">,</span> <span class="n">params_infer_code</span><span class="o">=</span><span class="n">params_infer_code</span><span class="p">)</span>
        <span class="n">torchaudio</span><span class="p">.</span><span class="nf">save</span><span class="p">(</span><span class="n">output_file</span><span class="p">,</span> <span class="n">torch</span><span class="p">.</span><span class="nf">from_numpy</span><span class="p">(</span><span class="n">wavs</span><span class="p">[</span><span class="mi">0</span><span class="p">]).</span><span class="nf">unsqueeze</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="mi">24000</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 请求
string input_json    # {"text": txt}

---
# 响应
string output_json   # {"status": "success", "file_path": "xxx/tts.wav"}
                     # {"status": "error", "message": "xxx"}
</code></pre></div></div> <pre><code class="language-shellscript"># 启动完整语音交互系统
roslaunch cerebellum_pkg test_interact.launch

# 或分别启动各个模块
roslaunch wakeup_pkg wakeup.launch
roslaunch stt_pkg stt.launch
roslaunch tts_pkg tts.launch
</code></pre> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">rospy</span>
<span class="kn">from</span> <span class="n">stt_pkg.srv</span> <span class="kn">import</span> <span class="n">STT</span>
<span class="kn">from</span> <span class="n">tts_pkg.srv</span> <span class="kn">import</span> <span class="n">TTS</span>

<span class="c1"># STT服务调用
</span><span class="n">rospy</span><span class="p">.</span><span class="nf">wait_for_service</span><span class="p">(</span><span class="sh">'</span><span class="s">srv_stt</span><span class="sh">'</span><span class="p">)</span>
<span class="n">stt_service</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">ServiceProxy</span><span class="p">(</span><span class="sh">'</span><span class="s">srv_stt</span><span class="sh">'</span><span class="p">,</span> <span class="n">STT</span><span class="p">)</span>
<span class="n">response</span> <span class="o">=</span> <span class="nf">stt_service</span><span class="p">(</span><span class="sh">'</span><span class="s">{</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="s">: </span><span class="sh">"</span><span class="s">/path/to/audio.wav</span><span class="sh">"</span><span class="s">}</span><span class="sh">'</span><span class="p">)</span>
<span class="n">result</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">output_json</span><span class="p">)</span>

<span class="c1"># TTS服务调用
</span><span class="n">rospy</span><span class="p">.</span><span class="nf">wait_for_service</span><span class="p">(</span><span class="sh">'</span><span class="s">srv_tts</span><span class="sh">'</span><span class="p">)</span>
<span class="n">tts_service</span> <span class="o">=</span> <span class="n">rospy</span><span class="p">.</span><span class="nc">ServiceProxy</span><span class="p">(</span><span class="sh">'</span><span class="s">srv_tts</span><span class="sh">'</span><span class="p">,</span> <span class="n">TTS</span><span class="p">)</span>
<span class="n">response</span> <span class="o">=</span> <span class="nf">tts_service</span><span class="p">(</span><span class="sh">'</span><span class="s">{</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="s">: </span><span class="sh">"</span><span class="s">你好，我是燕燕</span><span class="sh">"</span><span class="s">}</span><span class="sh">'</span><span class="p">)</span>
<span class="n">result</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">output_json</span><span class="p">)</span>
</code></pre></div></div> <hr/> <p><strong>User</strong></p> <p>用一个图为我展示一下interact 的功能，包含输入、输出、服务、消息</p> <hr/> <p><strong>Cursor</strong></p> <p>基于我对interact的深入分析，我来为您绘制一个详细的功能架构图：</p> <h2 id="interact-功能架构图">Interact 功能架构图</h2> <pre><code class="language-mermaid">graph TB
    %% 音频输入层
    subgraph "音频输入层"
        Microphone[麦克风&lt;br/&gt;音频输入] --&gt; AudioStream[音频流&lt;br/&gt;sounddevice]
        AudioFile[音频文件&lt;br/&gt;WAV格式] --&gt; FileReader[文件读取器]
    end

    %% 语音唤醒系统
    subgraph "语音唤醒系统 (wakeup_pkg)"
        AudioStream --&gt; |实时音频| VADProcessor[VAD处理器&lt;br/&gt;fsmn-vad]
        VADProcessor --&gt; |语音活动| AudioRecorder[音频录制器]
        AudioRecorder --&gt; |录音数据| ASRProcessor[ASR处理器&lt;br/&gt;SenseVoiceSmall]

        ASRProcessor --&gt; |识别文本| WakeupDetector[唤醒词检测器]
        WakeupDetector --&gt; |唤醒结果| WakeupPublisher[唤醒发布器&lt;br/&gt;/wakeup]

        %% 内部处理
        WakeupDetector --&gt; |拼音转换| PinyinMatcher[拼音匹配器]
        PinyinMatcher --&gt; |相似度计算| SimilarityCalculator[相似度计算器]

        %% 服务接口
        WakeupControlService[唤醒控制服务&lt;br/&gt;/wakeup_control] -.-&gt;|启用/禁用| AudioRecorder
    end

    %% 语音识别系统
    subgraph "语音识别系统 (stt_pkg)"
        FileReader --&gt; |音频文件| STTProcessor[STT处理器&lt;br/&gt;ASR引擎]
        STTProcessor --&gt; |识别结果| STTService[STT服务&lt;br/&gt;/srv_stt]

        %% 内部处理
        STTProcessor --&gt; |音频预处理| AudioPreprocessor[音频预处理器]
        AudioPreprocessor --&gt; |模型推理| ASRModel[ASR模型&lt;br/&gt;FunASR]
        ASRModel --&gt; |后处理| TextPostprocessor[文本后处理器]
    end

    %% 语音合成系统
    subgraph "语音合成系统 (tts_pkg)"
        TextInput[文本输入] --&gt; TTSProcessor[TTS处理器&lt;br/&gt;ChatTTS引擎]
        TTSProcessor --&gt; |合成音频| TTSService[TTS服务&lt;br/&gt;/srv_tts]

        %% 内部处理
        TTSProcessor --&gt; |文本预处理| TextPreprocessor[文本预处理器]
        TextPreprocessor --&gt; |数字转换| NumberConverter[数字转换器]
        TextPreprocessor --&gt; |标点处理| PunctuationProcessor[标点处理器]

        TextPreprocessor --&gt; |模型推理| TTSModel[TTS模型&lt;br/&gt;ChatTTS]
        TTSModel --&gt; |音频生成| AudioGenerator[音频生成器]
        AudioGenerator --&gt; |音色控制| VoiceController[音色控制器]
    end

    %% 交互控制层
    subgraph "交互控制层"
        TestInteractNode[交互测试节点&lt;br/&gt;test_interact_node] --&gt; |录音控制| AudioRecorder
        TestInteractNode --&gt; |STT调用| STTService
        TestInteractNode --&gt; |TTS调用| TTSService
        TestInteractNode --&gt; |音频播放| AudioPlayer[音频播放器&lt;br/&gt;aplay]
    end

    %% 模型管理
    subgraph "模型管理"
        VADModel[VAD模型&lt;br/&gt;fsmn-vad] --&gt; VADProcessor
        ASRModelFile[ASR模型&lt;br/&gt;SenseVoiceSmall] --&gt; ASRModel
        TTSModelFile[TTS模型&lt;br/&gt;ChatTTS] --&gt; TTSModel
        VoiceModel[音色模型&lt;br/&gt;default_voice.pt] --&gt; VoiceController
    end

    %% 输出层
    subgraph "输出层"
        WakeupPublisher --&gt; |唤醒消息| WakeupTopic[唤醒话题&lt;br/&gt;/wakeup]
        STTService --&gt; |识别结果| STTResponse[STT响应&lt;br/&gt;JSON格式]
        TTSService --&gt; |合成音频| TTSResponse[TTS响应&lt;br/&gt;WAV文件]
        AudioPlayer --&gt; |音频输出| Speaker[扬声器]
    end

    %% 话题通信
    subgraph "ROS话题通信"
        WakeupTopic --&gt; |WakeUp消息| TestInteractNode
        WakeupTopic --&gt; |唤醒状态| SystemController[系统控制器]
    end

    %% 服务接口
    subgraph "ROS服务接口"
        WakeupControlService -.-&gt;|SetBool| WakeupDetector
        STTService -.-&gt;|STT请求| STTProcessor
        TTSService -.-&gt;|TTS请求| TTSProcessor
    end

    %% 数据流
    subgraph "数据流"
        AudioData[音频数据&lt;br/&gt;16kHz, int16] --&gt; VADProcessor
        AudioData --&gt; STTProcessor
        TextData[文本数据] --&gt; TTSProcessor
        WakeupData[唤醒数据&lt;br/&gt;bool + string] --&gt; WakeupTopic
    end

    %% 连接关系
    AudioRecorder --&gt; |录音文件| FileReader
    TTSResponse --&gt; |音频文件| AudioPlayer

    %% 样式定义
    classDef inputStyle fill:#e1f5fe,stroke:#01579b,stroke-width:2px
    classDef processStyle fill:#f3e5f5,stroke:#4a148c,stroke-width:2px
    classDef serviceStyle fill:#fff3e0,stroke:#e65100,stroke-width:2px
    classDef outputStyle fill:#e8f5e8,stroke:#1b5e20,stroke-width:2px
    classDef modelStyle fill:#fce4ec,stroke:#880e4f,stroke-width:2px
    classDef topicStyle fill:#f1f8e9,stroke:#33691e,stroke-width:2px

    %% 应用样式
    class Microphone,AudioFile,TextInput inputStyle
    class AudioStream,FileReader,VADProcessor,AudioRecorder,ASRProcessor,WakeupDetector,WakeupPublisher,STTProcessor,STTService,TTSProcessor,TTSService,TestInteractNode,AudioPlayer,PinyinMatcher,SimilarityCalculator,AudioPreprocessor,TextPostprocessor,TextPreprocessor,NumberConverter,PunctuationProcessor,AudioGenerator,VoiceController processStyle
    class WakeupControlService,STTService,TTSService serviceStyle
    class Speaker,STTResponse,TTSResponse,WakeupTopic outputStyle
    class VADModel,ASRModelFile,TTSModelFile,VoiceModel modelStyle
    class WakeupTopic topicStyle
</code></pre> <h2 id="详细功能说明-4">详细功能说明</h2> <h3 id="1-音频输入层">1. 音频输入层</h3> <ul> <li><strong>麦克风</strong>: 实时音频输入，16kHz采样率</li> <li><strong>音频文件</strong>: WAV格式音频文件输入</li> <li><strong>音频流</strong>: 通过sounddevice库处理实时音频</li> </ul> <h3 id="2-语音唤醒系统-wakeup_pkg">2. 语音唤醒系统 (wakeup_pkg)</h3> <ul> <li><strong>VAD处理器</strong>: 使用fsmn-vad模型检测语音活动</li> <li><strong>音频录制器</strong>: 录制检测到的语音片段</li> <li><strong>ASR处理器</strong>: 使用SenseVoiceSmall模型进行语音识别</li> <li><strong>唤醒词检测器</strong>: 检测特定唤醒词（”你好燕燕”、”小燕小燕”等）</li> <li><strong>拼音匹配器</strong>: 将识别文本转换为拼音进行匹配</li> <li><strong>相似度计算器</strong>: 计算文本相似度</li> <li><strong>唤醒发布器</strong>: 发布唤醒消息到/wakeup话题</li> </ul> <h3 id="3-语音识别系统-stt_pkg">3. 语音识别系统 (stt_pkg)</h3> <ul> <li><strong>STT处理器</strong>: 处理语音转文字请求</li> <li><strong>音频预处理器</strong>: 预处理音频数据</li> <li><strong>ASR模型</strong>: FunASR框架的SenseVoiceSmall模型</li> <li><strong>文本后处理器</strong>: 后处理识别结果</li> <li><strong>STT服务</strong>: 提供/srv_stt服务接口</li> </ul> <h3 id="4-语音合成系统-tts_pkg">4. 语音合成系统 (tts_pkg)</h3> <ul> <li><strong>TTS处理器</strong>: 处理文字转语音请求</li> <li><strong>文本预处理器</strong>: 预处理输入文本</li> <li><strong>数字转换器</strong>: 将阿拉伯数字转换为中文数字</li> <li><strong>标点处理器</strong>: 处理标点符号，添加[uv_break]</li> <li><strong>TTS模型</strong>: ChatTTS语音合成模型</li> <li><strong>音频生成器</strong>: 生成音频数据</li> <li><strong>音色控制器</strong>: 控制语音音色</li> <li><strong>TTS服务</strong>: 提供/srv_tts服务接口</li> </ul> <h3 id="5-交互控制层">5. 交互控制层</h3> <ul> <li><strong>交互测试节点</strong>: 协调整个语音交互流程</li> <li><strong>音频播放器</strong>: 使用aplay播放合成的音频</li> </ul> <h3 id="6-模型管理">6. 模型管理</h3> <ul> <li><strong>VAD模型</strong>: fsmn-vad语音活动检测模型</li> <li><strong>ASR模型</strong>: SenseVoiceSmall语音识别模型</li> <li><strong>TTS模型</strong>: ChatTTS语音合成模型</li> <li><strong>音色模型</strong>: default_voice.pt默认音色文件</li> </ul> <h3 id="7-关键消息和服务">7. 关键消息和服务</h3> <h4 id="消息类型-2">消息类型:</h4> <ul> <li><code class="language-plaintext highlighter-rouge">/wakeup</code>: 唤醒消息 (WakeUp.msg) <ul> <li><code class="language-plaintext highlighter-rouge">bool wakeup</code>: 是否检测到唤醒</li> <li><code class="language-plaintext highlighter-rouge">string asr_result</code>: ASR识别结果</li> <li><code class="language-plaintext highlighter-rouge">float32 angle</code>: 声源角度</li> </ul> </li> </ul> <h4 id="服务接口-2">服务接口:</h4> <ul> <li><code class="language-plaintext highlighter-rouge">/wakeup_control</code>: 唤醒控制服务 (SetBool.srv) <ul> <li>启用/禁用语音唤醒功能</li> </ul> </li> <li><code class="language-plaintext highlighter-rouge">/srv_stt</code>: 语音识别服务 (STT.srv) <ul> <li>请求: <code class="language-plaintext highlighter-rouge">{"file_path": "audio.wav"}</code></li> <li>响应: <code class="language-plaintext highlighter-rouge">{"status": "success", "asr_result": "识别文本"}</code></li> </ul> </li> <li><code class="language-plaintext highlighter-rouge">/srv_tts</code>: 语音合成服务 (TTS.srv) <ul> <li>请求: <code class="language-plaintext highlighter-rouge">{"text": "要合成的文本"}</code></li> <li>响应: <code class="language-plaintext highlighter-rouge">{"status": "success", "file_path": "output.wav"}</code></li> </ul> </li> </ul> <h3 id="8-数据流">8. 数据流</h3> <ul> <li><strong>音频数据</strong>: 16kHz采样率，int16格式</li> <li><strong>文本数据</strong>: UTF-8编码的中文文本</li> <li><strong>唤醒数据</strong>: 布尔标志和ASR结果字符串</li> </ul> <h3 id="9-系统特点-1">9. 系统特点</h3> <h4 id="实时处理">实时处理:</h4> <ul> <li>支持实时音频流处理</li> <li>VAD实时检测语音活动</li> <li>低延迟的唤醒响应</li> </ul> <h4 id="多模态支持">多模态支持:</h4> <ul> <li>支持多种唤醒词变体</li> <li>支持带声调和不带声调的拼音匹配</li> <li>支持数字自动转换</li> </ul> <h4 id="高质量合成">高质量合成:</h4> <ul> <li>使用ChatTTS高质量语音合成</li> <li>支持音色控制</li> <li>支持情感表达</li> </ul> <h4 id="灵活配置">灵活配置:</h4> <ul> <li>通过ROS参数服务器配置</li> <li>支持模型路径自定义</li> <li>支持音频参数调整</li> </ul> <p>这个架构图展示了interact从音频输入到语音输出的完整处理流程，以及各个组件之间的数据流和服务调用关系。</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>graph TB
    %% 音频输入层
    subgraph "音频输入层"
        Microphone[麦克风&lt;br/&gt;音频输入] --&gt; AudioStream[音频流&lt;br/&gt;sounddevice]
        AudioFile[音频文件&lt;br/&gt;WAV格式] --&gt; FileReader[文件读取器]
    end

    %% 语音唤醒系统
    subgraph "语音唤醒系统 (wakeup_pkg)"
        AudioStream --&gt; |实时音频| VADProcessor[VAD处理器&lt;br/&gt;fsmn-vad]
        VADProcessor --&gt; |语音活动| AudioRecorder[音频录制器]
        AudioRecorder --&gt; |录音数据| ASRProcessor[ASR处理器&lt;br/&gt;SenseVoiceSmall]

        ASRProcessor --&gt; |识别文本| WakeupDetector[唤醒词检测器]
        WakeupDetector --&gt; |唤醒结果| WakeupPublisher[唤醒发布器&lt;br/&gt;/wakeup]

        %% 内部处理
        WakeupDetector --&gt; |拼音转换| PinyinMatcher[拼音匹配器]
        PinyinMatcher --&gt; |相似度计算| SimilarityCalculator[相似度计算器]

        %% 服务接口
        WakeupControlService[唤醒控制服务&lt;br/&gt;/wakeup_control] -.-&gt;|启用/禁用| AudioRecorder
    end

    %% 语音识别系统
    subgraph "语音识别系统 (stt_pkg)"
        FileReader --&gt; |音频文件| STTProcessor[STT处理器&lt;br/&gt;ASR引擎]
        STTProcessor --&gt; |识别结果| STTService[STT服务&lt;br/&gt;/srv_stt]

        %% 内部处理
        STTProcessor --&gt; |音频预处理| AudioPreprocessor[音频预处理器]
        AudioPreprocessor --&gt; |模型推理| ASRModel[ASR模型&lt;br/&gt;FunASR]
        ASRModel --&gt; |后处理| TextPostprocessor[文本后处理器]
    end

    %% 语音合成系统
    subgraph "语音合成系统 (tts_pkg)"
        TextInput[文本输入] --&gt; TTSProcessor[TTS处理器&lt;br/&gt;ChatTTS引擎]
        TTSProcessor --&gt; |合成音频| TTSService[TTS服务&lt;br/&gt;/srv_tts]

        %% 内部处理
        TTSProcessor --&gt; |文本预处理| TextPreprocessor[文本预处理器]
        TextPreprocessor --&gt; |数字转换| NumberConverter[数字转换器]
        TextPreprocessor --&gt; |标点处理| PunctuationProcessor[标点处理器]

        TextPreprocessor --&gt; |模型推理| TTSModel[TTS模型&lt;br/&gt;ChatTTS]
        TTSModel --&gt; |音频生成| AudioGenerator[音频生成器]
        AudioGenerator --&gt; |音色控制| VoiceController[音色控制器]
    end

    %% 交互控制层
    subgraph "交互控制层"
        TestInteractNode[交互测试节点&lt;br/&gt;test_interact_node] --&gt; |录音控制| AudioRecorder
        TestInteractNode --&gt; |STT调用| STTService
        TestInteractNode --&gt; |TTS调用| TTSService
        TestInteractNode --&gt; |音频播放| AudioPlayer[音频播放器&lt;br/&gt;aplay]
    end

    %% 模型管理
    subgraph "模型管理"
        VADModel[VAD模型&lt;br/&gt;fsmn-vad] --&gt; VADProcessor
        ASRModelFile[ASR模型&lt;br/&gt;SenseVoiceSmall] --&gt; ASRModel
        TTSModelFile[TTS模型&lt;br/&gt;ChatTTS] --&gt; TTSModel
        VoiceModel[音色模型&lt;br/&gt;default_voice.pt] --&gt; VoiceController
    end

    %% 输出层
    subgraph "输出层"
        WakeupPublisher --&gt; |唤醒消息| WakeupTopic[唤醒话题&lt;br/&gt;/wakeup]
        STTService --&gt; |识别结果| STTResponse[STT响应&lt;br/&gt;JSON格式]
        TTSService --&gt; |合成音频| TTSResponse[TTS响应&lt;br/&gt;WAV文件]
        AudioPlayer --&gt; |音频输出| Speaker[扬声器]
    end

    %% 话题通信
    subgraph "ROS话题通信"
        WakeupTopic --&gt; |WakeUp消息| TestInteractNode
        WakeupTopic --&gt; |唤醒状态| SystemController[系统控制器]
    end

    %% 服务接口
    subgraph "ROS服务接口"
        WakeupControlService -.-&gt;|SetBool| WakeupDetector
        STTService -.-&gt;|STT请求| STTProcessor
        TTSService -.-&gt;|TTS请求| TTSProcessor
    end

    %% 数据流
    subgraph "数据流"
        AudioData[音频数据&lt;br/&gt;16kHz, int16] --&gt; VADProcessor
        AudioData --&gt; STTProcessor
        TextData[文本数据] --&gt; TTSProcessor
        WakeupData[唤醒数据&lt;br/&gt;bool + string] --&gt; WakeupTopic
    end

    %% 连接关系
    AudioRecorder --&gt; |录音文件| FileReader
    TTSResponse --&gt; |音频文件| AudioPlayer

    %% 样式定义
    classDef inputStyle fill:#e1f5fe,stroke:#01579b,stroke-width:2px
    classDef processStyle fill:#f3e5f5,stroke:#4a148c,stroke-width:2px
    classDef serviceStyle fill:#fff3e0,stroke:#e65100,stroke-width:2px
    classDef outputStyle fill:#e8f5e8,stroke:#1b5e20,stroke-width:2px
    classDef modelStyle fill:#fce4ec,stroke:#880e4f,stroke-width:2px
    classDef topicStyle fill:#f1f8e9,stroke:#33691e,stroke-width:2px

    %% 应用样式
    class Microphone,AudioFile,TextInput inputStyle
    class AudioStream,FileReader,VADProcessor,AudioRecorder,ASRProcessor,WakeupDetector,WakeupPublisher,STTProcessor,STTService,TTSProcessor,TTSService,TestInteractNode,AudioPlayer,PinyinMatcher,SimilarityCalculator,AudioPreprocessor,TextPostprocessor,TextPreprocessor,NumberConverter,PunctuationProcessor,AudioGenerator,VoiceController processStyle
    class WakeupControlService,STTService,TTSService serviceStyle
    class Speaker,STTResponse,TTSResponse,WakeupTopic outputStyle
    class VADModel,ASRModelFile,TTSModelFile,VoiceModel modelStyle
    class WakeupTopic topicStyle
</code></pre></div></div> <hr/>]]></content><author><name></name></author><category term="research-updates"/><category term="research"/><category term="computer-vision"/><category term="robotics"/><summary type="html"><![CDATA[A comprehensive summary of my threqe-week summer research progress,including concept map integration, system demonstrations, and future plans]]></summary></entry><entry><title type="html">3DGS-CD算法深度解析</title><link href="https://ziya-jiang.github.io/blog/2025/3dgs-cd-analysis/" rel="alternate" type="text/html" title="3DGS-CD算法深度解析"/><published>2025-07-18T18:30:00+00:00</published><updated>2025-07-18T18:30:00+00:00</updated><id>https://ziya-jiang.github.io/blog/2025/3dgs-cd-analysis</id><content type="html" xml:base="https://ziya-jiang.github.io/blog/2025/3dgs-cd-analysis/"><![CDATA[<h1 id="3dgs-cd算法深度解析">3DGS-CD算法深度解析</h1> <p>3DGS-CD（3D Gaussian Splatting Change Detection）是一种基于3D高斯散射的场景变化检测算法。本文将从技术角度深入解析其核心原理和实现流程。</p> <h2 id="算法概述">算法概述</h2> <p>3DGS-CD的核心思想是通过构建场景的3D高斯模型，在不同时间点之间检测物体的移动、删除和新增。整个流程可以分为以下几个关键步骤：</p> <h2 id="1-旧场景扫描进电脑">1. 旧场景”扫描进电脑”</h2> <h3 id="技术实现">技术实现</h3> <ul> <li><strong>输入</strong>：变化前拍摄的多张RGB照片</li> <li><strong>处理流程</strong>： <ol> <li>使用SfM（Structure from Motion）算法求解相机姿态</li> <li>基于相机姿态训练3D Gaussian Splatting模型</li> </ol> </li> </ul> <h3 id="技术优势">技术优势</h3> <p>3DGS相比传统NeRF具有显著优势：</p> <ul> <li><strong>渲染速度</strong>：比NeRF的射线积分快几个数量级</li> <li><strong>实时性</strong>：能够实现实时渲染</li> <li><strong>效率</strong>：将场景表面”撒满”会发光的小高斯点，实现高效渲染</li> </ul> <h2 id="2-新场景定位与匹配">2. 新场景定位与匹配</h2> <h3 id="核心思想">核心思想</h3> <p>用少量新照片（甚至1张）在旧模型中定位，因为大部分物体未发生变化，仍能匹配到准确位姿。</p> <h3 id="技术挑战">技术挑战</h3> <ul> <li>需要处理视角变化</li> <li>应对光照条件差异</li> <li>处理部分遮挡情况</li> </ul> <h2 id="3-同一视角下的找不同">3. 同一视角下的”找不同”</h2> <h3 id="传统方法的局限">传统方法的局限</h3> <p>传统像素差异方法受以下因素影响：</p> <ul> <li>光照变化</li> <li>遮挡情况</li> <li>视角微小差异</li> </ul> <h3 id="3dgs-cd的改进">3DGS-CD的改进</h3> <ol> <li><strong>渲染对比</strong>：用3DGS将旧场景渲染成图片，与真实新照片对比</li> <li><strong>语义特征</strong>：使用EfficientSAM（轻量版Segment-Anything）的特征向量</li> <li><strong>相似度计算</strong>：计算两张图在语义嵌入空间的余弦差</li> <li><strong>自动阈值</strong>：使用Otsu算法自动确定”可能变动区域”的阈值</li> </ol> <h2 id="4-精准物体分割">4. 精准物体分割</h2> <h3 id="双重分割策略">双重分割策略</h3> <p>对每个差异框，分别在两个图像中进行分割：</p> <ul> <li><strong>旧渲染图</strong>：得到move-out掩码（物体原位置）</li> <li><strong>新照片</strong>：得到move-in掩码（物体新位置或新出现）</li> </ul> <h3 id="技术细节">技术细节</h3> <ul> <li>使用EfficientSAM进行高置信度掩码生成</li> <li>确保分割的精确性和一致性</li> </ul> <h2 id="5-多视角3d模板生成">5. 多视角3D模板生成</h2> <h3 id="核心步骤">核心步骤</h3> <h4 id="a-深度回投">a. 深度回投</h4> <ul> <li>使用旧渲染深度将每个2D掩码回投成点云</li> <li>提取SuperPoint特征点，同样回投成稀疏3D特征</li> </ul> <h4 id="b-多视角匹配">b. 多视角匹配</h4> <ul> <li>使用Hausdorff距离 + EfficientSAM嵌入相似度进行匹配</li> <li>采用匈牙利算法进行最优配对</li> </ul> <h4 id="c-模板生成">c. 模板生成</h4> <p>结果：每个被移动/删除的物体都有一份”合并后的多视角点云 + 特征”——称为3D物体模板</p> <h2 id="6-物体类型判断与3d分割">6. 物体类型判断与3D分割</h2> <h3 id="变化类型识别">变化类型识别</h3> <ul> <li><strong>移动物体</strong>：模板中的3D特征在新照片中找到足够匹配点</li> <li><strong>删除物体</strong>：模板中的特征在新照片中匹配不到</li> <li><strong>新增物体</strong>：新照片中独立出现而旧模板无匹配的物体</li> </ul> <h3 id="完整体素掩码生成">完整体素掩码生成</h3> <ul> <li>将模板投影到更多旧照片上</li> <li>使用SAM进行分割</li> <li>进行多视角体素投票（多数表决 &gt;0.95视为在物体内）</li> </ul> <h2 id="7-6d位姿估计与优化">7. 6D位姿估计与优化</h2> <h3 id="粗估计阶段">粗估计阶段</h3> <ul> <li>使用2D-3D对应点运行RANSAC-PnP算法</li> <li>获得初始位姿估计</li> </ul> <h3 id="精细优化阶段">精细优化阶段</h3> <ul> <li>将属于物体的高斯整体平移旋转到估计位姿</li> <li>与新照片进行”渲染-对比”</li> <li>通过反向传播微调相机与物体姿态</li> <li>其他高斯参数保持冻结</li> <li>基于渲染的光度误差进行优化</li> </ul> <h2 id="8-遮挡处理与任意视角渲染">8. 遮挡处理与任意视角渲染</h2> <h3 id="遮挡检测机制">遮挡检测机制</h3> <ol> <li>按需渲染高斯模型（包含已移动的物体）的深度</li> <li>检查每个像素回投后的真实深度是否落在物体体素内</li> <li>如果不在体素内，视为被遮挡并抹掉</li> </ol> <h3 id="技术优势-1">技术优势</h3> <ul> <li>能够处理任意视角下的遮挡情况</li> <li>生成无穿帮的2D掩码</li> <li>保证渲染结果的视觉一致性</li> </ul> <h2 id="算法特点总结">算法特点总结</h2> <h3 id="技术优势-2">技术优势</h3> <ol> <li><strong>高效性</strong>：基于3DGS的快速渲染</li> <li><strong>鲁棒性</strong>：多视角融合提高检测准确性</li> <li><strong>完整性</strong>：能够处理移动、删除、新增三种变化类型</li> <li><strong>实用性</strong>：支持任意视角的遮挡处理</li> </ol> <h3 id="应用场景">应用场景</h3> <ul> <li>室内环境监控</li> <li>机器人导航</li> <li>增强现实</li> <li>场景理解</li> </ul> <h2 id="未来发展方向">未来发展方向</h2> <ol> <li><strong>实时性优化</strong>：进一步提高算法运行速度</li> <li><strong>鲁棒性增强</strong>：处理更复杂的光照和遮挡情况</li> <li><strong>精度提升</strong>：减少误检和漏检</li> <li><strong>扩展性</strong>：支持更多类型的环境和物体</li> </ol> <hr/> <p><em>3DGS-CD代表了场景变化检测领域的重要进展，通过巧妙结合3D重建和语义分割技术，实现了高效准确的变化检测。</em></p>]]></content><author><name></name></author><category term="research-analysis"/><category term="computer-vision"/><category term="3d-reconstruction"/><category term="change-detection"/><summary type="html"><![CDATA[深入分析3D Gaussian Splatting Change Detection算法的核心原理和实现流程]]></summary></entry><entry><title type="html">Summer Vacation Research Summary</title><link href="https://ziya-jiang.github.io/blog/2025/summer_vacation_summary/" rel="alternate" type="text/html" title="Summer Vacation Research Summary"/><published>2025-07-18T16:00:00+00:00</published><updated>2025-07-18T16:00:00+00:00</updated><id>https://ziya-jiang.github.io/blog/2025/summer_vacation_summary</id><content type="html" xml:base="https://ziya-jiang.github.io/blog/2025/summer_vacation_summary/"><![CDATA[<p>As of July 1st, my summer vacation officially began, and three weeks have already passed. Here’s a chronological summary of my research progress and achievements.</p> <h2 id="week-1-concept-map-integration-and-system-development">Week 1: Concept Map Integration and System Development</h2> <p>During the first week, I made significant progress in replacing CLIP with concept maps as explicit storage for spatial understanding. The Gaussian Memory Field now completely handles the imagination work without needing to dive into CLIP features.</p> <p>I also completed the main components of the KARA system, including:</p> <ul> <li><strong>Concept map-based human-computer dialogue</strong>: Implemented natural language interaction using spatial concept understanding</li> <li><strong>Top-down binary navigation graph</strong>: Developed efficient path planning using hierarchical spatial representations</li> </ul> <p>This week laid the foundation for a more robust and interpretable spatial reasoning system.</p> <h2 id="week-2-system-integration-and-real-world-demonstrations">Week 2: System Integration and Real-world Demonstrations</h2> <p>The second week focused on system integration and real-world testing. I conducted live demonstrations and recordings in three different environments:</p> <ul> <li><strong>Conference room</strong>: Testing system performance in controlled indoor environments</li> <li><strong>Senior care facility</strong>: Evaluating adaptability in complex living spaces</li> <li><strong>Unmanned supermarket</strong>: Assessing navigation capabilities in commercial settings</li> </ul> <h3 id="performance-bottlenecks-identified">Performance Bottlenecks Identified:</h3> <ul> <li><strong>Navigation limitations</strong>: The system’s path planning showed performance constraints</li> <li><strong>Point cloud mismatching</strong>: Objects appeared as duplicates (ghosting effect) due to registration issues</li> </ul> <p>Despite these challenges, the demonstrations successfully showcased the system’s potential and highlighted areas for improvement.</p> <h2 id="week-3-change-detection-research-and-website-development">Week 3: Change Detection Research and Website Development</h2> <p>The third week was dedicated to advancing change detection capabilities and personal development:</p> <h3 id="research-progress">Research Progress:</h3> <ul> <li><strong>Change detection strategy discussions</strong>: Had detailed discussions with Li Xia and Jin Jin on implementation strategies for change detection</li> <li><strong>3DGSSlam recordings</strong>: Completed real-world recordings in three scenarios, successfully reproducing the authoritative 3DGS-CD (3D Gaussian Splatting Change Detection) results</li> <li><strong>Algorithm robustness analysis</strong>: Found that the current algorithm has limited robustness, only detecting significant scene changes</li> </ul> <h3 id="personal-development">Personal Development:</h3> <ul> <li><strong>Personal website creation</strong>: Built this blog website that you’re currently reading - I’m quite pleased with the result!</li> </ul> <h2 id="future-plans-next-two-weeks">Future Plans (Next Two Weeks)</h2> <p>Looking ahead to the remaining two weeks of summer vacation, I plan to focus on:</p> <ul> <li><strong>Change detection integration</strong>: Integrating and modifying the change detection algorithms</li> <li><strong>System optimization</strong>: Addressing the performance bottlenecks identified during demonstrations</li> <li><strong>Algorithm robustness improvement</strong>: Enhancing the change detection algorithm’s sensitivity and reliability</li> </ul> <h2 id="key-achievements">Key Achievements</h2> <ol> <li><strong>Conceptual breakthrough</strong>: Successfully replaced CLIP with concept maps for spatial understanding</li> <li><strong>System development</strong>: Completed the main KARA system with dialogue and navigation capabilities</li> <li><strong>Real-world validation</strong>: Conducted comprehensive demonstrations in multiple environments</li> <li><strong>Research advancement</strong>: Made progress in change detection and 3D Gaussian Splatting</li> <li><strong>Personal growth</strong>: Developed technical and communication skills through presentations and discussions</li> </ol> <h2 id="technical-insights">Technical Insights</h2> <p>The transition from CLIP to concept maps represents a significant architectural improvement, providing:</p> <ul> <li><strong>Better interpretability</strong>: Spatial concepts are now explicitly represented</li> <li><strong>Improved efficiency</strong>: Reduced computational overhead compared to CLIP feature extraction</li> <li><strong>Enhanced flexibility</strong>: More adaptable to different spatial reasoning tasks</li> </ul> <h2 id="challenges-and-lessons-learned">Challenges and Lessons Learned</h2> <ul> <li><strong>Navigation optimization</strong>: Need to improve path planning algorithms for better real-time performance</li> <li><strong>Point cloud registration</strong>: Address ghosting issues through better registration techniques</li> <li><strong>Change detection robustness</strong>: Develop more sensitive algorithms for subtle scene changes</li> </ul> <hr/> <p><em>This summer has been incredibly productive, combining theoretical research with practical implementation. I’m excited to continue this work and see where the next two weeks take us.</em></p>]]></content><author><name></name></author><category term="research-updates"/><category term="research"/><category term="computer-vision"/><category term="robotics"/><summary type="html"><![CDATA[A comprehensive summary of my three-week summer research progress, including concept map integration, system demonstrations, and future plans]]></summary></entry><entry><title type="html">Github Management Guide</title><link href="https://ziya-jiang.github.io/blog/2025/github-management/" rel="alternate" type="text/html" title="Github Management Guide"/><published>2025-07-18T15:59:00+00:00</published><updated>2025-07-18T15:59:00+00:00</updated><id>https://ziya-jiang.github.io/blog/2025/github-management</id><content type="html" xml:base="https://ziya-jiang.github.io/blog/2025/github-management/"><![CDATA[<p>This blog post documents how to manage GitHub repositories for personal website deployment. My GitHub username is <code class="language-plaintext highlighter-rouge">Ziya-Jiang</code>, and this guide will cover the complete workflow from local development to GitHub Pages deployment.</p> <h2 id="part-1-committing-updated-repository-to-main-branch">Part 1: Committing Updated Repository to Main Branch</h2> <h3 id="1-initialize-local-repository">1. Initialize Local Repository</h3> <p>First, ensure your local project is initialized as a Git repository:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Initialize Git repository if not already done</span>
git init

<span class="c"># Add remote repository (if not already added)</span>
git remote add origin https://github.com/Ziya-Jiang/Ziya-Jiang.github.io.git
</code></pre></div></div> <h3 id="2-check-current-status">2. Check Current Status</h3> <p>Before committing, check the current working status:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Check current branch</span>
git branch

<span class="c"># Check file status</span>
git status

<span class="c"># View modified files</span>
git diff
</code></pre></div></div> <h3 id="3-add-files-to-staging-area">3. Add Files to Staging Area</h3> <p>Add all modified files to the Git staging area:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Add all files</span>
git add <span class="nb">.</span>

<span class="c"># Or add specific files</span>
git add _posts/2025-07-18-Github-Management.md
git add _config.yml
</code></pre></div></div> <h3 id="4-commit-changes">4. Commit Changes</h3> <p>Commit changes with meaningful commit messages:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Commit changes</span>
git commit <span class="nt">-m</span> <span class="s2">"feat: add GitHub website management blog post

- Add comprehensive GitHub repository management guide
- Include code commit and branch management workflow
- Update website configuration and content"</span>
</code></pre></div></div> <h3 id="5-push-to-main-branch">5. Push to Main Branch</h3> <p>Push local changes to the GitHub main branch:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Push to main branch</span>
git push origin main

<span class="c"># If first time pushing, may need to set upstream branch</span>
git push <span class="nt">-u</span> origin main
</code></pre></div></div> <h3 id="6-verify-push-results">6. Verify Push Results</h3> <p>After pushing, verify the results:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Check remote branch status</span>
git remote <span class="nt">-v</span>

<span class="c"># View commit history</span>
git log <span class="nt">--oneline</span> <span class="nt">-5</span>
</code></pre></div></div> <h3 id="7-troubleshooting-common-issues">7. Troubleshooting Common Issues</h3> <h4 id="if-you-encounter-push-conflicts">If you encounter push conflicts:</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># First pull remote changes</span>
git pull origin main

<span class="c"># Resolve conflicts and recommit</span>
git add <span class="nb">.</span>
git commit <span class="nt">-m</span> <span class="s2">"resolve: fix merge conflicts"</span>
git push origin main
</code></pre></div></div> <h4 id="if-force-push-is-needed-use-with-caution">If force push is needed (use with caution):</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Force push (use only when necessary)</span>
git push <span class="nt">--force</span> origin main
</code></pre></div></div> <h3 id="8-automation-script">8. Automation Script</h3> <p>To simplify the process, create an automation script:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="c"># deploy.sh</span>

<span class="nb">echo</span> <span class="s2">"Starting deployment process..."</span>

<span class="c"># Add all changes</span>
git add <span class="nb">.</span>

<span class="c"># Commit changes</span>
git commit <span class="nt">-m</span> <span class="s2">"update: </span><span class="si">$(</span><span class="nb">date</span> <span class="s1">'+%Y-%m-%d %H:%M:%S'</span><span class="si">)</span><span class="s2"> auto update"</span>

<span class="c"># Push to main branch</span>
git push origin main

<span class="nb">echo</span> <span class="s2">"Deployment completed!"</span>
</code></pre></div></div> <p>Usage:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod</span> +x deploy.sh
./deploy.sh
</code></pre></div></div> <h3 id="9-best-practices">9. Best Practices</h3> <ol> <li><strong>Regular commits</strong>: Don’t accumulate too many changes before committing</li> <li><strong>Meaningful commit messages</strong>: Use clear commit messages to describe changes</li> <li><strong>Branch management</strong>: Consider using feature branches for important changes</li> <li><strong>Backup</strong>: Regularly backup important files</li> <li><strong>Testing</strong>: Test website functionality locally before pushing</li> </ol> <h3 id="10-next-steps">10. Next Steps</h3> <p>In the next part, we will cover:</p> <ul> <li>GitHub Pages configuration and deployment</li> <li>Custom domain setup</li> <li>Automated deployment workflows</li> <li>Performance optimization and monitoring</li> </ul> <hr/>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="charts"/><summary type="html"><![CDATA[A comprehensive guide to managing GitHub repositories for personal website deployment, including code commits, branch management, and deployment workflows]]></summary></entry><entry><title type="html"></title><link href="https://ziya-jiang.github.io/blog/2025/2025-07-18-ros-package/" rel="alternate" type="text/html" title=""/><published>2025-07-18T15:50:02+00:00</published><updated>2025-07-18T15:50:02+00:00</updated><id>https://ziya-jiang.github.io/blog/2025/2025-07-18-ros-package</id><content type="html" xml:base="https://ziya-jiang.github.io/blog/2025/2025-07-18-ros-package/"><![CDATA[<h1 id="understanding-ros-packages-a-comprehensive-guide">Understanding ROS Packages: A Comprehensive Guide</h1> <p>ROS (Robot Operating System) packages are the fundamental building blocks of ROS-based robotics software. This guide will explain what ROS packages are, their purpose, structure, and how to work with them effectively.</p> <h2 id="what-is-a-ros-package-and-why-do-we-need-it">What is a ROS Package and Why Do We Need It?</h2> <h3 id="1-minimal-distribution-unit">1. Minimal Distribution Unit</h3> <ul> <li>In ROS, all distributable, reusable, compilable, and runnable code is packaged into Packages</li> <li>GitHub repositories commonly contain one or multiple Packages</li> </ul> <h3 id="2-dependency-and-build-manager">2. Dependency and Build Manager</h3> <ul> <li>Each package declares its dependencies on other packages, system libraries, and toolchains</li> <li>Build systems (catkin for ROS 1 / ament for ROS 2) automatically resolve these dependencies and set compilation parameters</li> </ul> <h3 id="3-namespace-management">3. Namespace Management</h3> <ul> <li>Topics, services, actions, parameters, and executables are logically organized through package names to prevent conflicts</li> </ul> <h3 id="4-distribution-and-installation">4. Distribution and Installation</h3> <ul> <li>ROS binary repositories (apt, yum, pacman, etc.) and source installation scripts are packaged and distributed by Package</li> <li><code class="language-plaintext highlighter-rouge">rosdep</code> automatically installs system-level dependencies based on <code class="language-plaintext highlighter-rouge">package.xml</code></li> </ul> <h2 id="whats-inside-a-typical-package">What’s Inside a Typical Package?</h2> <p>The following example shows a ROS 1 (catkin) structure. ROS 2 (ament) structure is similar, with main differences in <code class="language-plaintext highlighter-rouge">package.xml</code> format being stricter and build instructions written differently in <code class="language-plaintext highlighter-rouge">CMakeLists.txt</code>.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>my_robot_package/
├── CMakeLists.txt          # Build script: compilation options, dependencies, target executables
├── package.xml             # Metadata: package name, version, dependencies, license, maintainer
├── include/                # Header files for other packages to #include
│   └── my_robot_package/
├── src/                    # C/C++ source code, compiled into executables or libraries
│   └── main.cpp
├── scripts/                # Python / Bash scripts, requires chmod +x
│   └── talker.py
├── launch/                 # *.launch or *.py (ROS2) files, one-click startup of multiple nodes
│   └── demo.launch
├── config/                 # YAML or .rviz / .yaml parameter configurations
│   └── joystick.yaml
├── msg/                    # Custom messages *.msg
│   └── WheelVel.msg
├── srv/                    # Custom services *.srv
│   └── SetSpeed.srv
├── action/                 # Custom actions *.action
│   └── Navigate.action
├── urdf/                   # Robot models *.urdf, *.xacro
│   └── my_robot.urdf.xacro
├── rviz/                   # RViz configurations, Marker resources
├── meshes/                 # STL/DAE visual and collision models
└── README.md               # Documentation
</code></pre></div></div> <h3 id="directoryfile-responsibilities">Directory/File Responsibilities</h3> <h4 id="1-packagexml">1. package.xml</h4> <ul> <li><strong>Specify dependencies</strong>: <code class="language-plaintext highlighter-rouge">build_depend</code>, <code class="language-plaintext highlighter-rouge">exec_depend</code>, <code class="language-plaintext highlighter-rouge">test_depend</code></li> <li><strong>Metadata</strong>: version, author, license, description</li> <li><strong>ROS 2</strong>: also carries export interfaces (e.g., <code class="language-plaintext highlighter-rouge">ament_cmake</code>, <code class="language-plaintext highlighter-rouge">pluginlib_export_plugin_description_file</code>)</li> </ul> <h4 id="2-cmakeliststxt">2. CMakeLists.txt</h4> <ul> <li><strong>Call</strong>: <code class="language-plaintext highlighter-rouge">find_package(catkin REQUIRED COMPONENTS roscpp std_msgs …)</code></li> <li><strong>Specify compilation targets</strong>: <code class="language-plaintext highlighter-rouge">add_executable()</code> / <code class="language-plaintext highlighter-rouge">ament_target_dependencies()</code></li> <li><strong>Installation paths</strong>: <code class="language-plaintext highlighter-rouge">install()</code> for <code class="language-plaintext highlighter-rouge">rosrun/ros2 run</code> and system package management</li> </ul> <h4 id="3-src-and-include">3. src/ and include/</h4> <ul> <li><strong>C++/C nodes and library implementations</strong>; headers in include for easy reference by other packages</li> </ul> <h4 id="4-scripts">4. scripts/</h4> <ul> <li><strong>Python nodes and helper scripts</strong>; ROS 1 uses <code class="language-plaintext highlighter-rouge">#!/usr/bin/env python</code>; ROS 2 emphasizes entry points</li> </ul> <h4 id="5-launch">5. launch/</h4> <ul> <li><strong>Describe how the entire system runs</strong>: nodes, parameters, namespaces, remapping, machine distribution</li> </ul> <h4 id="6-msgsrvaction">6. msg/srv/action</h4> <ul> <li><strong>Custom communication interfaces</strong>; automatically generate source code in corresponding languages during <code class="language-plaintext highlighter-rouge">catkin_make</code> or <code class="language-plaintext highlighter-rouge">colcon build</code></li> </ul> <h4 id="7-config">7. config/</h4> <ul> <li><strong>Static parameter files</strong>; loaded using <code class="language-plaintext highlighter-rouge">&lt;rosparam file=</code> or ROS 2 <code class="language-plaintext highlighter-rouge">param file=</code></li> </ul> <h4 id="8-urdf-meshes-rviz">8. urdf/, meshes/, rviz/</h4> <ul> <li><strong>Robot models and visualization resources</strong></li> </ul> <h2 id="ros-1-vs-ros-2-package-differences">ROS 1 vs ROS 2 Package Differences</h2> <h3 id="1-build-system">1. Build System</h3> <ul> <li><strong>ROS 1</strong>: catkin (CMake-based)</li> <li><strong>ROS 2</strong>: ament (modified CMake + Python); but directory structure differences are minimal</li> </ul> <h3 id="2-launch-files">2. Launch Files</h3> <ul> <li><strong>ROS 1</strong>: “*.launch” XML</li> <li><strong>ROS 2</strong>: adds Python launch with enhanced functionality</li> </ul> <h3 id="3-security-and-cross-platform">3. Security and Cross-Platform</h3> <ul> <li><strong>ROS 2 packages</strong> automatically adapt to DDS middleware, security encryption, real-time parameter declarations, and other new features</li> </ul> <h2 id="common-development-workflow">Common Development Workflow</h2> <h3 id="1-create-package">1. Create Package</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># ROS1</span>
catkin_create_pkg my_package roscpp rospy std_msgs

<span class="c"># ROS2</span>
ros2 pkg create <span class="nt">--build-type</span> ament_cmake my_package <span class="nt">--dependencies</span> rclcpp std_msgs
</code></pre></div></div> <h3 id="2-write-code--compile">2. Write Code → Compile</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>catkin_make         <span class="c"># or colcon build</span>
<span class="nb">source </span>devel/setup.bash
</code></pre></div></div> <h3 id="3-run">3. Run</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rosrun my_package talker
roslaunch my_package demo.launch
</code></pre></div></div> <h2 id="best-practices">Best Practices</h2> <h3 id="package-naming">Package Naming</h3> <ul> <li>Use lowercase with underscores: <code class="language-plaintext highlighter-rouge">my_robot_package</code></li> <li>Be descriptive but concise</li> <li>Avoid special characters</li> </ul> <h3 id="dependency-management">Dependency Management</h3> <ul> <li>Only declare necessary dependencies</li> <li>Use appropriate dependency types (build, exec, test)</li> <li>Keep dependencies up to date</li> </ul> <h3 id="documentation">Documentation</h3> <ul> <li>Always include a README.md</li> <li>Document installation and usage</li> <li>Provide examples and tutorials</li> </ul> <h3 id="version-control">Version Control</h3> <ul> <li>Use semantic versioning</li> <li>Tag releases appropriately</li> <li>Maintain a changelog</li> </ul> <h2 id="summary">Summary</h2> <p>ROS Packages provide a “minimal reusable unit” packaging method, making robot software modular like LEGO blocks. A package typically contains: metadata (package.xml), build scripts (CMakeLists.txt), source code, scripts, launch files, parameters, models, and custom messages. Understanding package structure and dependency declaration is the foundation for ROS development and distribution.</p> <hr/> <p><em>ROS packages are the cornerstone of modular robotics development, enabling code reuse, easy distribution, and systematic dependency management in the robotics ecosystem.</em></p>]]></content><author><name></name></author></entry><entry><title type="html">a post with plotly.js</title><link href="https://ziya-jiang.github.io/blog/2025/plotly/" rel="alternate" type="text/html" title="a post with plotly.js"/><published>2025-03-26T14:24:00+00:00</published><updated>2025-03-26T14:24:00+00:00</updated><id>https://ziya-jiang.github.io/blog/2025/plotly</id><content type="html" xml:base="https://ziya-jiang.github.io/blog/2025/plotly/"><![CDATA[<p>This is an example post with some <a href="https://plotly.com/javascript/">plotly</a> code.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">plotly
</span><span class="sb">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "type": "scatter"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [16, 5, 11, 9],
      "type": "scatter"
    }
  ]
}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-plotly">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "type": "scatter"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [16, 5, 11, 9],
      "type": "scatter"
    }
  ]
}
</code></pre> <p>Also another example chart.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">plotly
</span><span class="sb">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "mode": "markers"
    },
    {
      "x": [2, 3, 4, 5],
      "y": [16, 5, 11, 9],
      "mode": "lines"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [12, 9, 15, 12],
      "mode": "lines+markers"
    }
  ],
  "layout": {
    "title": {
      "text": "Line and Scatter Plot"
    }
  }
}</span>
<span class="p">```</span>
</code></pre></div></div> <p>This is how it looks like:</p> <pre><code class="language-plotly">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "mode": "markers"
    },
    {
      "x": [2, 3, 4, 5],
      "y": [16, 5, 11, 9],
      "mode": "lines"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [12, 9, 15, 12],
      "mode": "lines+markers"
    }
  ],
  "layout": {
    "title": {
      "text": "Line and Scatter Plot"
    }
  }
}
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="charts"/><summary type="html"><![CDATA[this is what included plotly.js code could look like]]></summary></entry><entry><title type="html">a post with image galleries</title><link href="https://ziya-jiang.github.io/blog/2024/photo-gallery/" rel="alternate" type="text/html" title="a post with image galleries"/><published>2024-12-04T01:59:00+00:00</published><updated>2024-12-04T01:59:00+00:00</updated><id>https://ziya-jiang.github.io/blog/2024/photo-gallery</id><content type="html" xml:base="https://ziya-jiang.github.io/blog/2024/photo-gallery/"><![CDATA[<p>The images in this post are all zoomable, arranged into different mini-galleries using different libraries.</p> <h2 id="lightbox2"><a href="https://lokeshdhakar.com/projects/lightbox2/">Lightbox2</a></h2> <p><a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-2500.jpg" data-lightbox="roadtrip"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-200.jpg"/></a> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg" data-lightbox="roadtrip"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg"/></a> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg" data-lightbox="roadtrip"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg"/></a></p> <hr/> <h2 id="photoswipe"><a href="https://photoswipe.com/">PhotoSwipe</a></h2> <div class="pswp-gallery pswp-gallery--single-column" id="gallery--getting-started"> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg" data-pswp-width="1669" data-pswp-height="2500" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg" alt=""/> </a> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/7/img-2500.jpg" data-pswp-width="1875" data-pswp-height="2500" data-cropped="true" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/7/img-200.jpg" alt=""/> </a> <a href="https://unsplash.com" data-pswp-src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg" data-pswp-width="2500" data-pswp-height="1666" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg" alt=""/> </a> <div> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-2500.jpg" data-pswp-width="2500" data-pswp-height="1667" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-200.jpg" alt=""/> </a> </div> </div> <hr/> <h2 id="spotlight-js"><a href="https://nextapps-de.github.io/spotlight/">Spotlight JS</a></h2> <div class="spotlight-group"> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg"/> </a> </div> <div class="spotlight-group"> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/4/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/4/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/5/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/5/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-200.jpg"/> </a> </div> <hr/> <h2 id="venobox"><a href="https://veno.es/venobox/">Venobox</a></h2> <p><a class="venobox" data-gall="myGallery" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-2500.jpg"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-200.jpg"/></a> <a class="venobox" data-gall="myGallery" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg"/></a> <a class="venobox" data-gall="myGallery" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg"/></a></p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="images"/><summary type="html"><![CDATA[this is what included image galleries could look like]]></summary></entry><entry><title type="html">Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra</title><link href="https://ziya-jiang.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/" rel="alternate" type="text/html" title="Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra"/><published>2024-05-14T00:00:00+00:00</published><updated>2024-05-14T00:00:00+00:00</updated><id>https://ziya-jiang.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra</id><content type="html" xml:base="https://ziya-jiang.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/"><![CDATA[<p>May 14, 2024 We’re introducing a series of updates across the Gemini family of models, including the new 1.5 Flash, our lightweight model for speed and efficiency, and Project Astra, our vision for the future of AI assistants. In December, we launched our first natively multimodal model Gemini 1.0 in three sizes: Ultra, Pro and Nano. Just a few months later we released 1.5 Pro, with enhanced performance and a breakthrough long context window of 1 million tokens.Developers and enterprise customers have been putting 1.5 Pro to use in incredible ways and finding its long context window, multimodal reasoning capabilities and impressive overall performance incredibly useful.We know from user feedback that some applications need lower latency and a lower cost to serve. This inspired us to keep innovating, so today, we’re introducing Gemini 1.5 Flash: a model that’s lighter-weight than 1.5 Pro, and designed to be fast and efficient to serve at scale.Both 1.5 Pro and 1.5 Flash are available in public preview with a 1 million token context window in Google AI Studio and Vertex AI. And now, 1.5 Pro is also available with a 2 million token context window via waitlist to developers using the API and to Google Cloud customers.We’re also introducing updates across the Gemini family of models, announcing our next generation of open models, Gemma 2, and sharing progress on the future of AI assistants, with Project Astra.Context lengths of leading foundation models compared with Gemini 1.5’s 2 million token capability1.5 Flash is the newest addition to the Gemini model family and the fastest Gemini model served in the API. It’s optimized for high-volume, high-frequency tasks at scale, is more cost-efficient to serve and features our breakthrough long context window.While it’s a lighter weight model than 1.5 Pro, it’s highly capable of multimodal reasoning across vast amounts of information and delivers impressive quality for its size.The new Gemini 1.5 Flash model is optimized for speed and efficiency, is highly capable of multimodal reasoning and features our breakthrough long context window.1.5 Flash excels at summarization, chat applications, image and video captioning, data extraction from long documents and tables, and more. This is because it’s been trained by 1.5 Pro through a process called “distillation,” where the most essential knowledge and skills from a larger model are transferred to a smaller, more efficient model.Read more about 1.5 Flash in our updated Gemini 1.5 technical report, on the Gemini technology page, and learn about 1.5 Flash’s availability and pricing.Over the last few months, we’ve significantly improved 1.5 Pro, our best model for general performance across a wide range of tasks.Beyond extending its context window to 2 million tokens, we’ve enhanced its code generation, logical reasoning and planning, multi-turn conversation, and audio and image understanding through data and algorithmic advances. We see strong improvements on public and internal benchmarks for each of these tasks.1.5 Pro can now follow increasingly complex and nuanced instructions, including ones that specify product-level behavior involving role, format and style. We’ve improved control over the model’s responses for specific use cases, like crafting the persona and response style of a chat agent or automating workflows through multiple function calls. And we’ve enabled users to steer model behavior by setting system instructions.We added audio understanding in the Gemini API and Google AI Studio, so 1.5 Pro can now reason across image and audio for videos uploaded in Google AI Studio. And we’re now integrating 1.5 Pro into Google products, including Gemini Advanced and in Workspace apps.Read more about 1.5 Pro in our updated Gemini 1.5 technical report and on the Gemini technology page.Gemini Nano is expanding beyond text-only inputs to include images as well. Starting with Pixel, applications using Gemini Nano with Multimodality will be able to understand the world the way people do — not just through text, but also through sight, sound and spoken language.Read more about Gemini 1.0 Nano on Android.Today, we’re also sharing a series of updates to Gemma, our family of open models built from the same research and technology used to create the Gemini models.We’re announcing Gemma 2, our next generation of open models for responsible AI innovation. Gemma 2 has a new architecture designed for breakthrough performance and efficiency, and will be available in new sizes.The Gemma family is also expanding with PaliGemma, our first vision-language model inspired by PaLI-3. And we’ve upgraded our Responsible Generative AI Toolkit with LLM Comparator for evaluating the quality of model responses.Read more on the Developer blog.As part of Google DeepMind’s mission to build AI responsibly to benefit humanity, we’ve always wanted to develop universal AI agents that can be helpful in everyday life. That’s why today, we’re sharing our progress in building the future of AI assistants with Project Astra (advanced seeing and talking responsive agent).To be truly useful, an agent needs to understand and respond to the complex and dynamic world just like people do — and take in and remember what it sees and hears to understand context and take action. It also needs to be proactive, teachable and personal, so users can talk to it naturally and without lag or delay.While we’ve made incredible progress developing AI systems that can understand multimodal information, getting response time down to something conversational is a difficult engineering challenge. Over the past few years, we’ve been working to improve how our models perceive, reason and converse to make the pace and quality of interaction feel more natural.Building on Gemini, we’ve developed prototype agents that can process information faster by continuously encoding video frames, combining the video and speech input into a timeline of events, and caching this information for efficient recall.By leveraging our leading speech models, we also enhanced how they sound, giving the agents a wider range of intonations. These agents can better understand the context they’re being used in, and respond quickly, in conversation.With technology like this, it’s easy to envision a future where people could have an expert AI assistant by their side, through a phone or glasses. And some of these capabilities are coming to Google products, like the Gemini app and web experience, later this year.We’ve made incredible progress so far with our family of Gemini models, and we’re always striving to advance the state-of-the-art even further. By investing in a relentless production line of innovation, we’re able to explore new ideas at the frontier, while also unlocking the possibility of new and exciting Gemini use cases.Learn more about Gemini and its capabilities. Your information will be used in accordance with Google’s privacy policy.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      Done. Just one step more.
    
      Check your inbox to confirm your subscription.
    You are already subscribed to our newsletter.
    You can also subscribe with a
    different email address
    
    .
    
  Let’s stay in touch. Get the latest news from Google in your inbox.
          Follow Us
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[We’re sharing updates across our Gemini family of models and a glimpse of Project Astra, our vision for the future of AI assistants.]]></summary></entry><entry><title type="html">a post with tabs</title><link href="https://ziya-jiang.github.io/blog/2024/tabs/" rel="alternate" type="text/html" title="a post with tabs"/><published>2024-05-01T00:32:13+00:00</published><updated>2024-05-01T00:32:13+00:00</updated><id>https://ziya-jiang.github.io/blog/2024/tabs</id><content type="html" xml:base="https://ziya-jiang.github.io/blog/2024/tabs/"><![CDATA[<p>This is how a post with <a href="https://github.com/Ovski4/jekyll-tabs">tabs</a> looks like. Note that the tabs could be used for different purposes, not only for code.</p> <h2 id="first-tabs">First tabs</h2> <p>To add tabs, use the following syntax:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{%</span><span class="w"> </span><span class="nt">tabs</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-1</span><span class="w"> </span><span class="cp">%}</span>

Content 1

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-2</span><span class="w"> </span><span class="cp">%}</span>

Content 2

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtabs</span><span class="w"> </span><span class="cp">%}</span>
</code></pre></div></div> <p>With this you can generate visualizations like:</p> <ul id="log" class="tab" data-tab="b11dcf96-7b12-4d41-a104-b6cd19129385" data-name="log"> <li class="active" id="log-php"> <a href="#">php </a> </li> <li id="log-js"> <a href="#">js </a> </li> <li id="log-ruby"> <a href="#">ruby </a> </li> </ul> <ul class="tab-content" id="b11dcf96-7b12-4d41-a104-b6cd19129385" data-name="log"> <li class="active"> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">var_dump</span><span class="p">(</span><span class="s1">'hello'</span><span class="p">);</span>
</code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">pputs</span> <span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span>
</code></pre></div></div> </li> </ul> <h2 id="another-example">Another example</h2> <ul id="data-struct" class="tab" data-tab="b0826246-c21a-4d0f-b3f1-2f8e78e3d697" data-name="data-struct"> <li class="active" id="data-struct-yaml"> <a href="#">yaml </a> </li> <li id="data-struct-json"> <a href="#">json </a> </li> </ul> <ul class="tab-content" id="b0826246-c21a-4d0f-b3f1-2f8e78e3d697" data-name="data-struct"> <li class="active"> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">hello</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">whatsup"</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">hi"</span>
</code></pre></div></div> </li> <li> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"hello"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"whatsup"</span><span class="p">,</span><span class="w"> </span><span class="s2">"hi"</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> </li> </ul> <h2 id="tabs-for-something-else">Tabs for something else</h2> <ul id="something-else" class="tab" data-tab="e3b39351-ee31-42fe-987b-fc83fb395678" data-name="something-else"> <li class="active" id="something-else-text"> <a href="#">text </a> </li> <li id="something-else-quote"> <a href="#">quote </a> </li> <li id="something-else-list"> <a href="#">list </a> </li> </ul> <ul class="tab-content" id="e3b39351-ee31-42fe-987b-fc83fb395678" data-name="something-else"> <li class="active"> <p>Regular text</p> </li> <li> <blockquote> <p>A quote</p> </blockquote> </li> <li> <p>Hipster list</p> <ul> <li>brunch</li> <li>fixie</li> <li>raybans</li> <li>messenger bag</li> </ul> </li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is what included tabs in a post could look like]]></summary></entry><entry><title type="html">a post with typograms</title><link href="https://ziya-jiang.github.io/blog/2024/typograms/" rel="alternate" type="text/html" title="a post with typograms"/><published>2024-04-29T23:36:10+00:00</published><updated>2024-04-29T23:36:10+00:00</updated><id>https://ziya-jiang.github.io/blog/2024/typograms</id><content type="html" xml:base="https://ziya-jiang.github.io/blog/2024/typograms/"><![CDATA[<p>This is an example post with some <a href="https://github.com/google/typograms/">typograms</a> code.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">typograms
</span><span class="sb">+----+
|    |---&gt; My first diagram!
+----+</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-typograms">+----+
|    |---&gt; My first diagram!
+----+
</code></pre> <p>Another example:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">typograms
</span><span class="sb">.------------------------.
|.----------------------.|
||"https://example.com" ||
|'----------------------'|
| ______________________ |
||                      ||
||   Welcome!           ||
||                      ||
||                      ||
||  .----------------.  ||
||  | username       |  ||
||  '----------------'  ||
||  .----------------.  ||
||  |"*******"       |  ||
||  '----------------'  ||
||                      ||
||  .----------------.  ||
||  |   "Sign-up"    |  ||
||  '----------------'  ||
||                      ||
|+----------------------+|
.------------------------.</span>
<span class="p">```</span>
</code></pre></div></div> <p>which generates:</p> <pre><code class="language-typograms">.------------------------.
|.----------------------.|
||"https://example.com" ||
|'----------------------'|
| ______________________ |
||                      ||
||   Welcome!           ||
||                      ||
||                      ||
||  .----------------.  ||
||  | username       |  ||
||  '----------------'  ||
||  .----------------.  ||
||  |"*******"       |  ||
||  '----------------'  ||
||                      ||
||  .----------------.  ||
||  |   "Sign-up"    |  ||
||  '----------------'  ||
||                      ||
|+----------------------+|
.------------------------.
</code></pre> <p>For more examples, check out the <a href="https://google.github.io/typograms/#examples">typograms documentation</a>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="diagrams"/><summary type="html"><![CDATA[this is what included typograms code could look like]]></summary></entry></feed>