<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://ziya-jiang.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://ziya-jiang.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-07-18T15:31:22+00:00</updated><id>https://ziya-jiang.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">3DGS-CD算法深度解析</title><link href="https://ziya-jiang.github.io/blog/2025/3dgs-cd-analysis/" rel="alternate" type="text/html" title="3DGS-CD算法深度解析"/><published>2025-07-18T18:30:00+00:00</published><updated>2025-07-18T18:30:00+00:00</updated><id>https://ziya-jiang.github.io/blog/2025/3dgs-cd-analysis</id><content type="html" xml:base="https://ziya-jiang.github.io/blog/2025/3dgs-cd-analysis/"><![CDATA[<h1 id="3dgs-cd算法深度解析">3DGS-CD算法深度解析</h1> <p>3DGS-CD（3D Gaussian Splatting Change Detection）是一种基于3D高斯散射的场景变化检测算法。本文将从技术角度深入解析其核心原理和实现流程。</p> <h2 id="算法概述">算法概述</h2> <p>3DGS-CD的核心思想是通过构建场景的3D高斯模型，在不同时间点之间检测物体的移动、删除和新增。整个流程可以分为以下几个关键步骤：</p> <h2 id="1-旧场景扫描进电脑">1. 旧场景”扫描进电脑”</h2> <h3 id="技术实现">技术实现</h3> <ul> <li><strong>输入</strong>：变化前拍摄的多张RGB照片</li> <li><strong>处理流程</strong>： <ol> <li>使用SfM（Structure from Motion）算法求解相机姿态</li> <li>基于相机姿态训练3D Gaussian Splatting模型</li> </ol> </li> </ul> <h3 id="技术优势">技术优势</h3> <p>3DGS相比传统NeRF具有显著优势：</p> <ul> <li><strong>渲染速度</strong>：比NeRF的射线积分快几个数量级</li> <li><strong>实时性</strong>：能够实现实时渲染</li> <li><strong>效率</strong>：将场景表面”撒满”会发光的小高斯点，实现高效渲染</li> </ul> <h2 id="2-新场景定位与匹配">2. 新场景定位与匹配</h2> <h3 id="核心思想">核心思想</h3> <p>用少量新照片（甚至1张）在旧模型中定位，因为大部分物体未发生变化，仍能匹配到准确位姿。</p> <h3 id="技术挑战">技术挑战</h3> <ul> <li>需要处理视角变化</li> <li>应对光照条件差异</li> <li>处理部分遮挡情况</li> </ul> <h2 id="3-同一视角下的找不同">3. 同一视角下的”找不同”</h2> <h3 id="传统方法的局限">传统方法的局限</h3> <p>传统像素差异方法受以下因素影响：</p> <ul> <li>光照变化</li> <li>遮挡情况</li> <li>视角微小差异</li> </ul> <h3 id="3dgs-cd的改进">3DGS-CD的改进</h3> <ol> <li><strong>渲染对比</strong>：用3DGS将旧场景渲染成图片，与真实新照片对比</li> <li><strong>语义特征</strong>：使用EfficientSAM（轻量版Segment-Anything）的特征向量</li> <li><strong>相似度计算</strong>：计算两张图在语义嵌入空间的余弦差</li> <li><strong>自动阈值</strong>：使用Otsu算法自动确定”可能变动区域”的阈值</li> </ol> <h2 id="4-精准物体分割">4. 精准物体分割</h2> <h3 id="双重分割策略">双重分割策略</h3> <p>对每个差异框，分别在两个图像中进行分割：</p> <ul> <li><strong>旧渲染图</strong>：得到move-out掩码（物体原位置）</li> <li><strong>新照片</strong>：得到move-in掩码（物体新位置或新出现）</li> </ul> <h3 id="技术细节">技术细节</h3> <ul> <li>使用EfficientSAM进行高置信度掩码生成</li> <li>确保分割的精确性和一致性</li> </ul> <h2 id="5-多视角3d模板生成">5. 多视角3D模板生成</h2> <h3 id="核心步骤">核心步骤</h3> <h4 id="a-深度回投">a. 深度回投</h4> <ul> <li>使用旧渲染深度将每个2D掩码回投成点云</li> <li>提取SuperPoint特征点，同样回投成稀疏3D特征</li> </ul> <h4 id="b-多视角匹配">b. 多视角匹配</h4> <ul> <li>使用Hausdorff距离 + EfficientSAM嵌入相似度进行匹配</li> <li>采用匈牙利算法进行最优配对</li> </ul> <h4 id="c-模板生成">c. 模板生成</h4> <p>结果：每个被移动/删除的物体都有一份”合并后的多视角点云 + 特征”——称为3D物体模板</p> <h2 id="6-物体类型判断与3d分割">6. 物体类型判断与3D分割</h2> <h3 id="变化类型识别">变化类型识别</h3> <ul> <li><strong>移动物体</strong>：模板中的3D特征在新照片中找到足够匹配点</li> <li><strong>删除物体</strong>：模板中的特征在新照片中匹配不到</li> <li><strong>新增物体</strong>：新照片中独立出现而旧模板无匹配的物体</li> </ul> <h3 id="完整体素掩码生成">完整体素掩码生成</h3> <ul> <li>将模板投影到更多旧照片上</li> <li>使用SAM进行分割</li> <li>进行多视角体素投票（多数表决 &gt;0.95视为在物体内）</li> </ul> <h2 id="7-6d位姿估计与优化">7. 6D位姿估计与优化</h2> <h3 id="粗估计阶段">粗估计阶段</h3> <ul> <li>使用2D-3D对应点运行RANSAC-PnP算法</li> <li>获得初始位姿估计</li> </ul> <h3 id="精细优化阶段">精细优化阶段</h3> <ul> <li>将属于物体的高斯整体平移旋转到估计位姿</li> <li>与新照片进行”渲染-对比”</li> <li>通过反向传播微调相机与物体姿态</li> <li>其他高斯参数保持冻结</li> <li>基于渲染的光度误差进行优化</li> </ul> <h2 id="8-遮挡处理与任意视角渲染">8. 遮挡处理与任意视角渲染</h2> <h3 id="遮挡检测机制">遮挡检测机制</h3> <ol> <li>按需渲染高斯模型（包含已移动的物体）的深度</li> <li>检查每个像素回投后的真实深度是否落在物体体素内</li> <li>如果不在体素内，视为被遮挡并抹掉</li> </ol> <h3 id="技术优势-1">技术优势</h3> <ul> <li>能够处理任意视角下的遮挡情况</li> <li>生成无穿帮的2D掩码</li> <li>保证渲染结果的视觉一致性</li> </ul> <h2 id="算法特点总结">算法特点总结</h2> <h3 id="技术优势-2">技术优势</h3> <ol> <li><strong>高效性</strong>：基于3DGS的快速渲染</li> <li><strong>鲁棒性</strong>：多视角融合提高检测准确性</li> <li><strong>完整性</strong>：能够处理移动、删除、新增三种变化类型</li> <li><strong>实用性</strong>：支持任意视角的遮挡处理</li> </ol> <h3 id="应用场景">应用场景</h3> <ul> <li>室内环境监控</li> <li>机器人导航</li> <li>增强现实</li> <li>场景理解</li> </ul> <h2 id="未来发展方向">未来发展方向</h2> <ol> <li><strong>实时性优化</strong>：进一步提高算法运行速度</li> <li><strong>鲁棒性增强</strong>：处理更复杂的光照和遮挡情况</li> <li><strong>精度提升</strong>：减少误检和漏检</li> <li><strong>扩展性</strong>：支持更多类型的环境和物体</li> </ol> <hr/> <p><em>3DGS-CD代表了场景变化检测领域的重要进展，通过巧妙结合3D重建和语义分割技术，实现了高效准确的变化检测。</em></p>]]></content><author><name></name></author><category term="research-analysis"/><category term="computer-vision"/><category term="3d-reconstruction"/><category term="change-detection"/><summary type="html"><![CDATA[深入分析3D Gaussian Splatting Change Detection算法的核心原理和实现流程]]></summary></entry><entry><title type="html">Summer Vacation Research Summary</title><link href="https://ziya-jiang.github.io/blog/2025/summer_vacation_summary/" rel="alternate" type="text/html" title="Summer Vacation Research Summary"/><published>2025-07-18T16:00:00+00:00</published><updated>2025-07-18T16:00:00+00:00</updated><id>https://ziya-jiang.github.io/blog/2025/summer_vacation_summary</id><content type="html" xml:base="https://ziya-jiang.github.io/blog/2025/summer_vacation_summary/"><![CDATA[<p>As of July 1st, my summer vacation officially began, and three weeks have already passed. Here’s a chronological summary of my research progress and achievements.</p> <h2 id="week-1-concept-map-integration-and-system-development">Week 1: Concept Map Integration and System Development</h2> <p>During the first week, I made significant progress in replacing CLIP with concept maps as explicit storage for spatial understanding. The Gaussian Memory Field now completely handles the imagination work without needing to dive into CLIP features.</p> <p>I also completed the main components of the KARA system, including:</p> <ul> <li><strong>Concept map-based human-computer dialogue</strong>: Implemented natural language interaction using spatial concept understanding</li> <li><strong>Top-down binary navigation graph</strong>: Developed efficient path planning using hierarchical spatial representations</li> </ul> <p>This week laid the foundation for a more robust and interpretable spatial reasoning system.</p> <h2 id="week-2-system-integration-and-real-world-demonstrations">Week 2: System Integration and Real-world Demonstrations</h2> <p>The second week focused on system integration and real-world testing. I conducted live demonstrations and recordings in three different environments:</p> <ul> <li><strong>Conference room</strong>: Testing system performance in controlled indoor environments</li> <li><strong>Senior care facility</strong>: Evaluating adaptability in complex living spaces</li> <li><strong>Unmanned supermarket</strong>: Assessing navigation capabilities in commercial settings</li> </ul> <h3 id="performance-bottlenecks-identified">Performance Bottlenecks Identified:</h3> <ul> <li><strong>Navigation limitations</strong>: The system’s path planning showed performance constraints</li> <li><strong>Point cloud mismatching</strong>: Objects appeared as duplicates (ghosting effect) due to registration issues</li> </ul> <p>Despite these challenges, the demonstrations successfully showcased the system’s potential and highlighted areas for improvement.</p> <h2 id="week-3-change-detection-research-and-website-development">Week 3: Change Detection Research and Website Development</h2> <p>The third week was dedicated to advancing change detection capabilities and personal development:</p> <h3 id="research-progress">Research Progress:</h3> <ul> <li><strong>Change detection strategy discussions</strong>: Had detailed discussions with Li Xia and Jin Jin on implementation strategies for change detection</li> <li><strong>3DGSSlam recordings</strong>: Completed real-world recordings in three scenarios, successfully reproducing the authoritative 3DGS-CD (3D Gaussian Splatting Change Detection) results</li> <li><strong>Algorithm robustness analysis</strong>: Found that the current algorithm has limited robustness, only detecting significant scene changes</li> </ul> <h3 id="personal-development">Personal Development:</h3> <ul> <li><strong>Personal website creation</strong>: Built this blog website that you’re currently reading - I’m quite pleased with the result!</li> </ul> <h2 id="future-plans-next-two-weeks">Future Plans (Next Two Weeks)</h2> <p>Looking ahead to the remaining two weeks of summer vacation, I plan to focus on:</p> <ul> <li><strong>Change detection integration</strong>: Integrating and modifying the change detection algorithms</li> <li><strong>System optimization</strong>: Addressing the performance bottlenecks identified during demonstrations</li> <li><strong>Algorithm robustness improvement</strong>: Enhancing the change detection algorithm’s sensitivity and reliability</li> </ul> <h2 id="key-achievements">Key Achievements</h2> <ol> <li><strong>Conceptual breakthrough</strong>: Successfully replaced CLIP with concept maps for spatial understanding</li> <li><strong>System development</strong>: Completed the main KARA system with dialogue and navigation capabilities</li> <li><strong>Real-world validation</strong>: Conducted comprehensive demonstrations in multiple environments</li> <li><strong>Research advancement</strong>: Made progress in change detection and 3D Gaussian Splatting</li> <li><strong>Personal growth</strong>: Developed technical and communication skills through presentations and discussions</li> </ol> <h2 id="technical-insights">Technical Insights</h2> <p>The transition from CLIP to concept maps represents a significant architectural improvement, providing:</p> <ul> <li><strong>Better interpretability</strong>: Spatial concepts are now explicitly represented</li> <li><strong>Improved efficiency</strong>: Reduced computational overhead compared to CLIP feature extraction</li> <li><strong>Enhanced flexibility</strong>: More adaptable to different spatial reasoning tasks</li> </ul> <h2 id="challenges-and-lessons-learned">Challenges and Lessons Learned</h2> <ul> <li><strong>Navigation optimization</strong>: Need to improve path planning algorithms for better real-time performance</li> <li><strong>Point cloud registration</strong>: Address ghosting issues through better registration techniques</li> <li><strong>Change detection robustness</strong>: Develop more sensitive algorithms for subtle scene changes</li> </ul> <hr/> <p><em>This summer has been incredibly productive, combining theoretical research with practical implementation. I’m excited to continue this work and see where the next two weeks take us.</em></p>]]></content><author><name></name></author><category term="research-updates"/><category term="research"/><category term="computer-vision"/><category term="robotics"/><summary type="html"><![CDATA[A comprehensive summary of my three-week summer research progress, including concept map integration, system demonstrations, and future plans]]></summary></entry><entry><title type="html">Github Management Guide</title><link href="https://ziya-jiang.github.io/blog/2025/github-management/" rel="alternate" type="text/html" title="Github Management Guide"/><published>2025-07-18T15:59:00+00:00</published><updated>2025-07-18T15:59:00+00:00</updated><id>https://ziya-jiang.github.io/blog/2025/github-management</id><content type="html" xml:base="https://ziya-jiang.github.io/blog/2025/github-management/"><![CDATA[<p>This blog post documents how to manage GitHub repositories for personal website deployment. My GitHub username is <code class="language-plaintext highlighter-rouge">Ziya-Jiang</code>, and this guide will cover the complete workflow from local development to GitHub Pages deployment.</p> <h2 id="part-1-committing-updated-repository-to-main-branch">Part 1: Committing Updated Repository to Main Branch</h2> <h3 id="1-initialize-local-repository">1. Initialize Local Repository</h3> <p>First, ensure your local project is initialized as a Git repository:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Initialize Git repository if not already done</span>
git init

<span class="c"># Add remote repository (if not already added)</span>
git remote add origin https://github.com/Ziya-Jiang/Ziya-Jiang.github.io.git
</code></pre></div></div> <h3 id="2-check-current-status">2. Check Current Status</h3> <p>Before committing, check the current working status:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Check current branch</span>
git branch

<span class="c"># Check file status</span>
git status

<span class="c"># View modified files</span>
git diff
</code></pre></div></div> <h3 id="3-add-files-to-staging-area">3. Add Files to Staging Area</h3> <p>Add all modified files to the Git staging area:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Add all files</span>
git add <span class="nb">.</span>

<span class="c"># Or add specific files</span>
git add _posts/2025-07-18-Github-Management.md
git add _config.yml
</code></pre></div></div> <h3 id="4-commit-changes">4. Commit Changes</h3> <p>Commit changes with meaningful commit messages:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Commit changes</span>
git commit <span class="nt">-m</span> <span class="s2">"feat: add GitHub website management blog post

- Add comprehensive GitHub repository management guide
- Include code commit and branch management workflow
- Update website configuration and content"</span>
</code></pre></div></div> <h3 id="5-push-to-main-branch">5. Push to Main Branch</h3> <p>Push local changes to the GitHub main branch:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Push to main branch</span>
git push origin main

<span class="c"># If first time pushing, may need to set upstream branch</span>
git push <span class="nt">-u</span> origin main
</code></pre></div></div> <h3 id="6-verify-push-results">6. Verify Push Results</h3> <p>After pushing, verify the results:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Check remote branch status</span>
git remote <span class="nt">-v</span>

<span class="c"># View commit history</span>
git log <span class="nt">--oneline</span> <span class="nt">-5</span>
</code></pre></div></div> <h3 id="7-troubleshooting-common-issues">7. Troubleshooting Common Issues</h3> <h4 id="if-you-encounter-push-conflicts">If you encounter push conflicts:</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># First pull remote changes</span>
git pull origin main

<span class="c"># Resolve conflicts and recommit</span>
git add <span class="nb">.</span>
git commit <span class="nt">-m</span> <span class="s2">"resolve: fix merge conflicts"</span>
git push origin main
</code></pre></div></div> <h4 id="if-force-push-is-needed-use-with-caution">If force push is needed (use with caution):</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Force push (use only when necessary)</span>
git push <span class="nt">--force</span> origin main
</code></pre></div></div> <h3 id="8-automation-script">8. Automation Script</h3> <p>To simplify the process, create an automation script:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="c"># deploy.sh</span>

<span class="nb">echo</span> <span class="s2">"Starting deployment process..."</span>

<span class="c"># Add all changes</span>
git add <span class="nb">.</span>

<span class="c"># Commit changes</span>
git commit <span class="nt">-m</span> <span class="s2">"update: </span><span class="si">$(</span><span class="nb">date</span> <span class="s1">'+%Y-%m-%d %H:%M:%S'</span><span class="si">)</span><span class="s2"> auto update"</span>

<span class="c"># Push to main branch</span>
git push origin main

<span class="nb">echo</span> <span class="s2">"Deployment completed!"</span>
</code></pre></div></div> <p>Usage:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod</span> +x deploy.sh
./deploy.sh
</code></pre></div></div> <h3 id="9-best-practices">9. Best Practices</h3> <ol> <li><strong>Regular commits</strong>: Don’t accumulate too many changes before committing</li> <li><strong>Meaningful commit messages</strong>: Use clear commit messages to describe changes</li> <li><strong>Branch management</strong>: Consider using feature branches for important changes</li> <li><strong>Backup</strong>: Regularly backup important files</li> <li><strong>Testing</strong>: Test website functionality locally before pushing</li> </ol> <h3 id="10-next-steps">10. Next Steps</h3> <p>In the next part, we will cover:</p> <ul> <li>GitHub Pages configuration and deployment</li> <li>Custom domain setup</li> <li>Automated deployment workflows</li> <li>Performance optimization and monitoring</li> </ul> <hr/>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="charts"/><summary type="html"><![CDATA[A comprehensive guide to managing GitHub repositories for personal website deployment, including code commits, branch management, and deployment workflows]]></summary></entry><entry><title type="html"></title><link href="https://ziya-jiang.github.io/blog/2025/2025-07-18-ros-package/" rel="alternate" type="text/html" title=""/><published>2025-07-18T15:31:22+00:00</published><updated>2025-07-18T15:31:22+00:00</updated><id>https://ziya-jiang.github.io/blog/2025/2025-07-18-ros-package</id><content type="html" xml:base="https://ziya-jiang.github.io/blog/2025/2025-07-18-ros-package/"><![CDATA[<h1 id="understanding-ros-packages-a-comprehensive-guide">Understanding ROS Packages: A Comprehensive Guide</h1> <p>ROS (Robot Operating System) packages are the fundamental building blocks of ROS-based robotics software. This guide will explain what ROS packages are, their purpose, structure, and how to work with them effectively.</p> <h2 id="what-is-a-ros-package-and-why-do-we-need-it">What is a ROS Package and Why Do We Need It?</h2> <h3 id="1-minimal-distribution-unit">1. Minimal Distribution Unit</h3> <ul> <li>In ROS, all distributable, reusable, compilable, and runnable code is packaged into Packages</li> <li>GitHub repositories commonly contain one or multiple Packages</li> </ul> <h3 id="2-dependency-and-build-manager">2. Dependency and Build Manager</h3> <ul> <li>Each package declares its dependencies on other packages, system libraries, and toolchains</li> <li>Build systems (catkin for ROS 1 / ament for ROS 2) automatically resolve these dependencies and set compilation parameters</li> </ul> <h3 id="3-namespace-management">3. Namespace Management</h3> <ul> <li>Topics, services, actions, parameters, and executables are logically organized through package names to prevent conflicts</li> </ul> <h3 id="4-distribution-and-installation">4. Distribution and Installation</h3> <ul> <li>ROS binary repositories (apt, yum, pacman, etc.) and source installation scripts are packaged and distributed by Package</li> <li><code class="language-plaintext highlighter-rouge">rosdep</code> automatically installs system-level dependencies based on <code class="language-plaintext highlighter-rouge">package.xml</code></li> </ul> <h2 id="whats-inside-a-typical-package">What’s Inside a Typical Package?</h2> <p>The following example shows a ROS 1 (catkin) structure. ROS 2 (ament) structure is similar, with main differences in <code class="language-plaintext highlighter-rouge">package.xml</code> format being stricter and build instructions written differently in <code class="language-plaintext highlighter-rouge">CMakeLists.txt</code>.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>my_robot_package/
├── CMakeLists.txt          # Build script: compilation options, dependencies, target executables
├── package.xml             # Metadata: package name, version, dependencies, license, maintainer
├── include/                # Header files for other packages to #include
│   └── my_robot_package/
├── src/                    # C/C++ source code, compiled into executables or libraries
│   └── main.cpp
├── scripts/                # Python / Bash scripts, requires chmod +x
│   └── talker.py
├── launch/                 # *.launch or *.py (ROS2) files, one-click startup of multiple nodes
│   └── demo.launch
├── config/                 # YAML or .rviz / .yaml parameter configurations
│   └── joystick.yaml
├── msg/                    # Custom messages *.msg
│   └── WheelVel.msg
├── srv/                    # Custom services *.srv
│   └── SetSpeed.srv
├── action/                 # Custom actions *.action
│   └── Navigate.action
├── urdf/                   # Robot models *.urdf, *.xacro
│   └── my_robot.urdf.xacro
├── rviz/                   # RViz configurations, Marker resources
├── meshes/                 # STL/DAE visual and collision models
└── README.md               # Documentation
</code></pre></div></div> <h3 id="directoryfile-responsibilities">Directory/File Responsibilities</h3> <h4 id="1-packagexml">1. package.xml</h4> <ul> <li><strong>Specify dependencies</strong>: <code class="language-plaintext highlighter-rouge">build_depend</code>, <code class="language-plaintext highlighter-rouge">exec_depend</code>, <code class="language-plaintext highlighter-rouge">test_depend</code></li> <li><strong>Metadata</strong>: version, author, license, description</li> <li><strong>ROS 2</strong>: also carries export interfaces (e.g., <code class="language-plaintext highlighter-rouge">ament_cmake</code>, <code class="language-plaintext highlighter-rouge">pluginlib_export_plugin_description_file</code>)</li> </ul> <h4 id="2-cmakeliststxt">2. CMakeLists.txt</h4> <ul> <li><strong>Call</strong>: <code class="language-plaintext highlighter-rouge">find_package(catkin REQUIRED COMPONENTS roscpp std_msgs …)</code></li> <li><strong>Specify compilation targets</strong>: <code class="language-plaintext highlighter-rouge">add_executable()</code> / <code class="language-plaintext highlighter-rouge">ament_target_dependencies()</code></li> <li><strong>Installation paths</strong>: <code class="language-plaintext highlighter-rouge">install()</code> for <code class="language-plaintext highlighter-rouge">rosrun/ros2 run</code> and system package management</li> </ul> <h4 id="3-src-and-include">3. src/ and include/</h4> <ul> <li><strong>C++/C nodes and library implementations</strong>; headers in include for easy reference by other packages</li> </ul> <h4 id="4-scripts">4. scripts/</h4> <ul> <li><strong>Python nodes and helper scripts</strong>; ROS 1 uses <code class="language-plaintext highlighter-rouge">#!/usr/bin/env python</code>; ROS 2 emphasizes entry points</li> </ul> <h4 id="5-launch">5. launch/</h4> <ul> <li><strong>Describe how the entire system runs</strong>: nodes, parameters, namespaces, remapping, machine distribution</li> </ul> <h4 id="6-msgsrvaction">6. msg/srv/action</h4> <ul> <li><strong>Custom communication interfaces</strong>; automatically generate source code in corresponding languages during <code class="language-plaintext highlighter-rouge">catkin_make</code> or <code class="language-plaintext highlighter-rouge">colcon build</code></li> </ul> <h4 id="7-config">7. config/</h4> <ul> <li><strong>Static parameter files</strong>; loaded using <code class="language-plaintext highlighter-rouge">&lt;rosparam file=</code> or ROS 2 <code class="language-plaintext highlighter-rouge">param file=</code></li> </ul> <h4 id="8-urdf-meshes-rviz">8. urdf/, meshes/, rviz/</h4> <ul> <li><strong>Robot models and visualization resources</strong></li> </ul> <h2 id="ros-1-vs-ros-2-package-differences">ROS 1 vs ROS 2 Package Differences</h2> <h3 id="1-build-system">1. Build System</h3> <ul> <li><strong>ROS 1</strong>: catkin (CMake-based)</li> <li><strong>ROS 2</strong>: ament (modified CMake + Python); but directory structure differences are minimal</li> </ul> <h3 id="2-launch-files">2. Launch Files</h3> <ul> <li><strong>ROS 1</strong>: “*.launch” XML</li> <li><strong>ROS 2</strong>: adds Python launch with enhanced functionality</li> </ul> <h3 id="3-security-and-cross-platform">3. Security and Cross-Platform</h3> <ul> <li><strong>ROS 2 packages</strong> automatically adapt to DDS middleware, security encryption, real-time parameter declarations, and other new features</li> </ul> <h2 id="common-development-workflow">Common Development Workflow</h2> <h3 id="1-create-package">1. Create Package</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># ROS1</span>
catkin_create_pkg my_package roscpp rospy std_msgs

<span class="c"># ROS2</span>
ros2 pkg create <span class="nt">--build-type</span> ament_cmake my_package <span class="nt">--dependencies</span> rclcpp std_msgs
</code></pre></div></div> <h3 id="2-write-code--compile">2. Write Code → Compile</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>catkin_make         <span class="c"># or colcon build</span>
<span class="nb">source </span>devel/setup.bash
</code></pre></div></div> <h3 id="3-run">3. Run</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rosrun my_package talker
roslaunch my_package demo.launch
</code></pre></div></div> <h2 id="best-practices">Best Practices</h2> <h3 id="package-naming">Package Naming</h3> <ul> <li>Use lowercase with underscores: <code class="language-plaintext highlighter-rouge">my_robot_package</code></li> <li>Be descriptive but concise</li> <li>Avoid special characters</li> </ul> <h3 id="dependency-management">Dependency Management</h3> <ul> <li>Only declare necessary dependencies</li> <li>Use appropriate dependency types (build, exec, test)</li> <li>Keep dependencies up to date</li> </ul> <h3 id="documentation">Documentation</h3> <ul> <li>Always include a README.md</li> <li>Document installation and usage</li> <li>Provide examples and tutorials</li> </ul> <h3 id="version-control">Version Control</h3> <ul> <li>Use semantic versioning</li> <li>Tag releases appropriately</li> <li>Maintain a changelog</li> </ul> <h2 id="summary">Summary</h2> <p>ROS Packages provide a “minimal reusable unit” packaging method, making robot software modular like LEGO blocks. A package typically contains: metadata (package.xml), build scripts (CMakeLists.txt), source code, scripts, launch files, parameters, models, and custom messages. Understanding package structure and dependency declaration is the foundation for ROS development and distribution.</p> <hr/> <p><em>ROS packages are the cornerstone of modular robotics development, enabling code reuse, easy distribution, and systematic dependency management in the robotics ecosystem.</em></p>]]></content><author><name></name></author></entry><entry><title type="html">a post with plotly.js</title><link href="https://ziya-jiang.github.io/blog/2025/plotly/" rel="alternate" type="text/html" title="a post with plotly.js"/><published>2025-03-26T14:24:00+00:00</published><updated>2025-03-26T14:24:00+00:00</updated><id>https://ziya-jiang.github.io/blog/2025/plotly</id><content type="html" xml:base="https://ziya-jiang.github.io/blog/2025/plotly/"><![CDATA[<p>This is an example post with some <a href="https://plotly.com/javascript/">plotly</a> code.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">plotly
</span><span class="sb">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "type": "scatter"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [16, 5, 11, 9],
      "type": "scatter"
    }
  ]
}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-plotly">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "type": "scatter"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [16, 5, 11, 9],
      "type": "scatter"
    }
  ]
}
</code></pre> <p>Also another example chart.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">plotly
</span><span class="sb">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "mode": "markers"
    },
    {
      "x": [2, 3, 4, 5],
      "y": [16, 5, 11, 9],
      "mode": "lines"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [12, 9, 15, 12],
      "mode": "lines+markers"
    }
  ],
  "layout": {
    "title": {
      "text": "Line and Scatter Plot"
    }
  }
}</span>
<span class="p">```</span>
</code></pre></div></div> <p>This is how it looks like:</p> <pre><code class="language-plotly">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "mode": "markers"
    },
    {
      "x": [2, 3, 4, 5],
      "y": [16, 5, 11, 9],
      "mode": "lines"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [12, 9, 15, 12],
      "mode": "lines+markers"
    }
  ],
  "layout": {
    "title": {
      "text": "Line and Scatter Plot"
    }
  }
}
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="charts"/><summary type="html"><![CDATA[this is what included plotly.js code could look like]]></summary></entry><entry><title type="html">a post with image galleries</title><link href="https://ziya-jiang.github.io/blog/2024/photo-gallery/" rel="alternate" type="text/html" title="a post with image galleries"/><published>2024-12-04T01:59:00+00:00</published><updated>2024-12-04T01:59:00+00:00</updated><id>https://ziya-jiang.github.io/blog/2024/photo-gallery</id><content type="html" xml:base="https://ziya-jiang.github.io/blog/2024/photo-gallery/"><![CDATA[<p>The images in this post are all zoomable, arranged into different mini-galleries using different libraries.</p> <h2 id="lightbox2"><a href="https://lokeshdhakar.com/projects/lightbox2/">Lightbox2</a></h2> <p><a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-2500.jpg" data-lightbox="roadtrip"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-200.jpg"/></a> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg" data-lightbox="roadtrip"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg"/></a> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg" data-lightbox="roadtrip"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg"/></a></p> <hr/> <h2 id="photoswipe"><a href="https://photoswipe.com/">PhotoSwipe</a></h2> <div class="pswp-gallery pswp-gallery--single-column" id="gallery--getting-started"> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg" data-pswp-width="1669" data-pswp-height="2500" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg" alt=""/> </a> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/7/img-2500.jpg" data-pswp-width="1875" data-pswp-height="2500" data-cropped="true" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/7/img-200.jpg" alt=""/> </a> <a href="https://unsplash.com" data-pswp-src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg" data-pswp-width="2500" data-pswp-height="1666" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg" alt=""/> </a> <div> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-2500.jpg" data-pswp-width="2500" data-pswp-height="1667" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-200.jpg" alt=""/> </a> </div> </div> <hr/> <h2 id="spotlight-js"><a href="https://nextapps-de.github.io/spotlight/">Spotlight JS</a></h2> <div class="spotlight-group"> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg"/> </a> </div> <div class="spotlight-group"> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/4/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/4/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/5/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/5/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-200.jpg"/> </a> </div> <hr/> <h2 id="venobox"><a href="https://veno.es/venobox/">Venobox</a></h2> <p><a class="venobox" data-gall="myGallery" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-2500.jpg"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-200.jpg"/></a> <a class="venobox" data-gall="myGallery" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg"/></a> <a class="venobox" data-gall="myGallery" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg"/></a></p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="images"/><summary type="html"><![CDATA[this is what included image galleries could look like]]></summary></entry><entry><title type="html">Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra</title><link href="https://ziya-jiang.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/" rel="alternate" type="text/html" title="Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra"/><published>2024-05-14T00:00:00+00:00</published><updated>2024-05-14T00:00:00+00:00</updated><id>https://ziya-jiang.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra</id><content type="html" xml:base="https://ziya-jiang.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/"><![CDATA[<p>May 14, 2024 We’re introducing a series of updates across the Gemini family of models, including the new 1.5 Flash, our lightweight model for speed and efficiency, and Project Astra, our vision for the future of AI assistants. In December, we launched our first natively multimodal model Gemini 1.0 in three sizes: Ultra, Pro and Nano. Just a few months later we released 1.5 Pro, with enhanced performance and a breakthrough long context window of 1 million tokens.Developers and enterprise customers have been putting 1.5 Pro to use in incredible ways and finding its long context window, multimodal reasoning capabilities and impressive overall performance incredibly useful.We know from user feedback that some applications need lower latency and a lower cost to serve. This inspired us to keep innovating, so today, we’re introducing Gemini 1.5 Flash: a model that’s lighter-weight than 1.5 Pro, and designed to be fast and efficient to serve at scale.Both 1.5 Pro and 1.5 Flash are available in public preview with a 1 million token context window in Google AI Studio and Vertex AI. And now, 1.5 Pro is also available with a 2 million token context window via waitlist to developers using the API and to Google Cloud customers.We’re also introducing updates across the Gemini family of models, announcing our next generation of open models, Gemma 2, and sharing progress on the future of AI assistants, with Project Astra.Context lengths of leading foundation models compared with Gemini 1.5’s 2 million token capability1.5 Flash is the newest addition to the Gemini model family and the fastest Gemini model served in the API. It’s optimized for high-volume, high-frequency tasks at scale, is more cost-efficient to serve and features our breakthrough long context window.While it’s a lighter weight model than 1.5 Pro, it’s highly capable of multimodal reasoning across vast amounts of information and delivers impressive quality for its size.The new Gemini 1.5 Flash model is optimized for speed and efficiency, is highly capable of multimodal reasoning and features our breakthrough long context window.1.5 Flash excels at summarization, chat applications, image and video captioning, data extraction from long documents and tables, and more. This is because it’s been trained by 1.5 Pro through a process called “distillation,” where the most essential knowledge and skills from a larger model are transferred to a smaller, more efficient model.Read more about 1.5 Flash in our updated Gemini 1.5 technical report, on the Gemini technology page, and learn about 1.5 Flash’s availability and pricing.Over the last few months, we’ve significantly improved 1.5 Pro, our best model for general performance across a wide range of tasks.Beyond extending its context window to 2 million tokens, we’ve enhanced its code generation, logical reasoning and planning, multi-turn conversation, and audio and image understanding through data and algorithmic advances. We see strong improvements on public and internal benchmarks for each of these tasks.1.5 Pro can now follow increasingly complex and nuanced instructions, including ones that specify product-level behavior involving role, format and style. We’ve improved control over the model’s responses for specific use cases, like crafting the persona and response style of a chat agent or automating workflows through multiple function calls. And we’ve enabled users to steer model behavior by setting system instructions.We added audio understanding in the Gemini API and Google AI Studio, so 1.5 Pro can now reason across image and audio for videos uploaded in Google AI Studio. And we’re now integrating 1.5 Pro into Google products, including Gemini Advanced and in Workspace apps.Read more about 1.5 Pro in our updated Gemini 1.5 technical report and on the Gemini technology page.Gemini Nano is expanding beyond text-only inputs to include images as well. Starting with Pixel, applications using Gemini Nano with Multimodality will be able to understand the world the way people do — not just through text, but also through sight, sound and spoken language.Read more about Gemini 1.0 Nano on Android.Today, we’re also sharing a series of updates to Gemma, our family of open models built from the same research and technology used to create the Gemini models.We’re announcing Gemma 2, our next generation of open models for responsible AI innovation. Gemma 2 has a new architecture designed for breakthrough performance and efficiency, and will be available in new sizes.The Gemma family is also expanding with PaliGemma, our first vision-language model inspired by PaLI-3. And we’ve upgraded our Responsible Generative AI Toolkit with LLM Comparator for evaluating the quality of model responses.Read more on the Developer blog.As part of Google DeepMind’s mission to build AI responsibly to benefit humanity, we’ve always wanted to develop universal AI agents that can be helpful in everyday life. That’s why today, we’re sharing our progress in building the future of AI assistants with Project Astra (advanced seeing and talking responsive agent).To be truly useful, an agent needs to understand and respond to the complex and dynamic world just like people do — and take in and remember what it sees and hears to understand context and take action. It also needs to be proactive, teachable and personal, so users can talk to it naturally and without lag or delay.While we’ve made incredible progress developing AI systems that can understand multimodal information, getting response time down to something conversational is a difficult engineering challenge. Over the past few years, we’ve been working to improve how our models perceive, reason and converse to make the pace and quality of interaction feel more natural.Building on Gemini, we’ve developed prototype agents that can process information faster by continuously encoding video frames, combining the video and speech input into a timeline of events, and caching this information for efficient recall.By leveraging our leading speech models, we also enhanced how they sound, giving the agents a wider range of intonations. These agents can better understand the context they’re being used in, and respond quickly, in conversation.With technology like this, it’s easy to envision a future where people could have an expert AI assistant by their side, through a phone or glasses. And some of these capabilities are coming to Google products, like the Gemini app and web experience, later this year.We’ve made incredible progress so far with our family of Gemini models, and we’re always striving to advance the state-of-the-art even further. By investing in a relentless production line of innovation, we’re able to explore new ideas at the frontier, while also unlocking the possibility of new and exciting Gemini use cases.Learn more about Gemini and its capabilities. Your information will be used in accordance with Google’s privacy policy.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      Done. Just one step more.
    
      Check your inbox to confirm your subscription.
    You are already subscribed to our newsletter.
    You can also subscribe with a
    different email address
    
    .
    
  Let’s stay in touch. Get the latest news from Google in your inbox.
          Follow Us
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[We’re sharing updates across our Gemini family of models and a glimpse of Project Astra, our vision for the future of AI assistants.]]></summary></entry><entry><title type="html">a post with tabs</title><link href="https://ziya-jiang.github.io/blog/2024/tabs/" rel="alternate" type="text/html" title="a post with tabs"/><published>2024-05-01T00:32:13+00:00</published><updated>2024-05-01T00:32:13+00:00</updated><id>https://ziya-jiang.github.io/blog/2024/tabs</id><content type="html" xml:base="https://ziya-jiang.github.io/blog/2024/tabs/"><![CDATA[<p>This is how a post with <a href="https://github.com/Ovski4/jekyll-tabs">tabs</a> looks like. Note that the tabs could be used for different purposes, not only for code.</p> <h2 id="first-tabs">First tabs</h2> <p>To add tabs, use the following syntax:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{%</span><span class="w"> </span><span class="nt">tabs</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-1</span><span class="w"> </span><span class="cp">%}</span>

Content 1

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-2</span><span class="w"> </span><span class="cp">%}</span>

Content 2

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtabs</span><span class="w"> </span><span class="cp">%}</span>
</code></pre></div></div> <p>With this you can generate visualizations like:</p> <ul id="log" class="tab" data-tab="6bd3e763-6b95-45d4-87d6-864b06eb5cc5" data-name="log"> <li class="active" id="log-php"> <a href="#">php </a> </li> <li id="log-js"> <a href="#">js </a> </li> <li id="log-ruby"> <a href="#">ruby </a> </li> </ul> <ul class="tab-content" id="6bd3e763-6b95-45d4-87d6-864b06eb5cc5" data-name="log"> <li class="active"> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">var_dump</span><span class="p">(</span><span class="s1">'hello'</span><span class="p">);</span>
</code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">pputs</span> <span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span>
</code></pre></div></div> </li> </ul> <h2 id="another-example">Another example</h2> <ul id="data-struct" class="tab" data-tab="9dfa74a6-14aa-4f91-96d7-eea1f3a0ba8e" data-name="data-struct"> <li class="active" id="data-struct-yaml"> <a href="#">yaml </a> </li> <li id="data-struct-json"> <a href="#">json </a> </li> </ul> <ul class="tab-content" id="9dfa74a6-14aa-4f91-96d7-eea1f3a0ba8e" data-name="data-struct"> <li class="active"> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">hello</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">whatsup"</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">hi"</span>
</code></pre></div></div> </li> <li> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"hello"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"whatsup"</span><span class="p">,</span><span class="w"> </span><span class="s2">"hi"</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> </li> </ul> <h2 id="tabs-for-something-else">Tabs for something else</h2> <ul id="something-else" class="tab" data-tab="2eff9daa-cbad-4af6-a1b6-8bb7eaf2647d" data-name="something-else"> <li class="active" id="something-else-text"> <a href="#">text </a> </li> <li id="something-else-quote"> <a href="#">quote </a> </li> <li id="something-else-list"> <a href="#">list </a> </li> </ul> <ul class="tab-content" id="2eff9daa-cbad-4af6-a1b6-8bb7eaf2647d" data-name="something-else"> <li class="active"> <p>Regular text</p> </li> <li> <blockquote> <p>A quote</p> </blockquote> </li> <li> <p>Hipster list</p> <ul> <li>brunch</li> <li>fixie</li> <li>raybans</li> <li>messenger bag</li> </ul> </li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is what included tabs in a post could look like]]></summary></entry><entry><title type="html">a post with typograms</title><link href="https://ziya-jiang.github.io/blog/2024/typograms/" rel="alternate" type="text/html" title="a post with typograms"/><published>2024-04-29T23:36:10+00:00</published><updated>2024-04-29T23:36:10+00:00</updated><id>https://ziya-jiang.github.io/blog/2024/typograms</id><content type="html" xml:base="https://ziya-jiang.github.io/blog/2024/typograms/"><![CDATA[<p>This is an example post with some <a href="https://github.com/google/typograms/">typograms</a> code.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">typograms
</span><span class="sb">+----+
|    |---&gt; My first diagram!
+----+</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-typograms">+----+
|    |---&gt; My first diagram!
+----+
</code></pre> <p>Another example:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">typograms
</span><span class="sb">.------------------------.
|.----------------------.|
||"https://example.com" ||
|'----------------------'|
| ______________________ |
||                      ||
||   Welcome!           ||
||                      ||
||                      ||
||  .----------------.  ||
||  | username       |  ||
||  '----------------'  ||
||  .----------------.  ||
||  |"*******"       |  ||
||  '----------------'  ||
||                      ||
||  .----------------.  ||
||  |   "Sign-up"    |  ||
||  '----------------'  ||
||                      ||
|+----------------------+|
.------------------------.</span>
<span class="p">```</span>
</code></pre></div></div> <p>which generates:</p> <pre><code class="language-typograms">.------------------------.
|.----------------------.|
||"https://example.com" ||
|'----------------------'|
| ______________________ |
||                      ||
||   Welcome!           ||
||                      ||
||                      ||
||  .----------------.  ||
||  | username       |  ||
||  '----------------'  ||
||  .----------------.  ||
||  |"*******"       |  ||
||  '----------------'  ||
||                      ||
||  .----------------.  ||
||  |   "Sign-up"    |  ||
||  '----------------'  ||
||                      ||
|+----------------------+|
.------------------------.
</code></pre> <p>For more examples, check out the <a href="https://google.github.io/typograms/#examples">typograms documentation</a>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="diagrams"/><summary type="html"><![CDATA[this is what included typograms code could look like]]></summary></entry><entry><title type="html">a post that can be cited</title><link href="https://ziya-jiang.github.io/blog/2024/post-citation/" rel="alternate" type="text/html" title="a post that can be cited"/><published>2024-04-28T15:06:00+00:00</published><updated>2024-04-28T15:06:00+00:00</updated><id>https://ziya-jiang.github.io/blog/2024/post-citation</id><content type="html" xml:base="https://ziya-jiang.github.io/blog/2024/post-citation/"><![CDATA[<p>This is an example post that can be cited. The content of the post ends here, while the citation information is automatically provided below. The only thing needed is for you to set the <code class="language-plaintext highlighter-rouge">citation</code> key in the front matter to <code class="language-plaintext highlighter-rouge">true</code>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="citation"/><summary type="html"><![CDATA[this is what a post that can be cited looks like]]></summary></entry></feed>